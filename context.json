{
  "conceptTypes": {
    "LocalisedString": {
      "name": "LocalisedString"
    },
    "DisplayResolution": {
      "name": "DisplayResolution",
      "attributes": {
        "width": {
          "name": "width",
          "type": "uint",
          "optional": false
        },
        "height": {
          "name": "height",
          "type": "uint",
          "optional": false
        }
      }
    },
    "PersonalLogisticParameters": {
      "name": "PersonalLogisticParameters",
      "attributes": {
        "name": {
          "name": "name",
          "desc": "The item. If nil the filter gets cleared.",
          "type": "string",
          "optional": false
        },
        "min": {
          "name": "min",
          "type": "uint",
          "optional": false
        },
        "max": {
          "name": "max",
          "type": "uint",
          "optional": false
        }
      }
    },
    "Position": {
      "name": "Position"
    },
    "ChunkPosition": {
      "name": "ChunkPosition"
    },
    "TilePosition": {
      "name": "TilePosition"
    },
    "ChunkPositionAndArea": {
      "name": "ChunkPositionAndArea",
      "attributes": {
        "x": {
          "name": "x",
          "type": "int",
          "optional": false
        },
        "y": {
          "name": "y",
          "type": "int",
          "optional": false
        },
        "area": {
          "name": "area",
          "type": "BoundingBox",
          "optional": false
        }
      }
    },
    "GuiLocation": {
      "name": "GuiLocation"
    },
    "GuiAnchor": {
      "name": "GuiAnchor",
      "attributes": {
        "gui": {
          "name": "gui",
          "type": "defines.relative_gui_type",
          "optional": false
        },
        "position": {
          "name": "position",
          "type": "defines.relative_gui_position",
          "optional": false
        },
        "type": {
          "name": "type",
          "desc": "If provided, only anchors the GUI element when the opened things type matches the type.",
          "type": "string",
          "optional": false
        },
        "name": {
          "name": "name",
          "desc": "If provided, only anchors the GUI element when the opened thing matches the name. name takes precedence over names .",
          "type": "string",
          "optional": false
        },
        "names": {
          "name": "names",
          "desc": "If provided, only anchors the GUI element when the opened thing matches one of the names.  When reading an anchor names is always populated.",
          "type": {
            "value": [
              "string"
            ],
            "type": "Array"
          },
          "optional": false
        }
      }
    },
    "OldTileAndPosition": {
      "name": "OldTileAndPosition",
      "attributes": {
        "old_tile": {
          "name": "old_tile",
          "type": "LuaTilePrototype",
          "optional": false
        },
        "position": {
          "name": "position",
          "type": "TilePosition",
          "optional": false
        }
      }
    },
    "Tags": {
      "name": "Tags"
    },
    "SmokeSource": {
      "name": "SmokeSource",
      "attributes": {
        "name": {
          "name": "name",
          "type": "string",
          "optional": false
        },
        "frequency": {
          "name": "frequency",
          "type": "double",
          "optional": false
        },
        "offset": {
          "name": "offset",
          "type": "double",
          "optional": false
        },
        "position": {
          "name": "position",
          "type": "Vector",
          "optional": false
        },
        "north_position": {
          "name": "north_position",
          "type": "Vector",
          "optional": false
        },
        "east_position": {
          "name": "east_position",
          "type": "Vector",
          "optional": false
        },
        "south_position": {
          "name": "south_position",
          "type": "Vector",
          "optional": false
        },
        "west_position": {
          "name": "west_position",
          "type": "Vector",
          "optional": false
        },
        "deviation": {
          "name": "deviation",
          "type": "Position",
          "optional": false
        },
        "starting_frame_speed": {
          "name": "starting_frame_speed",
          "type": "uint16",
          "optional": false
        },
        "starting_frame_speed_deviation": {
          "name": "starting_frame_speed_deviation",
          "type": "double",
          "optional": false
        },
        "starting_frame": {
          "name": "starting_frame",
          "type": "uint16",
          "optional": false
        },
        "starting_frame_deviation": {
          "name": "starting_frame_deviation",
          "type": "double",
          "optional": false
        },
        "slow_down_factor": {
          "name": "slow_down_factor",
          "type": "uint8",
          "optional": false
        },
        "height": {
          "name": "height",
          "type": "float",
          "optional": false
        },
        "height_deviation": {
          "name": "height_deviation",
          "type": "float",
          "optional": false
        },
        "starting_vertical_speed": {
          "name": "starting_vertical_speed",
          "type": "float",
          "optional": false
        },
        "starting_vertical_speed_deviation": {
          "name": "starting_vertical_speed_deviation",
          "type": "float",
          "optional": false
        },
        "vertical_speed_slowdown": {
          "name": "vertical_speed_slowdown",
          "type": "float",
          "optional": false
        }
      }
    },
    "Vector": {
      "name": "Vector"
    },
    "BoundingBox": {
      "name": "BoundingBox"
    },
    "ScriptArea": {
      "name": "ScriptArea"
    },
    "ScriptPosition": {
      "name": "ScriptPosition"
    },
    "Color": {
      "name": "Color"
    },
    "ColorModifier": {
      "name": "ColorModifier"
    },
    "PathFindFlags": {
      "name": "PathFindFlags"
    },
    "GameViewSettings": {
      "name": "GameViewSettings",
      "attributes": {
        "show_controller_gui": {
          "name": "show_controller_gui",
          "shortDesc": "Show the controller GUI elements.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "show_minimap": {
          "name": "show_minimap",
          "shortDesc": "Show the chart in the upper right-hand corner of the screen.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "show_research_info": {
          "name": "show_research_info",
          "shortDesc": "Show research progress and name in the upper right-hand corner of the screen.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "show_entity_info": {
          "name": "show_entity_info",
          "shortDesc": "Show overlay icons on entities.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "show_alert_gui": {
          "name": "show_alert_gui",
          "shortDesc": "Show the flashing alert icons next to the player's toolbar.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "update_entity_selection": {
          "name": "update_entity_selection",
          "shortDesc": "Whentrue(the default), mousing over an entity will select it.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "show_rail_block_visualisation": {
          "name": "show_rail_block_visualisation",
          "shortDesc": "Whentrue(false is default), the rails will always show the rail block visualisation.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "show_side_menu": {
          "name": "show_side_menu",
          "shortDesc": "Shows or hides the buttons row.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "show_map_view_options": {
          "name": "show_map_view_options",
          "shortDesc": "Shows or hides the view options when map is opened.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "show_quickbar": {
          "name": "show_quickbar",
          "shortDesc": "Shows or hides quickbar of shortcuts.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "show_shortcut_bar": {
          "name": "show_shortcut_bar",
          "shortDesc": "Shows or hides the shortcut bar.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "flags": "Struct"
    },
    "TileProperties": {
      "name": "TileProperties",
      "attributes": {
        "tier_from_start": {
          "name": "tier_from_start",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "roughness": {
          "name": "roughness",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "elevation": {
          "name": "elevation",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "available_water": {
          "name": "available_water",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "temperature": {
          "name": "temperature",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "flags": "Struct"
    },
    "MapViewSettings": {
      "name": "MapViewSettings"
    },
    "MapSettings": {
      "name": "MapSettings"
    },
    "DifficultySettings": {
      "name": "DifficultySettings"
    },
    "MapExchangeStringData": {
      "name": "MapExchangeStringData",
      "attributes": {
        "map_settings": {
          "name": "map_settings",
          "type": "MapSettings with DifficultySettings",
          "optional": false
        },
        "map_gen_settings": {
          "name": "map_gen_settings",
          "type": "MapGenSettings",
          "optional": false
        }
      }
    },
    "Fluid": {
      "name": "Fluid"
    },
    "Ingredient": {
      "name": "Ingredient"
    },
    "Product": {
      "name": "Product",
      "attributes": {
        "type": {
          "name": "type",
          "desc": "\"item\" or \"fluid\" .",
          "type": "string",
          "optional": false
        },
        "name": {
          "name": "name",
          "desc": "Prototype name of the result.",
          "type": "string",
          "optional": false
        },
        "amount": {
          "name": "amount",
          "desc": "Amount of the item or fluid to give. If not specified, amount_min , amount_max and probability must all be specified.",
          "type": "double",
          "optional": false
        },
        "temperature": {
          "name": "temperature",
          "desc": "The fluid temperature of this product. Has no effect if type is '\"item\"'.",
          "type": "double",
          "optional": false
        },
        "amount_min": {
          "name": "amount_min",
          "desc": "Minimal amount of the item or fluid to give. Has no effect when amount is specified.",
          "type": {
            "value": [
              "uint",
              "double"
            ],
            "type": "Union"
          },
          "optional": false
        },
        "amount_max": {
          "name": "amount_max",
          "desc": "Maximum amount of the item or fluid to give. Has no effect when amount is specified.",
          "type": {
            "value": [
              "uint",
              "double"
            ],
            "type": "Union"
          },
          "optional": false
        },
        "probability": {
          "name": "probability",
          "desc": "A value in range [0, 1]. Item or fluid is only given with this probability;  otherwise no product is produced.",
          "type": "double",
          "optional": false
        },
        "catalyst_amount": {
          "name": "catalyst_amount",
          "desc": "How much of this product is a catalyst.",
          "type": {
            "value": [
              "uint",
              "double"
            ],
            "type": "Union"
          },
          "optional": false
        }
      }
    },
    "Modifier": {
      "name": "Modifier"
    },
    "Offer": {
      "name": "Offer",
      "attributes": {
        "price": {
          "name": "price",
          "desc": "List of prices.",
          "type": {
            "value": [
              "Ingredient"
            ],
            "type": "Array"
          },
          "optional": false
        },
        "offer": {
          "name": "offer",
          "desc": "The action that will take place when a player accepts the offer. Usually a \"give-item\" modifier.",
          "type": "Modifier",
          "optional": false
        }
      }
    },
    "AutoplaceSpecification": {
      "name": "AutoplaceSpecification",
      "attributes": {
        "probability_expression": {
          "name": "probability_expression",
          "type": "NoiseExpression",
          "optional": false
        },
        "richness_expression": {
          "name": "richness_expression",
          "type": "NoiseExpression",
          "optional": false
        },
        "coverage": {
          "name": "coverage",
          "type": "double",
          "optional": false
        },
        "sharpness": {
          "name": "sharpness",
          "type": "double",
          "optional": false
        },
        "max_probability": {
          "name": "max_probability",
          "type": "double",
          "optional": false
        },
        "placement_density": {
          "name": "placement_density",
          "type": "uint",
          "optional": false
        },
        "richness_base": {
          "name": "richness_base",
          "type": "double",
          "optional": false
        },
        "richness_multiplier": {
          "name": "richness_multiplier",
          "type": "double",
          "optional": false
        },
        "richness_multiplier_distance_bonus": {
          "name": "richness_multiplier_distance_bonus",
          "type": "double",
          "optional": false
        },
        "starting_area_size": {
          "name": "starting_area_size",
          "type": "uint",
          "optional": false
        },
        "order": {
          "name": "order",
          "type": "string",
          "optional": false
        },
        "default_enabled": {
          "name": "default_enabled",
          "type": "boolean",
          "optional": false
        },
        "peaks": {
          "name": "peaks",
          "desc": "A peak is a table",
          "type": {
            "value": [
              "peak"
            ],
            "type": "Array"
          },
          "optional": false
        },
        "control": {
          "name": "control",
          "desc": "Control prototype name",
          "type": "string",
          "optional": false
        },
        "tile_restriction": {
          "name": "tile_restriction",
          "desc": "Restriction is a table",
          "type": {
            "value": [
              "restriction"
            ],
            "type": "Array"
          },
          "optional": false
        },
        "force": {
          "name": "force",
          "type": "string",
          "optional": false
        },
        "random_probability_penalty": {
          "name": "random_probability_penalty",
          "type": "double",
          "optional": false
        }
      }
    },
    "NoiseExpression": {
      "name": "NoiseExpression",
      "attributes": {
        "type": {
          "name": "type",
          "desc": "Names the type of the expression and determines what other fields are required.",
          "type": "string",
          "optional": false
        }
      }
    },
    "Resistances": {
      "name": "Resistances"
    },
    "MapGenSize": {
      "name": "MapGenSize"
    },
    "AutoplaceSettings": {
      "name": "AutoplaceSettings",
      "attributes": {
        "treat_missing_as_default": {
          "name": "treat_missing_as_default",
          "desc": "If missing autoplace names for this type should be default enabled.",
          "type": "boolean",
          "optional": false
        },
        "settings": {
          "name": "settings",
          "desc": "Each table of this dictionary has the following fields",
          "type": {
            "value": [
              "string",
              "table"
            ],
            "type": "Table"
          },
          "optional": false
        }
      }
    },
    "CliffPlacementSettings": {
      "name": "CliffPlacementSettings",
      "attributes": {
        "name": {
          "name": "name",
          "desc": "Name of the cliff prototype.",
          "type": "string",
          "optional": false
        },
        "cliff_elevation_0": {
          "name": "cliff_elevation_0",
          "desc": "Elevation at which the first row of cliffs is placed.  The default is 10, and this cannot be set from the map generation GUI.",
          "type": "float",
          "optional": false
        },
        "cliff_elevation_interval": {
          "name": "cliff_elevation_interval",
          "desc": "Elevation difference between successive rows of cliffs.  This is inversely proportional to 'frequency' in the map generation GUI.  Specifically, when set from the GUI the value is 40 / frequency.",
          "type": "float",
          "optional": false
        },
        "richness": {
          "name": "richness",
          "desc": "Corresponds to 'continuity' in the GUI.  This value is not used directly, but is used by the 'cliffiness' noise expression,  which in combination with elevation and the two cliff elevation properties drives cliff placement  (cliffs are placed when elevation crosses the elevation contours defined by cliff_elevation_0 and cliff_elevation_interval  when 'cliffiness' is greater than 0.5).  The default 'cliffiness' expression interprets this value such that larger values result in longer unbroken walls of cliffs,  and smaller values (between 0 and 1) result in larger gaps in cliff walls.",
          "type": "MapGenSize",
          "optional": false
        }
      }
    },
    "MapGenSettings": {
      "name": "MapGenSettings",
      "attributes": {
        "terrain_segmentation": {
          "name": "terrain_segmentation",
          "desc": "The inverse of 'water scale' in the map generator GUI.  Lower terrain_segmentation increases the scale of elevation features (lakes, continents, etc).  This behavior can be overridden with alternate elevation generators (see property_expression_names , below).",
          "type": "MapGenSize",
          "optional": false
        },
        "water": {
          "name": "water",
          "desc": "The equivalent to 'water coverage' in the map generator GUI.  Specifically, when this value is non-zero,  water_level = 10 * log2(the value of this field), and the elevation  generator subtracts water level from elevation before adding starting lakes.  If water is set to 'none', elevation is clamped to a small positive value before adding starting lakes.  This behavior can be overridden with alternate elevation generators (see property_expression_names , below).",
          "type": "MapGenSize",
          "optional": false
        },
        "autoplace_controls": {
          "name": "autoplace_controls",
          "desc": "Keyed by autoplace control prototype name, each table of this dictionary has the following fields",
          "type": {
            "value": [
              "string",
              "table"
            ],
            "type": "Table"
          },
          "optional": false
        },
        "default_enable_all_autoplace_controls": {
          "name": "default_enable_all_autoplace_controls",
          "desc": "If autoplace_controls not defined should be default-enabled.",
          "type": "boolean",
          "optional": false
        },
        "autoplace_settings": {
          "name": "autoplace_settings",
          "desc": "Each setting in this dictionary maps the string type to the settings for that type. Valid types are `\"entity\"` `\"tile\"` `\"decorative\"`",
          "type": {
            "value": [
              "string",
              "AutoplaceSettings"
            ],
            "type": "Table"
          },
          "optional": false
        },
        "cliff_settings": {
          "name": "cliff_settings",
          "desc": "Map generation settings for entities of the type \"cliff\".",
          "type": "CliffPlacementSettings",
          "optional": false
        },
        "seed": {
          "name": "seed",
          "desc": "The random seed used to generated this map.",
          "type": "uint",
          "optional": false
        },
        "width": {
          "name": "width",
          "desc": "Width in tiles. If 0, the map has infinite width.",
          "type": "uint",
          "optional": false
        },
        "height": {
          "name": "height",
          "desc": "Height in tiles. If 0, the map has infinite height.",
          "type": "uint",
          "optional": false
        },
        "starting_area": {
          "name": "starting_area",
          "desc": "Size of the starting area.",
          "type": "MapGenSize",
          "optional": false
        },
        "starting_points": {
          "name": "starting_points",
          "desc": "Positions of the starting areas.",
          "type": {
            "value": [
              "Position"
            ],
            "type": "Array"
          },
          "optional": false
        },
        "peaceful_mode": {
          "name": "peaceful_mode",
          "desc": "Whether peaceful mode is enabled for this map.",
          "type": "boolean",
          "optional": false
        },
        "property_expression_names": {
          "name": "property_expression_names",
          "desc": "Overrides for tile property value generators.  Values either name a NamedNoiseExpression or can be literal numbers, stored as strings (e.g. \"5\" ).  All other controls can be overridden by a property expression names.  Notable properties `moisture` - a value between 0 and 1 that determines whether a tile becomes sandy (low moisture) or grassy (high moisture). `aux` - a value between 0 and 1 that determines whether low-moisture tiles become sand or red desert. `temperature` - provides a value (vaguely representing degrees Celsius, varying between -20 and 50) that is used  (together with moisture and aux) as part of tree and decorative placement. `elevation` - tiles values less than zero become water. Cliffs are placed along certain contours according to [CliffPlacementSettings](https://lua-api.factorio.com/latest/Concepts.html#CliffPlacementSettings) . `cliffiness` - determines whether (when >0.5) or not (when <0.5) a cliff will be placed at an otherwise suitable (according to [CliffPlacementSettings](https://lua-api.factorio.com/latest/Concepts.html#CliffPlacementSettings) ) location. `enemy-base-intensity` - a number that is referenced by both `enemy-base-frequency` and `enemy-base-radius` .  i.e. if this is overridden, enemy base frequency and size will both be affected and do something reasonable.  By default, this expression returns a value proportional to distance from any starting point, clamped at about 7. `enemy-base-frequency` - a number representing average number of enemy bases per tile for a region, by default in terms of `enemy-base-intensity` . `enemy-base-radius` - a number representing the radius of an enemy base, if one were to be placed on the given tile, by default proportional to  a constant plus `enemy-base-intensity` . Climate controls ('Moisture' and 'Terrain type' at the bottom of the Terrain tab in the map generator GUI) don't have their own dedicated structures in MapGenSettings.  Instead, their values are stored as property expression overrides with long names `control-setting:moisture:frequency:multiplier` - frequency (inverse of scale) multiplier for moisture noise. Default is 1. `control-setting:moisture:bias` - global bias for moisture (which normally varies between 0 and 1). Default is 0. `control-setting:aux:frequency:multiplier` - frequency (inverse of scale) multiplier for aux (called 'terrain type' in the GUI) noise. Default is 1. `control-setting:aux:bias` - global bias for aux/terrain type (which normally varies between 0 and 1). Default is 0. All other MapGenSettings feed into named noise expressions,  and therefore placement can be overridden by including the name of a property in this dictionary.  The probability and richness functions for placing specific tiles, entities, and decoratives can be overridden  by including an entry named {tile|entity|decorative}:(prototype name):{probability|richness} .",
          "type": {
            "value": [
              "string",
              "string"
            ],
            "type": "Table"
          },
          "optional": false
        }
      }
    },
    "SignalID": {
      "name": "SignalID",
      "attributes": {
        "type": {
          "name": "type",
          "desc": "\"item\" , \"fluid\" , or \"virtual\" .",
          "type": "string",
          "optional": false
        },
        "name": {
          "name": "name",
          "desc": "Name of the item, fluid or virtual signal.",
          "type": "string",
          "optional": false
        }
      }
    },
    "Signal": {
      "name": "Signal",
      "attributes": {
        "signal": {
          "name": "signal",
          "desc": "ID of the signal.",
          "type": "SignalID",
          "optional": false
        },
        "count": {
          "name": "count",
          "desc": "Value of the signal.",
          "type": "int",
          "optional": false
        }
      }
    },
    "UpgradeFilter": {
      "name": "UpgradeFilter",
      "attributes": {
        "type": {
          "name": "type",
          "desc": "\"item\" , or \"entity\" .",
          "type": "string",
          "optional": false
        },
        "name": {
          "name": "name",
          "desc": "Name of the item, or entity.",
          "type": "string",
          "optional": false
        }
      }
    },
    "InfinityInventoryFilter": {
      "name": "InfinityInventoryFilter",
      "attributes": {
        "name": {
          "name": "name",
          "desc": "Name of the item.",
          "type": "string",
          "optional": false
        },
        "count": {
          "name": "count",
          "desc": "The count of the filter.",
          "type": "uint",
          "optional": false
        },
        "mode": {
          "name": "mode",
          "desc": "\"at-least\" , \"at-most\" , or \"exactly\"",
          "type": "string",
          "optional": false
        },
        "index": {
          "name": "index",
          "desc": "The index of this filter in the filters list.",
          "type": "uint",
          "optional": false
        }
      }
    },
    "InfinityPipeFilter": {
      "name": "InfinityPipeFilter",
      "attributes": {
        "name": {
          "name": "name",
          "desc": "Name of the fluid.",
          "type": "string",
          "optional": false
        },
        "percentage": {
          "name": "percentage",
          "desc": "The fill percentage the pipe (e.g. 0.5 for 50%). Can't be negative.",
          "type": "double",
          "optional": false
        },
        "temperature": {
          "name": "temperature",
          "desc": "The temperature of the fluid. Defaults to the default/minimum temperature of the fluid.",
          "type": "double",
          "optional": false
        },
        "mode": {
          "name": "mode",
          "desc": "\"at-least\" , \"at-most\" , or \"exactly\"",
          "type": "string",
          "optional": false
        }
      }
    },
    "HeatSetting": {
      "name": "HeatSetting",
      "attributes": {
        "temperature": {
          "name": "temperature",
          "desc": "The target temperature. Defaults to the minimum temperature of the heat buffer (15).",
          "type": "double",
          "optional": false
        },
        "mode": {
          "name": "mode",
          "desc": "\"at-least\" , \"at-most\" , or \"exactly\" . Defaults to \"at-least\" .",
          "type": "string",
          "optional": false
        }
      }
    },
    "FluidBoxConnection": {
      "name": "FluidBoxConnection",
      "attributes": {
        "max_underground_distance": {
          "name": "max_underground_distance",
          "desc": "The maximum tile distance this underground connection can connect at if this is an underground pipe.",
          "type": "uint",
          "optional": false
        },
        "type": {
          "name": "type",
          "desc": "The connection type: \"input\", \"output\", or \"input-output\".",
          "type": "string",
          "optional": false
        },
        "positions": {
          "name": "positions",
          "desc": "The 4 cardinal direction connection points for this pipe",
          "type": {
            "value": [
              "Vector"
            ],
            "type": "Array"
          },
          "optional": false
        }
      }
    },
    "ArithmeticCombinatorParameters": {
      "name": "ArithmeticCombinatorParameters",
      "attributes": {
        "first_signal": {
          "name": "first_signal",
          "desc": "First signal to use in an operation. If not specified, the second  argument will be the value of first_constant .",
          "type": "SignalID",
          "optional": false
        },
        "second_signal": {
          "name": "second_signal",
          "desc": "Second signal to use in an operation. If not specified, the second  argument will be the value of second_constant .",
          "type": "SignalID",
          "optional": false
        },
        "first_constant": {
          "name": "first_constant",
          "desc": "Constant to use as the first argument of the operation. Has no effect when first_signal is set. Defaults to 0 .",
          "type": "int",
          "optional": false
        },
        "second_constant": {
          "name": "second_constant",
          "desc": "Constant to use as the second argument of the operation. Has no effect when second_signal is set. Defaults to 0 .",
          "type": "int",
          "optional": false
        },
        "operation": {
          "name": "operation",
          "desc": "Must be one of \"*\" , \"/\" , \"+\" , \"-\" , \"%\" , \"^\" , \"<<\" , \">>\" , \"AND\" , \"OR\" , \"XOR\" . When not specified,  defaults to \"*\" .",
          "type": "string",
          "optional": false
        },
        "output_signal": {
          "name": "output_signal",
          "desc": "Specifies the signal to output.",
          "type": "SignalID",
          "optional": false
        }
      }
    },
    "ComparatorString": {
      "name": "ComparatorString"
    },
    "DeciderCombinatorParameters": {
      "name": "DeciderCombinatorParameters",
      "attributes": {
        "first_signal": {
          "name": "first_signal",
          "desc": "Defaults to blank.",
          "type": "SignalID",
          "optional": false
        },
        "second_signal": {
          "name": "second_signal",
          "desc": "Second signal to use in an operation, if any. If this is not specified,  the second argument to a decider combinator's operation is assumed to be the value of constant .",
          "type": "SignalID",
          "optional": false
        },
        "constant": {
          "name": "constant",
          "desc": "Constant to use as the second argument of operation. Defaults to 0 .",
          "type": "uint",
          "optional": false
        },
        "comparator": {
          "name": "comparator",
          "desc": "Specifies how the inputs should be compared. If not specified, defaults to \"<\" .",
          "type": "ComparatorString",
          "optional": false
        },
        "output_signal": {
          "name": "output_signal",
          "desc": "Defaults to blank.",
          "type": "SignalID",
          "optional": false
        },
        "copy_count_from_input": {
          "name": "copy_count_from_input",
          "desc": "Defaults to true . When false , will output a value of 1 for  the given output_signal .",
          "type": "boolean",
          "optional": false
        }
      }
    },
    "CircuitCondition": {
      "name": "CircuitCondition",
      "attributes": {
        "comparator": {
          "name": "comparator",
          "desc": "Specifies how the inputs should be compared. If not specified, defaults to \"<\" .",
          "type": "ComparatorString",
          "optional": false
        },
        "first_signal": {
          "name": "first_signal",
          "desc": "Defaults to blank",
          "type": "SignalID",
          "optional": false
        },
        "second_signal": {
          "name": "second_signal",
          "desc": "What to compare first_signal to. If not specified, first_signal will be compared to constant .",
          "type": "SignalID",
          "optional": false
        },
        "constant": {
          "name": "constant",
          "desc": "Constant to compare first_signal to. Has no effect when second_signal is set.  When neither second_signal nor constant are specified, the effect is as though constant were specified  with the value 0 .",
          "type": "int",
          "optional": false
        }
      }
    },
    "CircuitConditionSpecification": {
      "name": "CircuitConditionSpecification",
      "attributes": {
        "condition": {
          "name": "condition",
          "type": "CircuitCondition",
          "optional": false
        },
        "fulfilled": {
          "name": "fulfilled",
          "desc": "Is the condition currently fulfilled?",
          "type": "boolean",
          "optional": false
        }
      }
    },
    "Filter": {
      "name": "Filter",
      "attributes": {
        "index": {
          "name": "index",
          "desc": "Position of the corresponding filter slot.",
          "type": "uint",
          "optional": false
        },
        "name": {
          "name": "name",
          "desc": "Item prototype name of the item to filter.",
          "type": "string",
          "optional": false
        }
      }
    },
    "PlaceAsTileResult": {
      "name": "PlaceAsTileResult",
      "attributes": {
        "result": {
          "name": "result",
          "desc": "The tile prototype.",
          "type": "LuaTilePrototype",
          "optional": false
        },
        "condition_size": {
          "name": "condition_size",
          "type": "uint",
          "optional": false
        },
        "condition": {
          "name": "condition",
          "type": "table",
          "optional": false
        }
      }
    },
    "RaiseEventParameters": {
      "name": "RaiseEventParameters"
    },
    "SimpleItemStack": {
      "name": "SimpleItemStack"
    },
    "Command": {
      "name": "Command"
    },
    "PathfindFlags": {
      "name": "PathfindFlags",
      "attributes": {
        "allow_destroy_friendly_entities": {
          "name": "allow_destroy_friendly_entities",
          "desc": "Allows pathing through friendly entities. Default false.",
          "type": "boolean",
          "optional": false
        },
        "allow_paths_through_own_entities": {
          "name": "allow_paths_through_own_entities",
          "desc": "Allows the pathfinder to path through entities of the same force. Default false.",
          "type": "boolean",
          "optional": false
        },
        "cache": {
          "name": "cache",
          "desc": "Enables path caching. This can be more efficient, but can fail to respond to changes in the environment. Default true.",
          "type": "boolean",
          "optional": false
        },
        "prefer_straight_paths": {
          "name": "prefer_straight_paths",
          "desc": "Tries to path in straight lines. Default false.",
          "type": "boolean",
          "optional": false
        },
        "low_priority": {
          "name": "low_priority",
          "desc": "Sets lower priority on the path request, might mean it takes longer to find a path, at the expense of speeding up others. Default false.",
          "type": "boolean",
          "optional": false
        },
        "no_break": {
          "name": "no_break",
          "desc": "The pathfinder won't break in the middle of processing this pathfind, no matter how much work is needed. Default false.",
          "type": "boolean",
          "optional": false
        }
      }
    },
    "FluidSpecification": {
      "name": "FluidSpecification",
      "desc": "A fluid may be specified in one of the following ways.",
      "type": {
        "value": [
          "string",
          "LuaFluidPrototype",
          "Fluid"
        ],
        "type": "Union"
      },
      "attribute_type": "AliasType"
    },
    "ForceSpecification": {
      "name": "ForceSpecification",
      "desc": "A force may be specified in one of two ways.",
      "type": {
        "value": [
          "string",
          "LuaForce"
        ],
        "type": "Union"
      },
      "attribute_type": "AliasType"
    },
    "TechnologySpecification": {
      "name": "TechnologySpecification",
      "desc": "A technology may be specified in one of three ways.",
      "type": {
        "value": [
          "string",
          "LuaTechnology",
          "LuaTechnologyPrototype"
        ],
        "type": "Union"
      },
      "attribute_type": "AliasType"
    },
    "SurfaceSpecification": {
      "name": "SurfaceSpecification",
      "desc": "A surface may be specified in one of three ways.",
      "type": {
        "value": [
          "uint",
          "string",
          "LuaSurface"
        ],
        "type": "Union"
      },
      "attribute_type": "AliasType"
    },
    "PlayerSpecification": {
      "name": "PlayerSpecification",
      "desc": "A player may be specified in one of three ways.",
      "type": {
        "value": [
          "uint",
          "string",
          "LuaPlayer"
        ],
        "type": "Union"
      },
      "attribute_type": "AliasType"
    },
    "ItemStackSpecification": {
      "name": "ItemStackSpecification",
      "desc": "An item may be specified in one of the following ways.",
      "type": {
        "value": [
          "SimpleItemStack",
          "LuaItemStack"
        ],
        "type": "Union"
      },
      "attribute_type": "AliasType"
    },
    "EntityPrototypeSpecification": {
      "name": "EntityPrototypeSpecification",
      "desc": "An entity prototype may be specified in one of the following ways.",
      "type": {
        "value": [
          "LuaEntity",
          "LuaEntityPrototype",
          "string"
        ],
        "type": "Union"
      },
      "attribute_type": "AliasType"
    },
    "ItemPrototypeSpecification": {
      "name": "ItemPrototypeSpecification",
      "desc": "An item prototype may be specified in one of the following ways.",
      "type": {
        "value": [
          "LuaItemStack",
          "LuaItemPrototype",
          "string"
        ],
        "type": "Union"
      },
      "attribute_type": "AliasType"
    },
    "WaitCondition": {
      "name": "WaitCondition",
      "attributes": {
        "type": {
          "name": "type",
          "desc": "One of \"time\" , \"inactivity\" , \"full\" , \"empty\" , \"item_count\" , \"circuit\" , \"robots_inactive\" , \"fluid_count\" , \"passenger_present\" , \"passenger_not_present\" .",
          "type": "string",
          "optional": false
        },
        "compare_type": {
          "name": "compare_type",
          "desc": "Either \"and\" , or \"or\" . Tells how this condition is to be compared with  the preceding conditions in the corresponding wait_conditions array.",
          "type": "string",
          "optional": false
        },
        "ticks": {
          "name": "ticks",
          "desc": "Number of ticks to wait or of inactivity. Only present when type is \"time\" or \"inactivity\" .",
          "type": "uint",
          "optional": false
        },
        "condition": {
          "name": "condition",
          "desc": "Only present when type is \"item_count\" , \"circuit\" or \"fluid_count\" .",
          "type": "CircuitCondition",
          "optional": false
        }
      }
    },
    "TrainScheduleRecord": {
      "name": "TrainScheduleRecord",
      "attributes": {
        "station": {
          "name": "station",
          "desc": "Name of the station.",
          "type": "string",
          "optional": false
        },
        "rail": {
          "name": "rail",
          "desc": "Rail to path to. Ignored if station is present.",
          "type": "LuaEntity",
          "optional": false
        },
        "wait_conditions": {
          "name": "wait_conditions",
          "type": {
            "value": [
              "WaitCondition"
            ],
            "type": "Array"
          },
          "optional": false
        },
        "temporary": {
          "name": "temporary",
          "desc": "Only present when the station is temporary, the value is then always true.",
          "type": "boolean",
          "optional": false
        }
      }
    },
    "TrainSchedule": {
      "name": "TrainSchedule",
      "attributes": {
        "current": {
          "name": "current",
          "desc": "Index of the currently active record",
          "type": "uint",
          "optional": false
        },
        "records": {
          "name": "records",
          "type": {
            "value": [
              "TrainScheduleRecord"
            ],
            "type": "Array"
          },
          "optional": false
        }
      }
    },
    "GuiArrowSpecification": {
      "name": "GuiArrowSpecification"
    },
    "AmmoType": {
      "name": "AmmoType",
      "attributes": {
        "action": {
          "name": "action",
          "type": {
            "value": [
              "TriggerItem"
            ],
            "type": "Array"
          },
          "optional": false
        },
        "target_type": {
          "name": "target_type",
          "desc": "One of \"entity\" (fires at an entity), \"position\" (fires directly at a position),  or \"direction\" (fires in a direction).",
          "type": "string",
          "optional": false
        },
        "clamp_position": {
          "name": "clamp_position",
          "desc": "When true , the gun will be able to shoot even when the target is out of range. Only applies when target_type is position . The gun will fire at the maximum range in the direction of the target position.  Defaults to false .",
          "type": "boolean",
          "optional": false
        },
        "category": {
          "name": "category",
          "desc": "Ammo category of this ammo.",
          "type": "string",
          "optional": false
        },
        "energy_consumption": {
          "name": "energy_consumption",
          "desc": "Energy consumption of a single shot, if applicable. Defaults to 0 .",
          "type": "double",
          "optional": false
        }
      }
    },
    "BeamTarget": {
      "name": "BeamTarget",
      "attributes": {
        "entity": {
          "name": "entity",
          "desc": "The target entity.",
          "type": "LuaEntity",
          "optional": false
        },
        "position": {
          "name": "position",
          "desc": "The target position.",
          "type": "Position",
          "optional": false
        }
      }
    },
    "RidingState": {
      "name": "RidingState",
      "attributes": {
        "acceleration": {
          "name": "acceleration",
          "type": "defines.riding.acceleration",
          "optional": false
        },
        "direction": {
          "name": "direction",
          "type": "defines.riding.direction",
          "optional": false
        }
      }
    },
    "SpritePath": {
      "name": "SpritePath"
    },
    "SoundPath": {
      "name": "SoundPath"
    },
    "ModConfigurationChangedData": {
      "name": "ModConfigurationChangedData",
      "attributes": {
        "old_version": {
          "name": "old_version",
          "desc": "Old version of the mod. May be nil if the mod wasn't previously present (i.e. it was just added).",
          "type": "string",
          "optional": false
        },
        "new_version": {
          "name": "new_version",
          "desc": "New version of the mod. May be nil if the mod is no longer present (i.e. it was just removed).",
          "type": "string",
          "optional": false
        }
      }
    },
    "ConfigurationChangedData": {
      "name": "ConfigurationChangedData",
      "attributes": {
        "old_version": {
          "name": "old_version",
          "desc": "Old version of the map. Present only when loading map version other than the current version.",
          "type": "string",
          "optional": false
        },
        "new_version": {
          "name": "new_version",
          "desc": "New version of the map. Present only when loading map version other than the current version.",
          "type": "string",
          "optional": false
        },
        "mod_changes": {
          "name": "mod_changes",
          "desc": "Dictionary of mod changes. It is indexed by mod name.",
          "type": {
            "value": [
              "string",
              "ModConfigurationChangedData"
            ],
            "type": "Table"
          },
          "optional": false
        },
        "mod_startup_settings_changed": {
          "name": "mod_startup_settings_changed",
          "desc": "True when mod startup settings have changed since the last time this save was loaded.",
          "type": "boolean",
          "optional": false
        },
        "migration_applied": {
          "name": "migration_applied",
          "desc": "True when mod prototype migrations have been applied since the last time this save was loaded.",
          "type": "boolean",
          "optional": false
        }
      }
    },
    "EffectValue": {
      "name": "EffectValue",
      "attributes": {
        "bonus": {
          "name": "bonus",
          "desc": "The percentual increase of the attribute. E.g. a value of 0.6 means 60% increase.",
          "type": "float",
          "optional": false
        }
      }
    },
    "Effects": {
      "name": "Effects"
    },
    "EntityPrototypeFlags": {
      "name": "EntityPrototypeFlags"
    },
    "ItemPrototypeFlags": {
      "name": "ItemPrototypeFlags"
    },
    "CollisionMaskLayer": {
      "name": "CollisionMaskLayer"
    },
    "CollisionMask": {
      "name": "CollisionMask"
    },
    "CollisionMaskWithFlags": {
      "name": "CollisionMaskWithFlags"
    },
    "TriggerTargetMask": {
      "name": "TriggerTargetMask"
    },
    "TriggerEffectItem": {
      "name": "TriggerEffectItem",
      "attributes": {
        "type": {
          "name": "type",
          "desc": "One of \"damage\" , \"create-entity\" , \"create-explosion\" , \"create-fire\" , \"create-smoke\" , \"create-trivial-smoke\" , \"create-particle\" , \"create-sticker\" , \"nested-result\" , \"play-sound\" , \"push-back\" , \"destroy-cliffs\" , \"show-explosion-on-chart\" , \"insert-item\" , \"script\" .",
          "type": "string",
          "optional": false
        },
        "repeat_count": {
          "name": "repeat_count",
          "type": "uint",
          "optional": false
        },
        "affects_target": {
          "name": "affects_target",
          "type": "boolean",
          "optional": false
        },
        "show_in_tooltip": {
          "name": "show_in_tooltip",
          "type": "boolean",
          "optional": false
        }
      }
    },
    "TriggerDelivery": {
      "name": "TriggerDelivery",
      "attributes": {
        "type": {
          "name": "type",
          "desc": "One of \"instant\" , \"projectile\" , \"flame-thrower\" , \"beam\" , \"stream\" , \"artillery\" .",
          "type": "string",
          "optional": false
        },
        "source_effects": {
          "name": "source_effects",
          "type": {
            "value": [
              "TriggerEffectItem"
            ],
            "type": "Array"
          },
          "optional": false
        },
        "target_effects": {
          "name": "target_effects",
          "type": {
            "value": [
              "TriggerEffectItem"
            ],
            "type": "Array"
          },
          "optional": false
        }
      }
    },
    "TriggerItem": {
      "name": "TriggerItem",
      "attributes": {
        "type": {
          "name": "type",
          "desc": "One of \"direct\" , \"area\" , \"line\" , \"cluster\" .",
          "type": "string",
          "optional": false
        },
        "action_delivery": {
          "name": "action_delivery",
          "type": {
            "value": [
              "TriggerDelivery"
            ],
            "type": "Array"
          },
          "optional": false
        },
        "entity_flags": {
          "name": "entity_flags",
          "desc": "The trigger will only affect entities that contain  any of these flags.",
          "type": "EntityPrototypeFlags",
          "optional": false
        },
        "ignore_collision_condition": {
          "name": "ignore_collision_condition",
          "type": "boolean",
          "optional": false
        },
        "collision_mask": {
          "name": "collision_mask",
          "desc": "The trigger will only affect entities that would collide with given  collision mask.",
          "type": "CollisionMask",
          "optional": false
        },
        "trigger_target_mask": {
          "name": "trigger_target_mask",
          "type": "TriggerTargetMask",
          "optional": false
        },
        "force": {
          "name": "force",
          "desc": "If \"enemy\" , the trigger will only affect  entities whose force is different from the attacker's and for which there is no cease-fire set. \"ally\" is the opposite of \"enemy\" .",
          "type": "ForceCondition",
          "optional": false
        },
        "repeat_count": {
          "name": "repeat_count",
          "type": "uint",
          "optional": false
        }
      }
    },
    "Trigger": {
      "name": "Trigger"
    },
    "AttackParameters": {
      "name": "AttackParameters",
      "attributes": {
        "range": {
          "name": "range",
          "desc": "Maximum range for attack.",
          "type": "float",
          "optional": false
        },
        "min_range": {
          "name": "min_range",
          "desc": "Minimum range for attack (used e.g. with flamethrower turrets).",
          "type": "float",
          "optional": false
        },
        "turn_range": {
          "name": "turn_range",
          "desc": "The arc the entity can attack in, as percent of the full circle (i.e. value of 1 is  the full circle).",
          "type": "float",
          "optional": false
        },
        "fire_penalty": {
          "name": "fire_penalty",
          "desc": "When searching for the nearest enemy to attack, fire_penalty is added to the enemy's  distance if it is on fire.",
          "type": "float",
          "optional": false
        },
        "min_attack_distance": {
          "name": "min_attack_distance",
          "desc": "If less than range , the entity will choose a random distance between range and min_attack_distance and attack from that distance. Used for spitters.",
          "type": "float",
          "optional": false
        },
        "damage_modifier": {
          "name": "damage_modifier",
          "type": "float",
          "optional": false
        },
        "ammo_consumption_modifier": {
          "name": "ammo_consumption_modifier",
          "type": "float",
          "optional": false
        },
        "cooldown": {
          "name": "cooldown",
          "type": "float",
          "optional": false
        },
        "warmup": {
          "name": "warmup",
          "type": "uint",
          "optional": false
        },
        "movement_slow_down_factor": {
          "name": "movement_slow_down_factor",
          "type": "double",
          "optional": false
        },
        "movement_slow_down_cooldown": {
          "name": "movement_slow_down_cooldown",
          "type": "float",
          "optional": false
        },
        "ammo_type": {
          "name": "ammo_type",
          "type": "AmmoType",
          "optional": false
        },
        "ammo_categories": {
          "name": "ammo_categories",
          "type": {
            "value": [
              "string"
            ],
            "type": "Array"
          },
          "optional": false
        }
      }
    },
    "CapsuleAction": {
      "name": "CapsuleAction",
      "attributes": {
        "type": {
          "name": "type",
          "desc": "One of \"throw\" , \"equipment-remote\" , \"use-on-self\" .",
          "type": "string",
          "optional": false
        },
        "attack_parameters": {
          "name": "attack_parameters",
          "desc": "Only present when type is \"throw\" or \"use-on-self\" .",
          "type": "AttackParameters",
          "optional": false
        },
        "equipment": {
          "name": "equipment",
          "desc": "Only present when type is \"equipment-remote\" . It is the equipment  prototype name.",
          "type": "string",
          "optional": false
        }
      }
    },
    "SelectionModeFlags": {
      "name": "SelectionModeFlags"
    },
    "LogisticFilter": {
      "name": "LogisticFilter",
      "attributes": {
        "index": {
          "name": "index",
          "desc": "The index this filter applies to.",
          "type": "uint",
          "optional": false
        },
        "name": {
          "name": "name",
          "desc": "The item name for this filter.",
          "type": "string",
          "optional": false
        },
        "count": {
          "name": "count",
          "desc": "The count for this filter.",
          "type": "uint",
          "optional": false
        }
      }
    },
    "ModSetting": {
      "name": "ModSetting",
      "attributes": {
        "value": {
          "name": "value",
          "desc": "The value of the mod setting. The type depends on the setting.",
          "type": {
            "value": [
              "uint",
              "double",
              "boolean",
              "string"
            ],
            "type": "Union"
          },
          "optional": false
        }
      }
    },
    "Any": {
      "name": "Any"
    },
    "ProgrammableSpeakerParameters": {
      "name": "ProgrammableSpeakerParameters",
      "attributes": {
        "playback_volume": {
          "name": "playback_volume",
          "type": "double",
          "optional": false
        },
        "playback_globally": {
          "name": "playback_globally",
          "type": "boolean",
          "optional": false
        },
        "allow_polyphony": {
          "name": "allow_polyphony",
          "type": "boolean",
          "optional": false
        }
      }
    },
    "ProgrammableSpeakerAlertParameters": {
      "name": "ProgrammableSpeakerAlertParameters",
      "attributes": {
        "show_alert": {
          "name": "show_alert",
          "type": "boolean",
          "optional": false
        },
        "show_on_map": {
          "name": "show_on_map",
          "type": "boolean",
          "optional": false
        },
        "icon_signal_id": {
          "name": "icon_signal_id",
          "type": "SignalID",
          "optional": false
        },
        "alert_message": {
          "name": "alert_message",
          "type": "string",
          "optional": false
        }
      }
    },
    "ProgrammableSpeakerCircuitParameters": {
      "name": "ProgrammableSpeakerCircuitParameters",
      "attributes": {
        "signal_value_is_pitch": {
          "name": "signal_value_is_pitch",
          "type": "boolean",
          "optional": false
        },
        "instrument_id": {
          "name": "instrument_id",
          "type": "uint",
          "optional": false
        },
        "note_id": {
          "name": "note_id",
          "type": "uint",
          "optional": false
        }
      }
    },
    "ProgrammableSpeakerInstrument": {
      "name": "ProgrammableSpeakerInstrument",
      "attributes": {
        "name": {
          "name": "name",
          "type": "string",
          "optional": false
        },
        "notes": {
          "name": "notes",
          "type": {
            "value": [
              "string"
            ],
            "type": "Array"
          },
          "optional": false
        }
      }
    },
    "Alignment": {
      "name": "Alignment"
    },
    "NthTickEvent": {
      "name": "NthTickEvent",
      "attributes": {
        "tick": {
          "name": "tick",
          "type": "uint",
          "optional": false
        },
        "nth_tick": {
          "name": "nth_tick",
          "type": "uint",
          "optional": false
        }
      }
    },
    "ScriptRenderTarget": {
      "name": "ScriptRenderTarget",
      "attributes": {
        "entity": {
          "name": "entity",
          "type": "LuaEntity",
          "optional": false
        },
        "entity_offset": {
          "name": "entity_offset",
          "type": "Vector",
          "optional": false
        },
        "position": {
          "name": "position",
          "type": "Position",
          "optional": false
        }
      }
    },
    "MouseButtonFlags": {
      "name": "MouseButtonFlags"
    },
    "CursorBoxRenderType": {
      "name": "CursorBoxRenderType"
    },
    "ForceCondition": {
      "name": "ForceCondition"
    },
    "RenderLayer": {
      "name": "RenderLayer"
    },
    "CliffOrientation": {
      "name": "CliffOrientation"
    },
    "ItemStackLocation": {
      "name": "ItemStackLocation",
      "attributes": {
        "inventory": {
          "name": "inventory",
          "type": "defines.inventory",
          "optional": false
        },
        "slot": {
          "name": "slot",
          "type": "uint",
          "optional": false
        }
      }
    },
    "VehicleAutomaticTargetingParameters": {
      "name": "VehicleAutomaticTargetingParameters",
      "attributes": {
        "auto_target_without_gunner": {
          "name": "auto_target_without_gunner",
          "type": "boolean",
          "optional": false
        },
        "auto_target_with_gunner": {
          "name": "auto_target_with_gunner",
          "type": "boolean",
          "optional": false
        }
      }
    },
    "SoundType": {
      "name": "SoundType"
    },
    "_Loot_Helper": {
      "name": "_Loot_Helper",
      "attributes": {
        "item": {
          "name": "item",
          "desc": "Item prototype name of the result.",
          "type": "string",
          "optional": false
        },
        "probability": {
          "name": "probability",
          "desc": "Probability that any loot at all will drop, as a number in range [0, 1].",
          "type": "double",
          "optional": false
        },
        "count_min": {
          "name": "count_min",
          "desc": "Minimum amount of loot to drop.",
          "type": "double",
          "optional": false
        },
        "count_max": {
          "name": "count_max",
          "desc": "Maximum amount of loot to drop.",
          "type": "double",
          "optional": false
        }
      },
      "flags": "Dummy"
    },
    "Loot": {
      "name": "Loot",
      "desc": "Loot is an array of loot items. Each loot item is a table:",
      "type": {
        "value": "_Loot_Helper",
        "type": "Array"
      },
      "attribute_type": "AliasType"
    },
    "_ConstantCombinatorParameters_Helper": {
      "name": "_ConstantCombinatorParameters_Helper",
      "attributes": {
        "signal": {
          "name": "signal",
          "desc": "Signal to emit.",
          "type": "SignalID",
          "optional": false
        },
        "count": {
          "name": "count",
          "desc": "Value of the signal to emit.",
          "type": "int",
          "optional": false
        },
        "index": {
          "name": "index",
          "desc": "Index of the constant combinator's slot to set this signal to.",
          "type": "uint",
          "optional": false
        }
      },
      "flags": "Dummy"
    },
    "ConstantCombinatorParameters": {
      "name": "ConstantCombinatorParameters",
      "desc": "This is an array of tables with the following fields:",
      "type": {
        "value": "_ConstantCombinatorParameters_Helper",
        "type": "Array"
      },
      "attribute_type": "AliasType"
    },
    "_ItemPrototypeFilters_Helper": {
      "name": "_ItemPrototypeFilters_Helper",
      "attributes": {
        "filter": {
          "name": "filter",
          "desc": "The condition to filter on.",
          "type": "string",
          "optional": false
        },
        "mode": {
          "name": "mode",
          "desc": "How to combine this with the previous filter. Must be \"or\" or \"and\" .  Default is \"or\" . When evaluating the filters, \"and\" has higher precedence than \"or\" .",
          "type": "string",
          "optional": false
        },
        "invert": {
          "name": "invert",
          "desc": "Inverts the condition. Default is false .",
          "type": "boolean",
          "optional": false
        }
      },
      "flags": "Dummy"
    },
    "ItemPrototypeFilters": {
      "name": "ItemPrototypeFilters",
      "desc": "An array of filters. Each filter is a table:",
      "type": {
        "value": "_ItemPrototypeFilters_Helper",
        "type": "Array"
      },
      "attribute_type": "AliasType"
    },
    "_ModSettingPrototypeFilters_Helper": {
      "name": "_ModSettingPrototypeFilters_Helper",
      "attributes": {
        "filter": {
          "name": "filter",
          "desc": "The condition to filter on.",
          "type": "string",
          "optional": false
        },
        "mode": {
          "name": "mode",
          "desc": "How to combine this with the previous filter. Must be \"or\" or \"and\" .  Default is \"or\" . When evaluating the filters, \"and\" has higher precedence than \"or\" .",
          "type": "string",
          "optional": false
        },
        "invert": {
          "name": "invert",
          "desc": "Inverts the condition. Default is false .",
          "type": "boolean",
          "optional": false
        }
      },
      "flags": "Dummy"
    },
    "ModSettingPrototypeFilters": {
      "name": "ModSettingPrototypeFilters",
      "desc": "An array of filters. Each filter is a table:",
      "type": {
        "value": "_ModSettingPrototypeFilters_Helper",
        "type": "Array"
      },
      "attribute_type": "AliasType"
    },
    "_TechnologyPrototypeFilters_Helper": {
      "name": "_TechnologyPrototypeFilters_Helper",
      "attributes": {
        "filter": {
          "name": "filter",
          "desc": "The condition to filter on.",
          "type": "string",
          "optional": false
        },
        "mode": {
          "name": "mode",
          "desc": "How to combine this with the previous filter. Must be \"or\" or \"and\" .  Default is \"or\" . When evaluating the filters, \"and\" has higher precedence than \"or\" .",
          "type": "string",
          "optional": false
        },
        "invert": {
          "name": "invert",
          "desc": "Inverts the condition. Default is false .",
          "type": "boolean",
          "optional": false
        }
      },
      "flags": "Dummy"
    },
    "TechnologyPrototypeFilters": {
      "name": "TechnologyPrototypeFilters",
      "desc": "An array of filters. Each filter is a table:",
      "type": {
        "value": "_TechnologyPrototypeFilters_Helper",
        "type": "Array"
      },
      "attribute_type": "AliasType"
    },
    "_DecorativePrototypeFilters_Helper": {
      "name": "_DecorativePrototypeFilters_Helper",
      "attributes": {
        "filter": {
          "name": "filter",
          "desc": "The condition to filter on.",
          "type": "string",
          "optional": false
        },
        "mode": {
          "name": "mode",
          "desc": "How to combine this with the previous filter. Must be \"or\" or \"and\" .  Default is \"or\" . When evaluating the filters, \"and\" has higher precedence than \"or\" .",
          "type": "string",
          "optional": false
        },
        "invert": {
          "name": "invert",
          "desc": "Inverts the condition. Default is false .",
          "type": "boolean",
          "optional": false
        }
      },
      "flags": "Dummy"
    },
    "DecorativePrototypeFilters": {
      "name": "DecorativePrototypeFilters",
      "desc": "An array of filters. Each filter is a table:",
      "type": {
        "value": "_DecorativePrototypeFilters_Helper",
        "type": "Array"
      },
      "attribute_type": "AliasType"
    },
    "_AchievementPrototypeFilters_Helper": {
      "name": "_AchievementPrototypeFilters_Helper",
      "attributes": {
        "filter": {
          "name": "filter",
          "desc": "The condition to filter on.",
          "type": "string",
          "optional": false
        },
        "mode": {
          "name": "mode",
          "desc": "How to combine this with the previous filter. Must be \"or\" or \"and\" .  Default is \"or\" . When evaluating the filters, \"and\" has higher precedence than \"or\" .",
          "type": "string",
          "optional": false
        },
        "invert": {
          "name": "invert",
          "desc": "Inverts the condition. Default is false .",
          "type": "boolean",
          "optional": false
        }
      },
      "flags": "Dummy"
    },
    "AchievementPrototypeFilters": {
      "name": "AchievementPrototypeFilters",
      "desc": "An array of filters. Each filter is a table:",
      "type": {
        "value": "_AchievementPrototypeFilters_Helper",
        "type": "Array"
      },
      "attribute_type": "AliasType"
    },
    "_FluidPrototypeFilters_Helper": {
      "name": "_FluidPrototypeFilters_Helper",
      "attributes": {
        "filter": {
          "name": "filter",
          "desc": "The condition to filter on.",
          "type": "string",
          "optional": false
        },
        "mode": {
          "name": "mode",
          "desc": "How to combine this with the previous filter. Must be \"or\" or \"and\" .  Default is \"or\" . When evaluating the filters, \"and\" has higher precedence than \"or\" .",
          "type": "string",
          "optional": false
        },
        "invert": {
          "name": "invert",
          "desc": "Inverts the condition. Default is false .",
          "type": "boolean",
          "optional": false
        }
      },
      "flags": "Dummy"
    },
    "FluidPrototypeFilters": {
      "name": "FluidPrototypeFilters",
      "desc": "An array of filters. Each filter is a table:",
      "type": {
        "value": "_FluidPrototypeFilters_Helper",
        "type": "Array"
      },
      "attribute_type": "AliasType"
    },
    "_EquipmentPrototypeFilters_Helper": {
      "name": "_EquipmentPrototypeFilters_Helper",
      "attributes": {
        "filter": {
          "name": "filter",
          "desc": "The condition to filter on.",
          "type": "string",
          "optional": false
        },
        "mode": {
          "name": "mode",
          "desc": "How to combine this with the previous filter. Must be \"or\" or \"and\" .  Default is \"or\" . When evaluating the filters, \"and\" has higher precedence than \"or\" .",
          "type": "string",
          "optional": false
        },
        "invert": {
          "name": "invert",
          "desc": "Inverts the condition. Default is false .",
          "type": "boolean",
          "optional": false
        }
      },
      "flags": "Dummy"
    },
    "EquipmentPrototypeFilters": {
      "name": "EquipmentPrototypeFilters",
      "desc": "An array of filters. Each filter is a table:",
      "type": {
        "value": "_EquipmentPrototypeFilters_Helper",
        "type": "Array"
      },
      "attribute_type": "AliasType"
    },
    "_TilePrototypeFilters_Helper": {
      "name": "_TilePrototypeFilters_Helper",
      "attributes": {
        "filter": {
          "name": "filter",
          "desc": "The condition to filter on.",
          "type": "string",
          "optional": false
        },
        "mode": {
          "name": "mode",
          "desc": "How to combine this with the previous filter. Must be \"or\" or \"and\" .  Default is \"or\" . When evaluating the filters, \"and\" has higher precedence than \"or\" .",
          "type": "string",
          "optional": false
        },
        "invert": {
          "name": "invert",
          "desc": "Inverts the condition. Default is false .",
          "type": "boolean",
          "optional": false
        }
      },
      "flags": "Dummy"
    },
    "TilePrototypeFilters": {
      "name": "TilePrototypeFilters",
      "desc": "An array of filters. Each filter is a table:",
      "type": {
        "value": "_TilePrototypeFilters_Helper",
        "type": "Array"
      },
      "attribute_type": "AliasType"
    },
    "_RecipePrototypeFilters_Helper": {
      "name": "_RecipePrototypeFilters_Helper",
      "attributes": {
        "filter": {
          "name": "filter",
          "desc": "The condition to filter on.",
          "type": "string",
          "optional": false
        },
        "mode": {
          "name": "mode",
          "desc": "How to combine this with the previous filter. Must be \"or\" or \"and\" .  Default is \"or\" . When evaluating the filters, \"and\" has higher precedence than \"or\" .",
          "type": "string",
          "optional": false
        },
        "invert": {
          "name": "invert",
          "desc": "Inverts the condition. Default is false .",
          "type": "boolean",
          "optional": false
        }
      },
      "flags": "Dummy"
    },
    "RecipePrototypeFilters": {
      "name": "RecipePrototypeFilters",
      "desc": "An array of filters. Each filter is a table:",
      "type": {
        "value": "_RecipePrototypeFilters_Helper",
        "type": "Array"
      },
      "attribute_type": "AliasType"
    },
    "_EntityPrototypeFilters_Helper": {
      "name": "_EntityPrototypeFilters_Helper",
      "attributes": {
        "filter": {
          "name": "filter",
          "desc": "The condition to filter on.",
          "type": "string",
          "optional": false
        },
        "mode": {
          "name": "mode",
          "desc": "How to combine this with the previous filter. Must be \"or\" or \"and\" .  Default is \"or\" . When evaluating the filters, \"and\" has higher precedence than \"or\" .",
          "type": "string",
          "optional": false
        },
        "invert": {
          "name": "invert",
          "desc": "Inverts the condition. Default is false .",
          "type": "boolean",
          "optional": false
        }
      },
      "flags": "Dummy"
    },
    "EntityPrototypeFilters": {
      "name": "EntityPrototypeFilters",
      "desc": "An array of filters. Each filter is a table:",
      "type": {
        "value": "_EntityPrototypeFilters_Helper",
        "type": "Array"
      },
      "attribute_type": "AliasType"
    }
  },
  "classes": {
    "LuaAISettings": {
      "name": "LuaAISettings",
      "desc": "Collection of settings for overriding default ai behavior.",
      "url": "LuaAISettings.html",
      "attributes": {
        "allow_destroy_when_commands_fail": {
          "name": "allow_destroy_when_commands_fail",
          "shortDesc": "If enabled, units that repeatedly fail to succeed at commands will be destroyed.",
          "desc": "If enabled, units that repeatedly fail to succeed at commands will be destroyed.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "allow_try_return_to_spawner": {
          "name": "allow_try_return_to_spawner",
          "shortDesc": "If enabled, units that have nothing else to do will attempt to return to a spawner.",
          "desc": "If enabled, units that have nothing else to do will attempt to return to a spawner.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "do_separation": {
          "name": "do_separation",
          "shortDesc": "If enabled, units will try to separate themselves from nearby friendly units.",
          "desc": "If enabled, units will try to separate themselves from nearby friendly units.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "path_resolution_modifier": {
          "name": "path_resolution_modifier",
          "shortDesc": "The pathing resolution modifier, must be between -8 and 8.",
          "desc": "The pathing resolution modifier, must be between -8 and 8.",
          "type": "int8",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaAccumulatorControlBehavior": {
      "name": "LuaAccumulatorControlBehavior",
      "desc": "Control behavior for accumulators.",
      "url": "LuaControlBehavior.html#LuaAccumulatorControlBehavior.brief",
      "attributes": {
        "output_signal": {
          "name": "output_signal",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaAchievementPrototype": {
      "name": "LuaAchievementPrototype",
      "desc": "Prototype of a achievement.",
      "url": "LuaAchievementPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allowed_without_fight": {
          "name": "allowed_without_fight",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "hidden": {
          "name": "hidden",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaAmmoCategoryPrototype": {
      "name": "LuaAmmoCategoryPrototype",
      "desc": "Prototype of a ammo category.",
      "url": "LuaAmmoCategoryPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "bonus_gui_order": {
          "name": "bonus_gui_order",
          "shortDesc": "",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaArithmeticCombinatorControlBehavior": {
      "name": "LuaArithmeticCombinatorControlBehavior",
      "desc": "Control behavior for arithmetic combinators.",
      "url": "LuaControlBehavior.html#LuaArithmeticCombinatorControlBehavior.brief",
      "attributes": {
        "parameters": {
          "name": "parameters",
          "shortDesc": "The arithmetic combinator parameters.",
          "desc": "The arithmetic combinator parameters. **Note:** `parameters` may be `nil` in order to clear the parameters.",
          "type": "ArithmeticCombinatorParameters",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaCombinatorControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaAutoplaceControlPrototype": {
      "name": "LuaAutoplaceControlPrototype",
      "desc": "Prototype of an autoplace control.",
      "url": "LuaAutoplaceControlPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "richness": {
          "name": "richness",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "control_order": {
          "name": "control_order",
          "shortDesc": "",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "category": {
          "name": "category",
          "shortDesc": "Category name of this prototype.",
          "desc": "Category name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaBootstrap": {
      "name": "LuaBootstrap",
      "desc": "Entry point for registering event handlers. It is accessible through the global object named `script` .",
      "url": "LuaBootstrap.html",
      "attributes": {
        "on_init": {
          "name": "on_init",
          "shortDesc": "Register a callback to be run on mod init.",
          "desc": "Register a callback to be run on mod init.\n This is called once when a new save game is created or once when a save file is loaded that previously didn't contain the mod.\n This is always called before other event handlers and is meant for setting up initial values that a mod will use for its lifetime.",
          "parameters": {
            "f": {
              "name": "f",
              "desc": "The function to call. Passing nil will  unregister the handler.",
              "type": {
                "type": "Function"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "on_load": {
          "name": "on_load",
          "shortDesc": "Register a function to be run on module load.",
          "desc": "Register a function to be run on module load.\n This is called every time a save file is loaded *except* for the instance when a mod is loaded into a save file that it previously wasn't part of.\n Additionally this is called when connecting to any other game in a multiplayer session and should never change the game state. This is meant for 3 specific reasons and only 3: In all other instances the [LuaBootstrap::on_init](https://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.on_init) , [LuaBootstrap::on_configuration_changed](https://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.on_configuration_changed) or migration scripts should be used.\n Doing any other logic when loading a save file can break the replay and cause desync issues if the mod is used in multiplayer.",
          "parameters": {
            "f": {
              "name": "f",
              "desc": "The function to call. Passing nil will unregister the handler.",
              "type": {
                "type": "Function"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "on_configuration_changed": {
          "name": "on_configuration_changed",
          "shortDesc": "Register a function to be run when mod configuration changes.",
          "desc": "Register a function to be run when mod configuration changes.\n This is called any time the game version changes, prototypes change, startup mod settings change, and any time mod versions change including adding or removing mods.",
          "parameters": {
            "f": {
              "name": "f",
              "desc": "The handler for this event. Passing nil will unregister the handler.",
              "type": {
                "type": "Function"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "on_event": {
          "name": "on_event",
          "shortDesc": "Register a handler to run on event or events.",
          "desc": "Register a handler to run on event or events.",
          "parameters": {
            "event": {
              "name": "event",
              "desc": "The events or custom-input name to invoke the handler on",
              "type": {
                "value": [
                  "defines.events",
                  {
                    "value": [
                      "defines.events"
                    ],
                    "type": "Array"
                  },
                  "string"
                ],
                "type": "Union"
              },
              "optional": false
            },
            "f": {
              "name": "f",
              "desc": "The handler to run. Passing nil will unregister the handler. The handler  will receive a table that contains the key name (of type defines.events ) specifying the name  of the event it was called to handle, and tick that specifies when the event was created. This table will  also contain other fields, depending on the type of the event. See the list of Factorio events for a listing of these additional fields.",
              "type": {
                "type": "Function"
              },
              "optional": false
            },
            "filters": {
              "name": "filters",
              "desc": "The filters for this single event registration.  See the list of event filters for a listing of these filters.",
              "type": "Filters",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "on_nth_tick": {
          "name": "on_nth_tick",
          "shortDesc": "Register a handler to run every nth tick(s).",
          "desc": "Register a handler to run every nth tick(s). When the game is on tick 0 it will trigger all registered handlers.",
          "parameters": {
            "tick": {
              "name": "tick",
              "desc": "The nth-tick(s) to invoke the handler on. Passing nil as the only parameter will unregister all nth-tick handlers.",
              "type": {
                "value": [
                  "uint",
                  {
                    "value": [
                      "uint"
                    ],
                    "type": "Array"
                  }
                ],
                "type": "Union"
              },
              "optional": false
            },
            "f": {
              "name": "f",
              "desc": "The handler to run. Passing nil will unregister the handler for the provided ticks.",
              "type": {
                "type": "Function"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "register_on_entity_destroyed": {
          "name": "register_on_entity_destroyed",
          "shortDesc": "Registers an entity so that after it's destroyed [on_entity_destroyed](https://lua-api.factorio.com/latest/events.html#on_entity_destroyed) is called.",
          "desc": "Registers an entity so that after it's destroyed [on_entity_destroyed](https://lua-api.factorio.com/latest/events.html#on_entity_destroyed) is called.",
          "parameters": {
            "entity": {
              "name": "entity",
              "desc": "The entity to register.",
              "type": "LuaEntity",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The registration number.",
            "type": "uint64",
            "optional": false
          },
          "attribute_type": "function"
        },
        "generate_event_name": {
          "name": "generate_event_name",
          "shortDesc": "Generate a new, unique event ID.",
          "desc": "Generate a new, unique event ID.",
          "returnObject": {
            "desc": "The new ID",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_event_handler": {
          "name": "get_event_handler",
          "shortDesc": "Find the event handler for an event.",
          "desc": "Find the event handler for an event.",
          "parameters": {
            "event": {
              "name": "event",
              "desc": "The event identifier to get a handler for",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_event_order": {
          "name": "get_event_order",
          "shortDesc": "Gets the mod event order.",
          "desc": "Gets the mod event order.\n type(string)",
          "attribute_type": "function"
        },
        "set_event_filter": {
          "name": "set_event_filter",
          "shortDesc": "Sets the filters for the given event.",
          "desc": "Sets the filters for the given event.",
          "parameters": {
            "event": {
              "name": "event",
              "desc": "ID of the event to filter.",
              "type": "uint",
              "optional": false
            },
            "filters": {
              "name": "filters",
              "desc": "The filters or nil to clear the filters",
              "type": "Filters",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_event_filter": {
          "name": "get_event_filter",
          "shortDesc": "Gets the filters for the given event.",
          "desc": "Gets the filters for the given event.",
          "parameters": {
            "event": {
              "name": "event",
              "desc": "ID of the event to get.",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The filters or `nil` if none are defined.",
            "type": "table",
            "optional": false
          },
          "attribute_type": "function"
        },
        "raise_event": {
          "name": "raise_event",
          "shortDesc": "Raise an event.",
          "desc": "Raise an event. Only events generated with [LuaBootstrap::generate_event_name](https://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.generate_event_name) and the following can be raised: [on_console_chat](https://lua-api.factorio.com/latest/events.html#on_console_chat) [on_player_crafted_item](https://lua-api.factorio.com/latest/events.html#on_player_crafted_item) [on_player_fast_transferred](https://lua-api.factorio.com/latest/events.html#on_player_fast_transferred) [on_biter_base_built](https://lua-api.factorio.com/latest/events.html#on_biter_base_built) [on_market_item_purchased](https://lua-api.factorio.com/latest/events.html#on_market_item_purchased) [script_raised_built](https://lua-api.factorio.com/latest/events.html#script_raised_built) [script_raised_destroy](https://lua-api.factorio.com/latest/events.html#script_raised_destroy) [script_raised_revive](https://lua-api.factorio.com/latest/events.html#script_raised_revive) [script_raised_set_tiles](https://lua-api.factorio.com/latest/events.html#script_raised_set_tiles)",
          "parameters": {
            "event": {
              "name": "event",
              "desc": "ID of the event to raise",
              "type": "uint",
              "optional": false
            },
            "table": {
              "name": "table",
              "desc": "Table with extra data. This table will be passed to the event handler.",
              "type": "any",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "raise_console_chat": {
          "name": "raise_console_chat",
          "shortDesc": "Raises [on_console_chat](https://lua-api.factorio.com/latest/events.html#on_console_chat)",
          "desc": "Raises [on_console_chat](https://lua-api.factorio.com/latest/events.html#on_console_chat)",
          "parameters": {
            "table": {
              "name": "table",
              "type": "RaiseEventParameters",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "raise_player_crafted_item": {
          "name": "raise_player_crafted_item",
          "shortDesc": "Raises [on_player_crafted_item](https://lua-api.factorio.com/latest/events.html#on_player_crafted_item)",
          "desc": "Raises [on_player_crafted_item](https://lua-api.factorio.com/latest/events.html#on_player_crafted_item)",
          "parameters": {
            "table": {
              "name": "table",
              "type": "RaiseEventParameters",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "raise_player_fast_transferred": {
          "name": "raise_player_fast_transferred",
          "shortDesc": "Raises [on_player_fast_transferred](https://lua-api.factorio.com/latest/events.html#on_player_fast_transferred)",
          "desc": "Raises [on_player_fast_transferred](https://lua-api.factorio.com/latest/events.html#on_player_fast_transferred)",
          "parameters": {
            "table": {
              "name": "table",
              "type": "RaiseEventParameters",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "raise_biter_base_built": {
          "name": "raise_biter_base_built",
          "shortDesc": "Raises [on_biter_base_built](https://lua-api.factorio.com/latest/events.html#on_biter_base_built)",
          "desc": "Raises [on_biter_base_built](https://lua-api.factorio.com/latest/events.html#on_biter_base_built)",
          "parameters": {
            "table": {
              "name": "table",
              "type": "RaiseEventParameters",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "raise_market_item_purchased": {
          "name": "raise_market_item_purchased",
          "shortDesc": "Raises [on_market_item_purchased](https://lua-api.factorio.com/latest/events.html#on_market_item_purchased)",
          "desc": "Raises [on_market_item_purchased](https://lua-api.factorio.com/latest/events.html#on_market_item_purchased)",
          "parameters": {
            "table": {
              "name": "table",
              "type": "RaiseEventParameters",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "raise_script_built": {
          "name": "raise_script_built",
          "shortDesc": "Raises [script_raised_built](https://lua-api.factorio.com/latest/events.html#script_raised_built)",
          "desc": "Raises [script_raised_built](https://lua-api.factorio.com/latest/events.html#script_raised_built)",
          "parameters": {
            "table": {
              "name": "table",
              "type": "RaiseEventParameters",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "raise_script_destroy": {
          "name": "raise_script_destroy",
          "shortDesc": "Raises [script_raised_destroy](https://lua-api.factorio.com/latest/events.html#script_raised_destroy)",
          "desc": "Raises [script_raised_destroy](https://lua-api.factorio.com/latest/events.html#script_raised_destroy)",
          "parameters": {
            "table": {
              "name": "table",
              "type": "RaiseEventParameters",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "raise_script_revive": {
          "name": "raise_script_revive",
          "shortDesc": "Raises [script_raised_revive](https://lua-api.factorio.com/latest/events.html#script_raised_revive)",
          "desc": "Raises [script_raised_revive](https://lua-api.factorio.com/latest/events.html#script_raised_revive)",
          "parameters": {
            "table": {
              "name": "table",
              "type": "RaiseEventParameters",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "raise_script_set_tiles": {
          "name": "raise_script_set_tiles",
          "shortDesc": "Raises [script_raised_set_tiles](https://lua-api.factorio.com/latest/events.html#script_raised_set_tiles)",
          "desc": "Raises [script_raised_set_tiles](https://lua-api.factorio.com/latest/events.html#script_raised_set_tiles)",
          "parameters": {
            "table": {
              "name": "table",
              "type": "RaiseEventParameters",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "mod_name": {
          "name": "mod_name",
          "shortDesc": "The name of the mod from the environment this is used in.",
          "desc": "The name of the mod from the environment this is used in.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "level": {
          "name": "level",
          "shortDesc": "Information about the currently running scenario/campaign/tutorial",
          "desc": "Information about the currently running scenario/campaign/tutorial Table with the following fields: * is_simulation :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Is this level a simulation? (menu, tips&tricks)\n  * is_tutorial :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Is this level a tutorial?\n  * campaign_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The campaign name if any.\n  * level_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The level name.\n  * mod_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The mod name if any.",
          "type": "table",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "active_mods": {
          "name": "active_mods",
          "shortDesc": "A dictionary listing the names of all currently active mods and mapping them to their version.",
          "desc": "A dictionary listing the names of all currently active mods and mapping them to their version. Example This will print the names and versions of all active mods to the console. `for\u00a0name,\u00a0version\u00a0in\u00a0pairs(script.active_mods)\u00a0do game.print(name\u00a0..\u00a0\"\u00a0version\u00a0\"\u00a0..\u00a0version) end`",
          "type": {
            "value": [
              "string",
              "string"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "object_name": {
          "name": "object_name",
          "shortDesc": "This object's name.",
          "desc": "This object's name.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObject"
      ]
    },
    "LuaBurner": {
      "name": "LuaBurner",
      "desc": "A reference to the burner energy source owned by a specific [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [LuaEquipment](https://lua-api.factorio.com/latest/LuaEquipment.html) .",
      "url": "LuaBurner.html",
      "attributes": {
        "owner": {
          "name": "owner",
          "shortDesc": "The owner of this burner energy source",
          "desc": "The owner of this burner energy source",
          "type": {
            "value": [
              "LuaEntity",
              "LuaEquipment"
            ],
            "type": "Union"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "inventory": {
          "name": "inventory",
          "shortDesc": "The fuel inventory.",
          "desc": "The fuel inventory.",
          "type": "LuaInventory",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "burnt_result_inventory": {
          "name": "burnt_result_inventory",
          "shortDesc": "The burnt result inventory.",
          "desc": "The burnt result inventory.",
          "type": "LuaInventory",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "heat": {
          "name": "heat",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "heat_capacity": {
          "name": "heat_capacity",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "remaining_burning_fuel": {
          "name": "remaining_burning_fuel",
          "shortDesc": "",
          "desc": "**Note:** Writing will silently do nothing if there's no [LuaBurner::currently_burning](https://lua-api.factorio.com/latest/LuaBurner.html#LuaBurner.currently_burning) set.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "currently_burning": {
          "name": "currently_burning",
          "shortDesc": "",
          "desc": "**Note:** Writing automatically handles correcting [LuaBurner::remaining_burning_fuel](https://lua-api.factorio.com/latest/LuaBurner.html#LuaBurner.remaining_burning_fuel) .",
          "type": "LuaItemPrototype",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "fuel_categories": {
          "name": "fuel_categories",
          "shortDesc": "The fuel categories this burner uses.",
          "desc": "The fuel categories this burner uses. **Note:** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup.",
          "type": {
            "value": [
              "string",
              "boolean"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaBurnerPrototype": {
      "name": "LuaBurnerPrototype",
      "desc": "Prototype of a burner energy source.",
      "url": "LuaBurnerPrototype.html",
      "attributes": {
        "emissions": {
          "name": "emissions",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_no_network_icon": {
          "name": "render_no_network_icon",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_no_power_icon": {
          "name": "render_no_power_icon",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "effectivity": {
          "name": "effectivity",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fuel_inventory_size": {
          "name": "fuel_inventory_size",
          "shortDesc": "",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "burnt_inventory_size": {
          "name": "burnt_inventory_size",
          "shortDesc": "",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "smoke": {
          "name": "smoke",
          "shortDesc": "The smoke sources for this burner prototype if any.",
          "desc": "The smoke sources for this burner prototype if any.",
          "type": {
            "value": [
              "SmokeSource"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "light_flicker": {
          "name": "light_flicker",
          "shortDesc": "The light flicker definition for this burner prototype if any.",
          "desc": "The light flicker definition for this burner prototype if any. Table with the following fields: * minimum_intensity :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * maximum_intensity :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * derivation_change_frequency :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * derivation_change_deviation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * border_fix_speed :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * minimum_light_size :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * light_intensity_to_size_coefficient :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)",
          "type": "table",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fuel_categories": {
          "name": "fuel_categories",
          "shortDesc": "",
          "desc": "**Note:** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup.",
          "type": {
            "value": [
              "string",
              "boolean"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaChunkIterator": {
      "name": "LuaChunkIterator",
      "desc": "A chunk iterator can be used for iterating chunks coordinates of a surface.\nThe returned type is a [ChunkPositionAndArea](https://lua-api.factorio.com/latest/Concepts.html#ChunkPositionAndArea) containing the chunk coordinates and its area.\n\nExample `for\u00a0chunk\u00a0in\u00a0some_surface.get_chunks()\u00a0do game.player.print(\"x:\u00a0\"\u00a0..\u00a0chunk.x\u00a0..\u00a0\",\u00a0y:\u00a0\"\u00a0..\u00a0chunk.y) game.player.print(\"area:\u00a0\"\u00a0..\u00a0serpent.line(chunk.area)) end`",
      "url": "LuaChunkIterator.html",
      "attributes": {
        "operator ": {
          "name": "operator ",
          "desc": "Get the next chunk position or `nil` , and increments the iterator.",
          "returnObject": {
            "type": "ChunkPositionAndArea",
            "optional": false
          },
          "attribute_type": "function"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaCircuitNetwork": {
      "name": "LuaCircuitNetwork",
      "desc": "A circuit network associated with a given entity, connector, and wire type.",
      "url": "LuaCircuitNetwork.html",
      "attributes": {
        "get_signal": {
          "name": "get_signal",
          "shortDesc": "",
          "parameters": {
            "signal": {
              "name": "signal",
              "desc": "The signal to read.",
              "type": "SignalID",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The current value of the signal.",
            "type": "int",
            "optional": false
          },
          "attribute_type": "function"
        },
        "entity": {
          "name": "entity",
          "shortDesc": "The entity this circuit network reference is associated with",
          "desc": "The entity this circuit network reference is associated with",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "wire_type": {
          "name": "wire_type",
          "shortDesc": "The wire type this network is associated with.",
          "desc": "The wire type this network is associated with.",
          "type": "defines.wire_type",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "circuit_connector_id": {
          "name": "circuit_connector_id",
          "shortDesc": "The circuit connector ID on the associated entity this network was gotten from.",
          "desc": "The circuit connector ID on the associated entity this network was gotten from.",
          "type": "defines.circuit_connector_id",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "signals": {
          "name": "signals",
          "shortDesc": "The circuit network signals last tick.",
          "desc": "The circuit network signals last tick. `nil` if there are no signals.",
          "type": {
            "value": [
              "Signal"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "network_id": {
          "name": "network_id",
          "shortDesc": "The circuit networks ID.",
          "desc": "The circuit networks ID.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "connected_circuit_count": {
          "name": "connected_circuit_count",
          "shortDesc": "The number of circuits connected to this network.",
          "desc": "The number of circuits connected to this network.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaCombinatorControlBehavior": {
      "name": "LuaCombinatorControlBehavior",
      "desc": "\n",
      "url": "LuaControlBehavior.html#LuaCombinatorControlBehavior.brief",
      "attributes": {
        "get_signal_last_tick": {
          "name": "get_signal_last_tick",
          "shortDesc": "Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exist.",
          "desc": "Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exist.",
          "parameters": {
            "signal": {
              "name": "signal",
              "desc": "The signal to get",
              "type": "SignalID",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The value or `nil` if none.",
            "type": "int",
            "optional": false
          },
          "attribute_type": "function"
        },
        "signals_last_tick": {
          "name": "signals_last_tick",
          "shortDesc": "The circuit network signals sent by this combinator last tick.",
          "desc": "The circuit network signals sent by this combinator last tick.",
          "type": {
            "value": [
              "Signal"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObject"
      ]
    },
    "LuaCommandProcessor": {
      "name": "LuaCommandProcessor",
      "desc": "Allows for the registration of custom console commands. Similarly to [event subscriptions](https://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.on_event) , these don't persist through a save-and-load cycle.",
      "url": "LuaCommandProcessor.html",
      "attributes": {
        "add_command": {
          "name": "add_command",
          "shortDesc": "Add a custom console command.",
          "desc": "Add a custom console command. The function registered to the command is passed a table when the command is invoked. This table contains:",
          "parameters": {
            "name": {
              "name": "name",
              "desc": "The desired name of the command (case sensitive).",
              "type": "string",
              "optional": false
            },
            "help": {
              "name": "help",
              "desc": "The localised help message. It will be shown to players using the /help command.",
              "type": "LocalisedString",
              "optional": false
            },
            "function": {
              "name": "function",
              "desc": "The function that will be called when this command is invoked.",
              "type": {
                "type": "Function"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "remove_command": {
          "name": "remove_command",
          "shortDesc": "Remove a custom console command.",
          "desc": "Remove a custom console command.",
          "parameters": {
            "name": {
              "name": "name",
              "desc": "The name of the command to remove (case sensitive).",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Whether the command was successfully removed. Returns `false` if the command didn't exist.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "commands": {
          "name": "commands",
          "shortDesc": "Lists the custom commands registered by scripts through `LuaCommandProcessor` .",
          "desc": "Lists the custom commands registered by scripts through `LuaCommandProcessor` .",
          "type": {
            "value": [
              "string",
              "LocalisedString"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "game_commands": {
          "name": "game_commands",
          "shortDesc": "Lists the built-in commands of the core game.",
          "desc": "Lists the built-in commands of the core game. The [wiki](https://lua-api.factorio.com/latest/https://wiki.factorio.com/Console) has an overview of these.",
          "type": {
            "value": [
              "string",
              "LocalisedString"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "object_name": {
          "name": "object_name",
          "shortDesc": "This object's name.",
          "desc": "This object's name.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObject"
      ]
    },
    "LuaConstantCombinatorControlBehavior": {
      "name": "LuaConstantCombinatorControlBehavior",
      "desc": "Control behavior for constant combinators.\n\n\n\n\n\n",
      "url": "LuaControlBehavior.html#LuaConstantCombinatorControlBehavior.brief",
      "attributes": {
        "set_signal": {
          "name": "set_signal",
          "shortDesc": "Sets the signal at the given index",
          "desc": "Sets the signal at the given index",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            },
            "signal": {
              "name": "signal",
              "type": "Signal",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_signal": {
          "name": "get_signal",
          "shortDesc": "Gets the signal at the given index.",
          "desc": "Gets the signal at the given index. Returned [Signal](https://lua-api.factorio.com/latest/Concepts.html#Signal) will not contain signal if none is set for the index.",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "Signal",
            "optional": false
          },
          "attribute_type": "function"
        },
        "parameters": {
          "name": "parameters",
          "shortDesc": "The constant combinator parameters",
          "desc": "The constant combinator parameters **Note:** Setting to `nil` clears the parameters.",
          "type": "ConstantCombinatorParameters",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "enabled": {
          "name": "enabled",
          "shortDesc": "Turns this constant combinator on and off.",
          "desc": "Turns this constant combinator on and off.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "signals_count": {
          "name": "signals_count",
          "shortDesc": "The number of signals this constant combinator supports",
          "desc": "The number of signals this constant combinator supports",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaContainerControlBehavior": {
      "name": "LuaContainerControlBehavior",
      "desc": "Control behavior for container entities.",
      "url": "LuaControlBehavior.html#LuaContainerControlBehavior.brief",
      "attributes": {},
      "parents": [
        "LuaControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaControl": {
      "name": "LuaControl",
      "desc": "This is an abstract base class containing the common functionality between [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) and entities\n (see [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) ). When accessing player-related functions through a [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) , it must refer to a character\n entity.",
      "url": "LuaControl.html",
      "attributes": {
        "get_inventory": {
          "name": "get_inventory",
          "shortDesc": "Get an inventory belonging to this entity.",
          "desc": "Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxiliary\n one, like the module slots or logistic trash slots.",
          "parameters": {
            "inventory": {
              "name": "inventory",
              "type": "defines.inventory",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "or `nil` if this entity doesn't have an inventory with the given index.",
            "type": "LuaInventory",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_main_inventory": {
          "name": "get_main_inventory",
          "shortDesc": "Gets the main inventory for this character or player if this is a character or player.",
          "desc": "Gets the main inventory for this character or player if this is a character or player.",
          "returnObject": {
            "desc": "or `nil` if this entity is not a character or player.",
            "type": "LuaInventory",
            "optional": false
          },
          "attribute_type": "function"
        },
        "can_insert": {
          "name": "can_insert",
          "shortDesc": "Can at least some items be inserted?",
          "desc": "Can at least some items be inserted?",
          "parameters": {
            "items": {
              "name": "items",
              "desc": "Items that would be inserted.",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "`true` if at least a part of the given items could be inserted into this inventory.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "insert": {
          "name": "insert",
          "shortDesc": "Insert items into this entity.",
          "desc": "Insert items into this entity. This works the same way as inserters or shift-clicking: the \"best\"\n inventory is chosen automatically.",
          "parameters": {
            "items": {
              "name": "items",
              "desc": "Items to insert.",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Number of items actually inserted.",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_gui_arrow": {
          "name": "set_gui_arrow",
          "shortDesc": "Create an arrow which points at this entity.",
          "desc": "Create an arrow which points at this entity. This is used in the tutorial. For examples, see `control.lua` in the campaign missions.",
          "parameters": {
            "luaControlset_gui_arrow_param": {
              "name": "luaControlset_gui_arrow_param",
              "desc": "Table with the following fields",
              "type": "LuaControlset_gui_arrow_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaControlset_gui_arrow_param",
              "attributes": {
                "type": {
                  "name": "type",
                  "desc": "Where to point to. This field determines what other fields are mandatory.  May be \"nowhere\" , \"goal\" , \"entity_info\" , \"active_window\" , \"entity\" , \"position\" , \"crafting_queue\" , or \"item_stack\" .",
                  "type": "string",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "clear_gui_arrow": {
          "name": "clear_gui_arrow",
          "shortDesc": "Removes the arrow created by `set_gui_arrow` .",
          "desc": "Removes the arrow created by `set_gui_arrow` .",
          "attribute_type": "function"
        },
        "get_item_count": {
          "name": "get_item_count",
          "shortDesc": "Get the number of all or some items in this entity.",
          "desc": "Get the number of all or some items in this entity.",
          "parameters": {
            "item": {
              "name": "item",
              "desc": "Prototype name of the item to count. If not specified, count all items.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "has_items_inside": {
          "name": "has_items_inside",
          "shortDesc": "Does this entity have any item inside it?",
          "desc": "Does this entity have any item inside it?",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "can_reach_entity": {
          "name": "can_reach_entity",
          "shortDesc": "Can a given entity be opened or accessed?",
          "desc": "Can a given entity be opened or accessed?",
          "parameters": {
            "entity": {
              "name": "entity",
              "type": "LuaEntity",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "clear_items_inside": {
          "name": "clear_items_inside",
          "shortDesc": "Remove all items from this entity.",
          "desc": "Remove all items from this entity.",
          "attribute_type": "function"
        },
        "remove_item": {
          "name": "remove_item",
          "shortDesc": "Remove items from this entity.",
          "desc": "Remove items from this entity.",
          "parameters": {
            "items": {
              "name": "items",
              "desc": "Items to remove.",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Number of items actually removed.",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "teleport": {
          "name": "teleport",
          "shortDesc": "Teleport the entity to a given position, possibly on another surface.",
          "desc": "Teleport the entity to a given position, possibly on another surface.",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "Where to teleport to.",
              "type": "Position",
              "optional": false
            },
            "surface": {
              "name": "surface",
              "desc": "Surface to teleport to. If not given, will teleport  to the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface.",
              "type": "SurfaceSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "`true` when the entity was successfully teleported.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "update_selected_entity": {
          "name": "update_selected_entity",
          "shortDesc": "Select an entity, as if by hovering the mouse above it.",
          "desc": "Select an entity, as if by hovering the mouse above it.",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "Position of the entity to select",
              "type": "Position",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "clear_selected_entity": {
          "name": "clear_selected_entity",
          "shortDesc": "Unselect any selected entity.",
          "desc": "Unselect any selected entity.",
          "attribute_type": "function"
        },
        "disable_flashlight": {
          "name": "disable_flashlight",
          "shortDesc": "Disable the flashlight.",
          "desc": "Disable the flashlight.",
          "attribute_type": "function"
        },
        "enable_flashlight": {
          "name": "enable_flashlight",
          "shortDesc": "Enable the flashlight.",
          "desc": "Enable the flashlight.",
          "attribute_type": "function"
        },
        "is_flashlight_enabled": {
          "name": "is_flashlight_enabled",
          "shortDesc": "Is the flashlight enabled.",
          "desc": "Is the flashlight enabled.",
          "attribute_type": "function"
        },
        "get_craftable_count": {
          "name": "get_craftable_count",
          "shortDesc": "Gets the count of the given recipe that can be crafted.",
          "desc": "Gets the count of the given recipe that can be crafted.",
          "parameters": {
            "recipe": {
              "name": "recipe",
              "desc": "The recipe.",
              "type": {
                "value": [
                  "string",
                  "LuaRecipe"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The count that can be crafted.",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "begin_crafting": {
          "name": "begin_crafting",
          "shortDesc": "Begins crafting the given count of the given recipe",
          "desc": "Begins crafting the given count of the given recipe",
          "parameters": {
            "luaControlbegin_crafting_param": {
              "name": "luaControlbegin_crafting_param",
              "type": "LuaControlbegin_crafting_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The count that was actually started crafting.",
            "type": "uint",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaControlbegin_crafting_param",
              "attributes": {
                "count": {
                  "name": "count",
                  "desc": "The count to craft.",
                  "type": "uint",
                  "optional": false
                },
                "recipe": {
                  "name": "recipe",
                  "desc": "The recipe to craft.",
                  "type": {
                    "value": [
                      "string",
                      "LuaRecipe"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "silent": {
                  "name": "silent",
                  "desc": "If false and the recipe can't be crafted the requested number of times printing the failure is skipped.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "cancel_crafting": {
          "name": "cancel_crafting",
          "shortDesc": "Cancels crafting the given count of the given crafting queue index",
          "desc": "Cancels crafting the given count of the given crafting queue index",
          "parameters": {
            "options": {
              "name": "options",
              "type": "any",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "mine_entity": {
          "name": "mine_entity",
          "shortDesc": "Mines the given entity as if this player (or character) mined it.",
          "desc": "Mines the given entity as if this player (or character) mined it.",
          "parameters": {
            "entity": {
              "name": "entity",
              "desc": "The entity to mine",
              "type": "LuaEntity",
              "optional": false
            },
            "force": {
              "name": "force",
              "desc": "Forces mining the entity even if the items can't fit in the player.",
              "type": "boolean",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the mining succeeded.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "mine_tile": {
          "name": "mine_tile",
          "shortDesc": "Mines the given tile as if this player (or character) mined it.",
          "desc": "Mines the given tile as if this player (or character) mined it.",
          "parameters": {
            "tile": {
              "name": "tile",
              "desc": "The tile to mine.",
              "type": "LuaTile",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the mining succeeded.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_player": {
          "name": "is_player",
          "shortDesc": "When `true` control adapter is a LuaPlayer object, `false` for entities including characters with players",
          "desc": "When `true` control adapter is a LuaPlayer object, `false` for entities including characters with players",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "open_technology_gui": {
          "name": "open_technology_gui",
          "shortDesc": "Open the technology GUI and select a given technology.",
          "desc": "Open the technology GUI and select a given technology.",
          "parameters": {
            "technology": {
              "name": "technology",
              "desc": "The technology to select after opening the GUI.",
              "type": "TechnologySpecification",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "set_personal_logistic_slot": {
          "name": "set_personal_logistic_slot",
          "shortDesc": "Sets the personal request and trash to the given values.",
          "desc": "Sets the personal request and trash to the given values.",
          "parameters": {
            "slot_index": {
              "name": "slot_index",
              "desc": "The slot to set/",
              "type": "uint",
              "optional": false
            },
            "value": {
              "name": "value",
              "type": "PersonalLogisticParameters",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the slot was set.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_vehicle_logistic_slot": {
          "name": "set_vehicle_logistic_slot",
          "shortDesc": "Sets the vehicle logistic request and trash to the given values.",
          "desc": "Sets the vehicle logistic request and trash to the given values.",
          "parameters": {
            "slot_index": {
              "name": "slot_index",
              "desc": "The slot to set/",
              "type": "uint",
              "optional": false
            },
            "value": {
              "name": "value",
              "type": "PersonalLogisticParameters",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the slot was set.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_personal_logistic_slot": {
          "name": "get_personal_logistic_slot",
          "shortDesc": "Sets the personal request and trash to the given values.",
          "desc": "Sets the personal request and trash to the given values.",
          "parameters": {
            "slot_index": {
              "name": "slot_index",
              "desc": "The slot to get.",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "PersonalLogisticParameters",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_vehicle_logistic_slot": {
          "name": "get_vehicle_logistic_slot",
          "shortDesc": "Sets the vehicle logistic request and trash to the given values.",
          "desc": "Sets the vehicle logistic request and trash to the given values.",
          "parameters": {
            "slot_index": {
              "name": "slot_index",
              "desc": "The slot to get.",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "PersonalLogisticParameters",
            "optional": false
          },
          "attribute_type": "function"
        },
        "clear_personal_logistic_slot": {
          "name": "clear_personal_logistic_slot",
          "shortDesc": "",
          "parameters": {
            "slot_index": {
              "name": "slot_index",
              "desc": "The slot to clear.",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "clear_vehicle_logistic_slot": {
          "name": "clear_vehicle_logistic_slot",
          "shortDesc": "",
          "parameters": {
            "slot_index": {
              "name": "slot_index",
              "desc": "The slot to clear.",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "is_cursor_blueprint": {
          "name": "is_cursor_blueprint",
          "shortDesc": "Returns whether the player is holding a blueprint, it takes into account a blueprint as an item as well as blueprint\n from the blueprint record from the blueprint library.",
          "desc": "Returns whether the player is holding a blueprint, it takes into account a blueprint as an item as well as blueprint\n from the blueprint record from the blueprint library.\n Note that the is_cursor_blueprint and get_cursor_blueprint_entities refer to the currently selected blueprint, so\n it returns blueprint related information also when holding a blueprint book with a blueprint being selected in it.",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_blueprint_entities": {
          "name": "get_blueprint_entities",
          "shortDesc": "Returns the same type of data as [LuaItemStack::get_blueprint_entities](https://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_entities) , but works for the currently selected blueprint,\n regardless of it being in a blueprint book or picked from the blueprint library.",
          "desc": "Returns the same type of data as [LuaItemStack::get_blueprint_entities](https://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_entities) , but works for the currently selected blueprint,\n regardless of it being in a blueprint book or picked from the blueprint library.",
          "returnObject": {
            "type": {
              "value": [
                "blueprint entity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "surface": {
          "name": "surface",
          "shortDesc": "The surface this entity is currently on.",
          "desc": "The surface this entity is currently on.",
          "type": "LuaSurface",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "position": {
          "name": "position",
          "shortDesc": "Current position of the entity.",
          "desc": "Current position of the entity.",
          "type": "Position",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "vehicle": {
          "name": "vehicle",
          "shortDesc": "The vehicle the player is currently sitting in; `nil` if none.",
          "desc": "The vehicle the player is currently sitting in; `nil` if none.",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "force": {
          "name": "force",
          "shortDesc": "The force of this entity.",
          "desc": "The force of this entity. Reading will always give a [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) , but it is possible to\n assign either [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) to this attribute to change the force.",
          "type": "ForceSpecification",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "selected": {
          "name": "selected",
          "shortDesc": "The currently selected entity; `nil` if none.",
          "desc": "The currently selected entity; `nil` if none. Assigning an entity will select it if selectable otherwise clears selection.",
          "type": "LuaEntity",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "opened": {
          "name": "opened",
          "shortDesc": "The GUI target the player currently has open; `nil` if none.",
          "desc": "The GUI target the player currently has open; `nil` if none. **Note:** Write supports any of the types. Read will return the entity, equipment, equipment-grid, player, element or nil.",
          "type": {
            "value": [
              "LuaEntity",
              "LuaItemStack",
              "LuaEquipment",
              "LuaEquipmentGrid",
              "LuaPlayer",
              "LuaGuiElement",
              "defines.gui_type"
            ],
            "type": "Union"
          },
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "crafting_queue_size": {
          "name": "crafting_queue_size",
          "shortDesc": "Size of the crafting queue.",
          "desc": "Size of the crafting queue.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "crafting_queue_progress": {
          "name": "crafting_queue_progress",
          "shortDesc": "The crafting queue progress [0-1]\n 0 when no recipe is being crafted.",
          "desc": "The crafting queue progress [0-1]\n 0 when no recipe is being crafted.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "walking_state": {
          "name": "walking_state",
          "shortDesc": "Current walking state.",
          "desc": "Current walking state. It is a table with two fields: * walking :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  If `false` , the player is currently not walking; otherwise it's going somewhere\n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) :  Direction where the player is walking Example Make the player go north. Note that a one-shot action like this will only make the player walk for one tick. `game.player.walking_state\u00a0=\u00a0{walking\u00a0=\u00a0true,\u00a0direction\u00a0=\u00a0defines.direction.north}`",
          "type": "table",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "riding_state": {
          "name": "riding_state",
          "shortDesc": "Current riding state of this car or the vehicle this player is riding in.",
          "desc": "Current riding state of this car or the vehicle this player is riding in.",
          "type": "RidingState",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "mining_state": {
          "name": "mining_state",
          "shortDesc": "Current mining state.",
          "desc": "Current mining state. It is a table with two fields: * mining :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  Whether the player is mining at all\n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  What tiles the player is mining; only used when the player is mining tiles (holding a tile in the cursor). **Note:** When the player isn't mining tiles the player will mine what ever entity is currently selected. See [LuaControl::selected](https://lua-api.factorio.com/latest/LuaControl.html#LuaControl.selected) and [LuaControl::update_selected_entity](https://lua-api.factorio.com/latest/LuaControl.html#LuaControl.update_selected_entity) .",
          "type": "table",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "shooting_state": {
          "name": "shooting_state",
          "shortDesc": "Current shooting state.",
          "desc": "Current shooting state. It is a table with two fields: * state :: [defines.shooting](https://lua-api.factorio.com/latest/defines.html#defines.shooting) :  The current state\n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position being shot at",
          "type": "table",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "picking_state": {
          "name": "picking_state",
          "shortDesc": "Current item-picking state.",
          "desc": "Current item-picking state.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "repair_state": {
          "name": "repair_state",
          "shortDesc": "Current repair state.",
          "desc": "Current repair state. It is a table with two fields: * repairing :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  The current state\n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position being repaired",
          "type": "table",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "cursor_stack": {
          "name": "cursor_stack",
          "shortDesc": "The player's cursor stack, or `nil` if the player controller is a spectator.",
          "desc": "The player's cursor stack, or `nil` if the player controller is a spectator. Even though this property is marked as read-only, it returns a [LuaItemStack](https://lua-api.factorio.com/latest/LuaItemStack.html) , meaning it can be manipulated like so: Example `player.cursor_stack.clear()`",
          "type": "LuaItemStack",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "cursor_ghost": {
          "name": "cursor_ghost",
          "shortDesc": "The ghost prototype in the player's cursor.",
          "desc": "The ghost prototype in the player's cursor. **Note:** When read, it will be a [LuaItemPrototype](https://lua-api.factorio.com/latest/LuaItemPrototype.html) . **Note:** Items in the cursor stack will take priority over the cursor ghost.",
          "type": "ItemPrototypeSpecification",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "driving": {
          "name": "driving",
          "shortDesc": "`true` if the player is in a vehicle.",
          "desc": "`true` if the player is in a vehicle. Writing to this attribute puts the player in or out of a\n vehicle.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "crafting_queue": {
          "name": "crafting_queue",
          "shortDesc": "Gets the current crafting queue items.",
          "desc": "Gets the current crafting queue items. Each CraftingQueueItem is a table: * index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The crafting queue index\n  * recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The recipe.\n  * count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count being crafted.",
          "type": {
            "value": [
              "CraftingQueueItem"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "following_robots": {
          "name": "following_robots",
          "shortDesc": "The current combat robots following the character",
          "desc": "The current combat robots following the character **Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character(see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "cheat_mode": {
          "name": "cheat_mode",
          "shortDesc": "When `true` hand crafting is free and instant",
          "desc": "When `true` hand crafting is free and instant",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_crafting_speed_modifier": {
          "name": "character_crafting_speed_modifier",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_mining_speed_modifier": {
          "name": "character_mining_speed_modifier",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_additional_mining_categories": {
          "name": "character_additional_mining_categories",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": {
            "value": [
              "string"
            ],
            "type": "Array"
          },
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_running_speed_modifier": {
          "name": "character_running_speed_modifier",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_build_distance_bonus": {
          "name": "character_build_distance_bonus",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_item_drop_distance_bonus": {
          "name": "character_item_drop_distance_bonus",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_reach_distance_bonus": {
          "name": "character_reach_distance_bonus",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_resource_reach_distance_bonus": {
          "name": "character_resource_reach_distance_bonus",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_item_pickup_distance_bonus": {
          "name": "character_item_pickup_distance_bonus",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_loot_pickup_distance_bonus": {
          "name": "character_loot_pickup_distance_bonus",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_inventory_slots_bonus": {
          "name": "character_inventory_slots_bonus",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_trash_slot_count_bonus": {
          "name": "character_trash_slot_count_bonus",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_maximum_following_robot_count_bonus": {
          "name": "character_maximum_following_robot_count_bonus",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_health_bonus": {
          "name": "character_health_bonus",
          "shortDesc": "",
          "desc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) ).",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_personal_logistic_requests_enabled": {
          "name": "character_personal_logistic_requests_enabled",
          "shortDesc": "If personal logistic requests are enabled for this character or players character.",
          "desc": "If personal logistic requests are enabled for this character or players character.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "vehicle_logistic_requests_enabled": {
          "name": "vehicle_logistic_requests_enabled",
          "shortDesc": "If personal logistic requests are enabled for this vehicle (spidertron).",
          "desc": "If personal logistic requests are enabled for this vehicle (spidertron).",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "opened_gui_type": {
          "name": "opened_gui_type",
          "shortDesc": "Returns the [defines.gui_type](https://lua-api.factorio.com/latest/defines.html#defines.gui_type) or `nil` .",
          "desc": "Returns the [defines.gui_type](https://lua-api.factorio.com/latest/defines.html#defines.gui_type) or `nil` .",
          "type": "defines.gui_type",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "build_distance": {
          "name": "build_distance",
          "shortDesc": "The build distance of this character or max uint when not a character or player connected to a character.",
          "desc": "The build distance of this character or max uint when not a character or player connected to a character.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "drop_item_distance": {
          "name": "drop_item_distance",
          "shortDesc": "The item drop distance of this character or max uint when not a character or player connected to a character.",
          "desc": "The item drop distance of this character or max uint when not a character or player connected to a character.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "reach_distance": {
          "name": "reach_distance",
          "shortDesc": "The reach distance of this character or max uint when not a character or player connected to a character.",
          "desc": "The reach distance of this character or max uint when not a character or player connected to a character.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "item_pickup_distance": {
          "name": "item_pickup_distance",
          "shortDesc": "The item pickup distance of this character or max double when not a character or player connected to a character.",
          "desc": "The item pickup distance of this character or max double when not a character or player connected to a character.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "loot_pickup_distance": {
          "name": "loot_pickup_distance",
          "shortDesc": "The loot pickup distance of this character or max double when not a character or player connected to a character.",
          "desc": "The loot pickup distance of this character or max double when not a character or player connected to a character.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "resource_reach_distance": {
          "name": "resource_reach_distance",
          "shortDesc": "The resource reach distance of this character or max double when not a character or player connected to a character.",
          "desc": "The resource reach distance of this character or max double when not a character or player connected to a character.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "in_combat": {
          "name": "in_combat",
          "shortDesc": "If this character entity is in combat.",
          "desc": "If this character entity is in combat.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "character_running_speed": {
          "name": "character_running_speed",
          "shortDesc": "Gets the current movement speed of this character, including effects from exoskeletons, tiles, stickers and shooting.",
          "desc": "Gets the current movement speed of this character, including effects from exoskeletons, tiles, stickers and shooting.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "character_mining_progress": {
          "name": "character_mining_progress",
          "shortDesc": "Gets the current mining progress between 0 and 1 of this character, or 0 if they aren't mining.",
          "desc": "Gets the current mining progress between 0 and 1 of this character, or 0 if they aren't mining.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObject"
      ]
    },
    "LuaControlBehavior": {
      "name": "LuaControlBehavior",
      "desc": "The control behavior for an entity. Inserters have logistic network and circuit network behavior logic, lamps have circuit logic and so on. This is an abstract base class that concrete control behaviors inherit.\n**Note:** An control reference becomes invalid once the control behavior is removed or the\n       entity (see [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) ) it resides in is destroyed.\n\n",
      "url": "LuaControlBehavior.html#LuaControlBehavior.brief",
      "attributes": {
        "get_circuit_network": {
          "name": "get_circuit_network",
          "shortDesc": "",
          "parameters": {
            "wire": {
              "name": "wire",
              "desc": "Wire color of the network connected to this entity.",
              "type": "defines.wire_type",
              "optional": false
            },
            "circuit_connector": {
              "name": "circuit_connector",
              "desc": "The connector to get circuit network for.  Must be specified for entities with more than one circuit network connector.",
              "type": "defines.circuit_connector_id",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The circuit network or nil.",
            "type": "LuaCircuitNetwork",
            "optional": false
          },
          "attribute_type": "function"
        },
        "type": {
          "name": "type",
          "shortDesc": "The concrete type of this control behavior.",
          "desc": "The concrete type of this control behavior.",
          "type": "defines.control_behavior.type",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "entity": {
          "name": "entity",
          "shortDesc": "The entity this control behavior belongs to.",
          "desc": "The entity this control behavior belongs to.",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObject"
      ]
    },
    "LuaCustomChartTag": {
      "name": "LuaCustomChartTag",
      "desc": "A custom tag that shows on the map view.",
      "url": "LuaCustomChartTag.html",
      "attributes": {
        "destroy": {
          "name": "destroy",
          "shortDesc": "Destroys this tag.",
          "desc": "Destroys this tag.",
          "attribute_type": "function"
        },
        "icon": {
          "name": "icon",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "last_user": {
          "name": "last_user",
          "shortDesc": "The player who last edited this tag.",
          "desc": "The player who last edited this tag.",
          "type": "LuaPlayer",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "position": {
          "name": "position",
          "shortDesc": "The position of this tag.",
          "desc": "The position of this tag.",
          "type": "Position",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "text": {
          "name": "text",
          "shortDesc": "",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tag_number": {
          "name": "tag_number",
          "shortDesc": "The unique ID for this tag on this force.",
          "desc": "The unique ID for this tag on this force.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "force": {
          "name": "force",
          "shortDesc": "The force this tag belongs to.",
          "desc": "The force this tag belongs to.",
          "type": "LuaForce",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "surface": {
          "name": "surface",
          "shortDesc": "The surface this tag belongs to.",
          "desc": "The surface this tag belongs to.",
          "type": "LuaSurface",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaCustomInputPrototype": {
      "name": "LuaCustomInputPrototype",
      "desc": "Prototype of a custom input.",
      "url": "LuaCustomInputPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "key_sequence": {
          "name": "key_sequence",
          "shortDesc": "The default key sequence for this custom input.",
          "desc": "The default key sequence for this custom input.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "alternative_key_sequence": {
          "name": "alternative_key_sequence",
          "shortDesc": "The default alternative key sequence for this custom input.",
          "desc": "The default alternative key sequence for this custom input. `nil` when not defined.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "linked_game_control": {
          "name": "linked_game_control",
          "shortDesc": "The linked game control name or `nil` .",
          "desc": "The linked game control name or `nil` .",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "consuming": {
          "name": "consuming",
          "shortDesc": "The consuming type: `\"none\"` or `\"game-only\"` .",
          "desc": "The consuming type: `\"none\"` or `\"game-only\"` .",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "action": {
          "name": "action",
          "shortDesc": "The action that happens when this custom input is triggered.",
          "desc": "The action that happens when this custom input is triggered.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "enabled": {
          "name": "enabled",
          "shortDesc": "If this custom input is enabled.",
          "desc": "If this custom input is enabled. Disabled custom inputs exist but are not used by the game.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "enabled_while_spectating": {
          "name": "enabled_while_spectating",
          "shortDesc": "If this custom input is enabled while using the spectator controller.",
          "desc": "If this custom input is enabled while using the spectator controller.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "enabled_while_in_cutscene": {
          "name": "enabled_while_in_cutscene",
          "shortDesc": "If this custom input is enabled while using the cutscene controller.",
          "desc": "If this custom input is enabled while using the cutscene controller.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "include_selected_prototype": {
          "name": "include_selected_prototype",
          "shortDesc": "If this custom input will include the selected prototype (if any) when triggered.",
          "desc": "If this custom input will include the selected prototype (if any) when triggered.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "item_to_spawn": {
          "name": "item_to_spawn",
          "shortDesc": "The item that gets spawned when this custom input is fired or `nil` .",
          "desc": "The item that gets spawned when this custom input is fired or `nil` .",
          "type": "LuaItemPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaCustomTable": {
      "name": "LuaCustomTable",
      "desc": "Lazily evaluated table.\n For performance reasons, we sometimes return a custom table-like type instead of a native Lua table. This custom\n type lazily constructs the necessary Lua wrappers of the corresponding C++ objects, therefore preventing their\n unnecessary construction in some cases.\nThere are some notable consequences to the usage of a custom table type rather than the native Lua table type:\n Iterating a custom table is only possible using the `pairs` Lua function; `ipairs` won't work. Another key\n difference is that custom tables cannot be serialised into a game save file -- if saving the game would require\n serialisation of a custom table, an error will be displayed and the game will not be saved.\n\n\n\nExample In previous versions of Factorio, this would create a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) instance for every player in the game,\n   even though only one such wrapper is needed. In the current version, accessing [game.players](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players) by itself does not create any [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) instances; they are\n   created lazily when accessed. Therefore, this example only constructs one [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) instance, no matter\n   how many elements there are in `game.players` .\nExample `game.players[\"Oxyd\"].character.die()`\nExample Custom tables may be iterated using `pairs` . `for\u00a0_,\u00a0p\u00a0in\u00a0pairs(game.players)\u00a0do\u00a0game.player.print(p.name);\u00a0end`\nExample The following will produce no output because `ipairs` is not supported with custom tables. `for\u00a0_,\u00a0p\u00a0in\u00a0ipairs(game.players)\u00a0do\u00a0game.player.print(p.name);\u00a0end\u00a0\u00a0--\u00a0incorrect;\u00a0use\u00a0pairs\u00a0instead`\nExample This statement will execute successfully and `global.p` will be useable as one might expect. However, as soon\n   as the user tries to save the game, a \"LuaCustomTable cannot be serialized\" error will be shown. The game will\n   remain unsaveable so long as `global.p` refers to an instance of a custom table. `global.p\u00a0=\u00a0game.players\u00a0\u00a0--\u00a0This\u00a0has\u00a0high\u00a0potential\u00a0to\u00a0make\u00a0the\u00a0game\u00a0unsaveable`",
      "url": "LuaCustomTable.html",
      "attributes": {
        "operator []": {
          "name": "operator []",
          "shortDesc": "Access an element of this custom table.",
          "desc": "Access an element of this custom table.",
          "type": "any",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "operator #": {
          "name": "operator #",
          "shortDesc": "Number of elements in this table.",
          "desc": "Number of elements in this table.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaDamagePrototype": {
      "name": "LuaDamagePrototype",
      "desc": "Prototype of a damage.",
      "url": "LuaDamagePrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "hidden": {
          "name": "hidden",
          "shortDesc": "Whether this damage type is hidden from entity tooltips.",
          "desc": "Whether this damage type is hidden from entity tooltips.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaDeciderCombinatorControlBehavior": {
      "name": "LuaDeciderCombinatorControlBehavior",
      "desc": "Control behavior for decider combinators.",
      "url": "LuaControlBehavior.html#LuaDeciderCombinatorControlBehavior.brief",
      "attributes": {
        "parameters": {
          "name": "parameters",
          "shortDesc": "The decider combinator parameters",
          "desc": "The decider combinator parameters **Note:** Setting to `nil` clears the parameters.",
          "type": "DeciderCombinatorParameters",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaCombinatorControlBehavior",
        "LuaControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaDecorativePrototype": {
      "name": "LuaDecorativePrototype",
      "desc": "Prototype of an optimized decorative.",
      "url": "LuaDecorativePrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "collision_box": {
          "name": "collision_box",
          "shortDesc": "The bounding box used for collision checking.",
          "desc": "The bounding box used for collision checking.",
          "type": "BoundingBox",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "collision_mask": {
          "name": "collision_mask",
          "shortDesc": "The collision masks this decorative uses",
          "desc": "The collision masks this decorative uses",
          "type": "CollisionMask",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "collision_mask_with_flags": {
          "name": "collision_mask_with_flags",
          "shortDesc": "",
          "type": "CollisionMaskWithFlags",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "autoplace_specification": {
          "name": "autoplace_specification",
          "shortDesc": "Autoplace specification for this decorative prototype.",
          "desc": "Autoplace specification for this decorative prototype. `nil` if none.",
          "type": "AutoplaceSpecification",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaElectricEnergySourcePrototype": {
      "name": "LuaElectricEnergySourcePrototype",
      "desc": "Prototype of an electric energy source.",
      "url": "LuaElectricEnergySourcePrototype.html",
      "attributes": {
        "buffer_capacity": {
          "name": "buffer_capacity",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "usage_priority": {
          "name": "usage_priority",
          "shortDesc": "",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "input_flow_limit": {
          "name": "input_flow_limit",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "output_flow_limit": {
          "name": "output_flow_limit",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "drain": {
          "name": "drain",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "emissions": {
          "name": "emissions",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_no_network_icon": {
          "name": "render_no_network_icon",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_no_power_icon": {
          "name": "render_no_power_icon",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaEntity": {
      "name": "LuaEntity",
      "desc": "The primary interface for interacting with entities through the Lua API.\n Entity is everything on the map except tiles.",
      "url": "LuaEntity.html",
      "attributes": {
        "get_output_inventory": {
          "name": "get_output_inventory",
          "shortDesc": "Gets the entities output inventory if it has one.",
          "desc": "Gets the entities output inventory if it has one.",
          "returnObject": {
            "desc": "a reference to the entities output inventory.",
            "type": "LuaInventory",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_module_inventory": {
          "name": "get_module_inventory",
          "shortDesc": "",
          "returnObject": {
            "desc": "Inventory for storing modules of this entity; `nil` if this entity has\n                       no module inventory.",
            "type": "LuaInventory",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_fuel_inventory": {
          "name": "get_fuel_inventory",
          "shortDesc": "The fuel inventory for this entity or `nil` if this entity doesn't have a fuel inventory.",
          "desc": "The fuel inventory for this entity or `nil` if this entity doesn't have a fuel inventory.",
          "returnObject": {
            "type": "LuaInventory",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_burnt_result_inventory": {
          "name": "get_burnt_result_inventory",
          "shortDesc": "The burnt result inventory for this entity or `nil` if this entity doesn't have a burnt result inventory.",
          "desc": "The burnt result inventory for this entity or `nil` if this entity doesn't have a burnt result inventory.",
          "returnObject": {
            "type": "LuaInventory",
            "optional": false
          },
          "attribute_type": "function"
        },
        "damage": {
          "name": "damage",
          "shortDesc": "Damages the entity.",
          "desc": "Damages the entity. _Can only be used if this is EntityWithHealth_",
          "parameters": {
            "damage": {
              "name": "damage",
              "desc": "The amount of damage to be done",
              "type": "float",
              "optional": false
            },
            "force": {
              "name": "force",
              "desc": "The force that will be doing the damage.",
              "type": "ForceSpecification",
              "optional": false
            },
            "type": {
              "name": "type",
              "desc": "The type of damage to be done, defaults to \"impact\".",
              "type": "string",
              "optional": false
            },
            "dealer": {
              "name": "dealer",
              "desc": "The entity to consider as the damage dealer.",
              "type": "LuaEntity",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "the total damage actually applied after resistances.",
            "type": "float",
            "optional": false
          },
          "attribute_type": "function"
        },
        "can_be_destroyed": {
          "name": "can_be_destroyed",
          "shortDesc": "Checks if the entity can be destroyed",
          "desc": "Checks if the entity can be destroyed",
          "returnObject": {
            "desc": "if the entity can be destroyed.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "destroy": {
          "name": "destroy",
          "shortDesc": "Destroys the entity.",
          "desc": "Destroys the entity.",
          "parameters": {
            "opts": {
              "name": "opts",
              "desc": "Table with the following fields",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "if the entity was actually destroyed.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_command": {
          "name": "set_command",
          "shortDesc": "Give the entity a command.",
          "desc": "Give the entity a command. _Can only be used if this is Unit_",
          "parameters": {
            "command": {
              "name": "command",
              "type": "Command",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "has_command": {
          "name": "has_command",
          "shortDesc": "Has this unit been assigned a command?",
          "desc": "Has this unit been assigned a command? _Can only be used if this is Unit_",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "die": {
          "name": "die",
          "shortDesc": "Immediately kills the entity.",
          "desc": "Immediately kills the entity.\n Does nothing if the entity doesn't have health.\n Unlike [LuaEntity::destroy](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.destroy) , die will trigger [on_entity_died](https://lua-api.factorio.com/latest/events.html#on_entity_died) and the entity will drop loot and corpse if it have any.",
          "parameters": {
            "force": {
              "name": "force",
              "desc": "The force to attribute the kill to.",
              "type": "ForceSpecification",
              "optional": false
            },
            "cause": {
              "name": "cause",
              "desc": "The cause to attribute the kill to.",
              "type": "LuaEntity",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the entity was killed.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "has_flag": {
          "name": "has_flag",
          "shortDesc": "Test whether this entity's prototype has a flag set.",
          "desc": "Test whether this entity's prototype has a flag set.",
          "parameters": {
            "flag": {
              "name": "flag",
              "desc": "The flag to test",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "`true` if the entity has the given flag set.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "ghost_has_flag": {
          "name": "ghost_has_flag",
          "shortDesc": "Same as [LuaEntity::has_flag](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.has_flag) but targets the inner entity on a entity ghost.",
          "desc": "Same as [LuaEntity::has_flag](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.has_flag) but targets the inner entity on a entity ghost. _Can only be used if this is EntityGhost_",
          "parameters": {
            "flag": {
              "name": "flag",
              "desc": "The flag to test",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "`true` if the entity has the given flag set.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "add_market_item": {
          "name": "add_market_item",
          "shortDesc": "Offer a thing on the market.",
          "desc": "Offer a thing on the market. _Can only be used if this is Market_",
          "parameters": {
            "offer": {
              "name": "offer",
              "type": "Offer",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "remove_market_item": {
          "name": "remove_market_item",
          "shortDesc": "Remove an offer from a market.",
          "desc": "Remove an offer from a market. _Can only be used if this is Market_",
          "parameters": {
            "offer": {
              "name": "offer",
              "desc": "Index of offer to remove.",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "`true` if the offer was successfully removed; `false` when the given index was not valid.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_market_items": {
          "name": "get_market_items",
          "shortDesc": "Get all offers in a market as an array.",
          "desc": "Get all offers in a market as an array. _Can only be used if this is Market_",
          "returnObject": {
            "type": {
              "value": [
                "Offer"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "clear_market_items": {
          "name": "clear_market_items",
          "shortDesc": "Removes all offers from a market.",
          "desc": "Removes all offers from a market. _Can only be used if this is Market_",
          "attribute_type": "function"
        },
        "connect_neighbour": {
          "name": "connect_neighbour",
          "shortDesc": "Connect two devices with wire or cable.",
          "desc": "Connect two devices with wire or cable.",
          "parameters": {
            "target": {
              "name": "target",
              "desc": "To connect two electric poles, target has to be a [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) specifying another  electric pole. This will connect them with copper cable. To connect two devices with wire, this parameter is a table: * wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) : Wire type.  * target_entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) : The entity to connect the wire to  * source_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) : Mandatory if the source entity has more than one circuit connector and using circuit wire.  * target_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) : Mandatory if the target entity has more than one circuit connector and using circuit wire.  * source_wire_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) : Mandatory if the source entity has more than one circuit connector and using circuit wire.  * target_wire_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) : Mandatory if the target entity has more than one circuit connector and using circuit wire.",
              "type": {
                "value": [
                  "LuaEntity",
                  "table"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Whether the connection was formed.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "disconnect_neighbour": {
          "name": "disconnect_neighbour",
          "shortDesc": "Disconnect wires or cables.",
          "desc": "Disconnect wires or cables.",
          "parameters": {
            "target": {
              "name": "target",
              "desc": "To remove all copper cables, leave this parameter out: `pole.disconnect_neighbour()` To remove all wires of a specific color, pass [defines.wire_type.red](https://lua-api.factorio.com/latest/defines.html#defines.wire_type.red) or [defines.wire_type.green](https://lua-api.factorio.com/latest/defines.html#defines.wire_type.green) . To remove a specific copper cable between two poles, target can be a [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) specifying the other pole. E.g. `pole1.disconnect_neighbour(pole2)` . To remove a specific wire, pass a table in the same format as for [LuaEntity::connect_neighbour](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.connect_neighbour) : * wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) : Wire color  * target_entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  * source_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  * target_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  * source_wire_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  * target_wire_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)",
              "type": {
                "value": [
                  "defines.wire_type",
                  "LuaEntity",
                  "table"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "order_deconstruction": {
          "name": "order_deconstruction",
          "shortDesc": "Sets the entity to be deconstructed by construction robots.",
          "desc": "Sets the entity to be deconstructed by construction robots.",
          "parameters": {
            "force": {
              "name": "force",
              "desc": "The force whose robots are supposed to do the deconstruction.",
              "type": "ForceSpecification",
              "optional": false
            },
            "player": {
              "name": "player",
              "desc": "The player to set the last_user to if any.",
              "type": "PlayerSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "if the entity was marked for deconstruction.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "cancel_deconstruction": {
          "name": "cancel_deconstruction",
          "shortDesc": "Cancels deconstruction if it is scheduled, does nothing otherwise.",
          "desc": "Cancels deconstruction if it is scheduled, does nothing otherwise.",
          "parameters": {
            "force": {
              "name": "force",
              "desc": "The force who did the deconstruction order.",
              "type": "ForceSpecification",
              "optional": false
            },
            "player": {
              "name": "player",
              "desc": "The player to set the last_user to if any.",
              "type": "PlayerSpecification",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "to_be_deconstructed": {
          "name": "to_be_deconstructed",
          "shortDesc": "Is this entity marked for deconstruction?",
          "desc": "Is this entity marked for deconstruction?",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "order_upgrade": {
          "name": "order_upgrade",
          "shortDesc": "Sets the entity to be upgraded by construction robots.",
          "desc": "Sets the entity to be upgraded by construction robots.",
          "parameters": {
            "luaEntityorder_upgrade_param": {
              "name": "luaEntityorder_upgrade_param",
              "desc": "Table with the following fields",
              "type": "LuaEntityorder_upgrade_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "if the entity was marked for upgrade.",
            "type": "boolean",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaEntityorder_upgrade_param",
              "attributes": {
                "force": {
                  "name": "force",
                  "desc": "The force whose robots are supposed to do the upgrade.",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "target": {
                  "name": "target",
                  "desc": "The prototype of the entity to upgrade to.",
                  "type": "EntityPrototypeSpecification",
                  "optional": false
                },
                "player": {
                  "name": "player",
                  "type": "PlayerSpecification",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "desc": "The new direction if any.",
                  "type": "defines.direction",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "cancel_upgrade": {
          "name": "cancel_upgrade",
          "shortDesc": "Cancels upgrade if it is scheduled, does nothing otherwise.",
          "desc": "Cancels upgrade if it is scheduled, does nothing otherwise.",
          "parameters": {
            "force": {
              "name": "force",
              "desc": "The force who did the upgrade order.",
              "type": "ForceSpecification",
              "optional": false
            },
            "player": {
              "name": "player",
              "desc": "The player to set the last_user to if any.",
              "type": "PlayerSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the cancel was successful.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "to_be_upgraded": {
          "name": "to_be_upgraded",
          "shortDesc": "Is this entity marked for upgrade?",
          "desc": "Is this entity marked for upgrade?",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_request_slot": {
          "name": "get_request_slot",
          "shortDesc": "Get a logistic requester slot.",
          "desc": "Get a logistic requester slot.",
          "parameters": {
            "slot": {
              "name": "slot",
              "desc": "The slot index.",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Contents of the specified slot; `nil` if the given slot contains no request.",
            "type": "SimpleItemStack",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_request_slot": {
          "name": "set_request_slot",
          "shortDesc": "Set a logistic requester slot.",
          "desc": "Set a logistic requester slot.",
          "parameters": {
            "request": {
              "name": "request",
              "desc": "What to request.",
              "type": "ItemStackSpecification",
              "optional": false
            },
            "slot": {
              "name": "slot",
              "desc": "The slot index.",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the slot was set.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "clear_request_slot": {
          "name": "clear_request_slot",
          "shortDesc": "Clear a logistic requester slot.",
          "desc": "Clear a logistic requester slot.",
          "parameters": {
            "slot": {
              "name": "slot",
              "desc": "The slot index.",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "is_crafting": {
          "name": "is_crafting",
          "shortDesc": "",
          "desc": "_Can only be used if this is CraftingMachine_",
          "returnObject": {
            "desc": "`true` if this machine is currently crafting.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_opened": {
          "name": "is_opened",
          "shortDesc": "",
          "desc": "_Can only be used if this is Gate_",
          "returnObject": {
            "desc": "`true` if this gate is currently opened.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_opening": {
          "name": "is_opening",
          "shortDesc": "",
          "desc": "_Can only be used if this is Gate_",
          "returnObject": {
            "desc": "`true` if this gate is currently opening.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_closed": {
          "name": "is_closed",
          "shortDesc": "",
          "desc": "_Can only be used if this is Gate_",
          "returnObject": {
            "desc": "`true` if this gate is currently closed.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_closing": {
          "name": "is_closing",
          "shortDesc": "",
          "desc": "_Can only be used if this is Gate_",
          "returnObject": {
            "desc": "`true` if this gate is currently closing",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "request_to_open": {
          "name": "request_to_open",
          "shortDesc": "",
          "desc": "_Can only be used if this is Gate_",
          "parameters": {
            "force": {
              "name": "force",
              "desc": "The force that requests the gate to be open.",
              "type": "ForceSpecification",
              "optional": false
            },
            "extra_time": {
              "name": "extra_time",
              "desc": "Extra ticks to stay open.",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "request_to_close": {
          "name": "request_to_close",
          "shortDesc": "",
          "desc": "_Can only be used if this is Gate_",
          "parameters": {
            "force": {
              "name": "force",
              "desc": "The force that requests the gate to be closed.",
              "type": "ForceSpecification",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_transport_line": {
          "name": "get_transport_line",
          "shortDesc": "Get a transport line of a belt or belt connectable entity.",
          "desc": "Get a transport line of a belt or belt connectable entity. _Can only be used if this is TransportBeltConnectable_",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "Index of the requested transport line.",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaTransportLine",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_max_transport_line_index": {
          "name": "get_max_transport_line_index",
          "shortDesc": "Get the maximum transport line index of a belt or belt connectable entity.",
          "desc": "Get the maximum transport line index of a belt or belt connectable entity. _Can only be used if this is TransportBeltConnectable_",
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "launch_rocket": {
          "name": "launch_rocket",
          "shortDesc": "",
          "desc": "_Can only be used if this is RocketSilo_",
          "returnObject": {
            "desc": "`true` if the rocket was successfully launched. Return value of `false` means the silo is not ready for launch.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "revive": {
          "name": "revive",
          "shortDesc": "Revive a ghost.",
          "desc": "Revive a ghost. I.e. turn it from a ghost to a real entity or tile.",
          "parameters": {
            "opts": {
              "name": "opts",
              "desc": "Table with the following fields",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Any items the new real entity collided with or `nil` if the ghost could not be revived.",
            "type": {
              "value": [
                "string",
                "uint"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "silent_revive": {
          "name": "silent_revive",
          "shortDesc": "Revives a ghost silently.",
          "desc": "Revives a ghost silently.",
          "parameters": {
            "opts": {
              "name": "opts",
              "desc": "Table with the following fields",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Any items the new real entity collided with or `nil` if the ghost could not be revived.",
            "type": {
              "value": [
                "string",
                "uint"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_connected_rail": {
          "name": "get_connected_rail",
          "shortDesc": "",
          "desc": "_Can only be used if this is Rail_",
          "parameters": {
            "luaEntityget_connected_rail_param": {
              "name": "luaEntityget_connected_rail_param",
              "desc": "Table with the following fields",
              "type": "LuaEntityget_connected_rail_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Rail connected in the specified manner to this one.",
            "type": "LuaEntity",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaEntityget_connected_rail_param",
              "attributes": {
                "rail_direction": {
                  "name": "rail_direction",
                  "type": "defines.rail_direction",
                  "optional": false
                },
                "rail_connection_direction": {
                  "name": "rail_connection_direction",
                  "type": "defines.rail_connection_direction",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "get_connected_rails": {
          "name": "get_connected_rails",
          "shortDesc": "Get the rails that this signal is connected to.",
          "desc": "Get the rails that this signal is connected to. _Can only be used if this is RailSignal_",
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_rail_segment_entity": {
          "name": "get_rail_segment_entity",
          "shortDesc": "Get the rail signal or train stop at the start/end of the rail segment this rail is in, or `nil` if the rail segment doesn't start/end with a signal nor a train stop.",
          "desc": "Get the rail signal or train stop at the start/end of the rail segment this rail is in, or `nil` if the rail segment doesn't start/end with a signal nor a train stop. _Can only be used if this is Rail_",
          "parameters": {
            "direction": {
              "name": "direction",
              "desc": "The direction of travel relative to this rail.",
              "type": "defines.rail_direction",
              "optional": false
            },
            "in_else_out": {
              "name": "in_else_out",
              "desc": "If true, gets the entity at the entrance of the rail segment, otherwise gets the entity at the exit of the rail segment.",
              "type": "boolean",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaEntity",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_rail_segment_end": {
          "name": "get_rail_segment_end",
          "shortDesc": "Get the rail at the end of the rail segment this rail is in.",
          "desc": "Get the rail at the end of the rail segment this rail is in. _Can only be used if this is Rail_",
          "parameters": {
            "direction": {
              "name": "direction",
              "type": "defines.rail_direction",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaEntity",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_rail_segment_length": {
          "name": "get_rail_segment_length",
          "shortDesc": "Get the length of the rail segment this rail is in.",
          "desc": "Get the length of the rail segment this rail is in. _Can only be used if this is Rail_",
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_rail_segment_overlaps": {
          "name": "get_rail_segment_overlaps",
          "shortDesc": "Get a rail from each rail segment that overlaps with this rail's rail segment.",
          "desc": "Get a rail from each rail segment that overlaps with this rail's rail segment. _Can only be used if this is Rail_",
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_filter": {
          "name": "get_filter",
          "shortDesc": "Get the filter for a slot in an inserter, loader, or logistic storage container.",
          "desc": "Get the filter for a slot in an inserter, loader, or logistic storage container.",
          "parameters": {
            "uint": {
              "name": "uint",
              "desc": "Slot to get the filter of.",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Prototype name of the item being filtered; `nil` if the given slot\n                 has no filter.",
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_filter": {
          "name": "set_filter",
          "shortDesc": "Set the filter for a slot in an inserter, loader, or logistic storage container.",
          "desc": "Set the filter for a slot in an inserter, loader, or logistic storage container.",
          "parameters": {
            "uint": {
              "name": "uint",
              "desc": "Slot to set the filter of.",
              "type": "any",
              "optional": false
            },
            "string": {
              "name": "string",
              "desc": "Prototype name of the item to filter.",
              "type": "any",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_infinity_container_filter": {
          "name": "get_infinity_container_filter",
          "shortDesc": "Gets the filter for this infinity container at the given index or `nil` if the filter index doesn't exist or is empty.",
          "desc": "Gets the filter for this infinity container at the given index or `nil` if the filter index doesn't exist or is empty. _Can only be used if this is InfinityContainer_",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The index to get.",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "InfinityInventoryFilter",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_infinity_container_filter": {
          "name": "set_infinity_container_filter",
          "shortDesc": "Sets the filter for this infinity container at the given index.",
          "desc": "Sets the filter for this infinity container at the given index. _Can only be used if this is InfinityContainer_",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The index to set.",
              "type": "uint",
              "optional": false
            },
            "filter": {
              "name": "filter",
              "desc": "The new filter or nil to clear the filter.",
              "type": "InfinityInventoryFilter",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_infinity_pipe_filter": {
          "name": "get_infinity_pipe_filter",
          "shortDesc": "Gets the filter for this infinity pipe or `nil` if the filter is empty.",
          "desc": "Gets the filter for this infinity pipe or `nil` if the filter is empty. _Can only be used if this is InfinityPipe_",
          "returnObject": {
            "type": "InfinityPipeFilter",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_infinity_pipe_filter": {
          "name": "set_infinity_pipe_filter",
          "shortDesc": "Sets the filter for this infinity pipe.",
          "desc": "Sets the filter for this infinity pipe. _Can only be used if this is InfinityPipe_",
          "parameters": {
            "filter": {
              "name": "filter",
              "desc": "The new filter or nil to clear the filter.",
              "type": "InfinityPipeFilter",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_heat_setting": {
          "name": "get_heat_setting",
          "shortDesc": "Gets the heat setting for this heat interface.",
          "desc": "Gets the heat setting for this heat interface. _Can only be used if this is HeatInterface_",
          "returnObject": {
            "type": "HeatSetting",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_heat_setting": {
          "name": "set_heat_setting",
          "shortDesc": "Sets the heat setting for this heat interface.",
          "desc": "Sets the heat setting for this heat interface. _Can only be used if this is HeatInterface_",
          "parameters": {
            "filter": {
              "name": "filter",
              "desc": "The new setting.",
              "type": "HeatSetting",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_control_behavior": {
          "name": "get_control_behavior",
          "shortDesc": "Gets the control behavior of the entity (if any).",
          "desc": "Gets the control behavior of the entity (if any).",
          "returnObject": {
            "desc": "The control behavior or nil.",
            "type": "LuaControlBehavior",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_or_create_control_behavior": {
          "name": "get_or_create_control_behavior",
          "shortDesc": "Gets (and or creates if needed) the control behavior of the entity.",
          "desc": "Gets (and or creates if needed) the control behavior of the entity.",
          "returnObject": {
            "desc": "The control behavior or nil.",
            "type": "LuaControlBehavior",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_circuit_network": {
          "name": "get_circuit_network",
          "shortDesc": "",
          "parameters": {
            "wire": {
              "name": "wire",
              "desc": "Wire color of the network connected to this entity.",
              "type": "defines.wire_type",
              "optional": false
            },
            "circuit_connector": {
              "name": "circuit_connector",
              "desc": "The connector to get circuit network for.  Must be specified for entities with more than one circuit network connector.",
              "type": "defines.circuit_connector_id",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The circuit network or nil.",
            "type": "LuaCircuitNetwork",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_merged_signal": {
          "name": "get_merged_signal",
          "shortDesc": "Read a single signal from the combined circuit networks.",
          "desc": "Read a single signal from the combined circuit networks.",
          "parameters": {
            "signal": {
              "name": "signal",
              "desc": "The signal to read.",
              "type": "SignalID",
              "optional": false
            },
            "circuit_connector": {
              "name": "circuit_connector",
              "desc": "The connector to get signals for.  Must be specified for entities with more than one circuit network connector.",
              "type": "defines.circuit_connector_id",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The current value of the signal.",
            "type": "int",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_merged_signals": {
          "name": "get_merged_signals",
          "shortDesc": "The merged circuit network signals or `nil` if there are no signals.",
          "desc": "The merged circuit network signals or `nil` if there are no signals.",
          "parameters": {
            "circuit_connector": {
              "name": "circuit_connector",
              "desc": "The connector to get signals for.  Must be specified for entities with more than one circuit network connector.",
              "type": "defines.circuit_connector_id",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The sum of signals on both the red and green networks, or nil if it doesn't have a circuit connector.",
            "type": {
              "value": [
                "Signal"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "supports_backer_name": {
          "name": "supports_backer_name",
          "shortDesc": "",
          "returnObject": {
            "desc": "`true` if this entity supports a backer name.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "copy_settings": {
          "name": "copy_settings",
          "shortDesc": "Copies settings from the given entity onto this entity.",
          "desc": "Copies settings from the given entity onto this entity.",
          "parameters": {
            "entity": {
              "name": "entity",
              "type": "LuaEntity",
              "optional": false
            },
            "by_player": {
              "name": "by_player",
              "desc": "If provided, the copying is done 'as' this player and on_entity_settings_pasted is triggered.",
              "type": "PlayerSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Any items removed from this entity as a result of copying the settings.",
            "type": {
              "value": [
                "string",
                "uint"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_logistic_point": {
          "name": "get_logistic_point",
          "shortDesc": "Gets the [LuaLogisticPoint](https://lua-api.factorio.com/latest/LuaLogisticPoint.html) specified by the given index or if not given returns all of the points this entity owns.",
          "desc": "Gets the [LuaLogisticPoint](https://lua-api.factorio.com/latest/LuaLogisticPoint.html) specified by the given index or if not given returns all of the points this entity owns.",
          "parameters": {
            "defines.logistic_member_index": {
              "name": "defines.logistic_member_index",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaLogisticPoint",
                {
                  "value": [
                    "LuaLogisticPoint"
                  ],
                  "type": "Array"
                }
              ],
              "type": "Union"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "play_note": {
          "name": "play_note",
          "shortDesc": "Plays a note with the given instrument and note.",
          "desc": "Plays a note with the given instrument and note. _Can only be used if this is ProgrammableSpeaker_",
          "parameters": {
            "instrument": {
              "name": "instrument",
              "type": "uint",
              "optional": false
            },
            "note": {
              "name": "note",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the request is valid. The sound may or may not be played depending on polyphony settings.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "connect_rolling_stock": {
          "name": "connect_rolling_stock",
          "shortDesc": "Connects the rolling stock in the given direction.",
          "desc": "Connects the rolling stock in the given direction.",
          "parameters": {
            "direction": {
              "name": "direction",
              "type": "defines.rail_direction",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If any connection was made",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "disconnect_rolling_stock": {
          "name": "disconnect_rolling_stock",
          "shortDesc": "Tries to disconnect this rolling stock in the given direction.",
          "desc": "Tries to disconnect this rolling stock in the given direction.",
          "parameters": {
            "direction": {
              "name": "direction",
              "type": "defines.rail_direction",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If anything was disconnected",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "update_connections": {
          "name": "update_connections",
          "shortDesc": "Reconnect loader, beacon, cliff and mining drill connections to entities that might have been\n teleported out or in by the script.",
          "desc": "Reconnect loader, beacon, cliff and mining drill connections to entities that might have been\n teleported out or in by the script. The game doesn't do this automatically\n as we don't want to loose performance by checking this in normal games.",
          "attribute_type": "function"
        },
        "get_recipe": {
          "name": "get_recipe",
          "shortDesc": "Current recipe being assembled by this machine or `nil` if no recipe is set.",
          "desc": "Current recipe being assembled by this machine or `nil` if no recipe is set. _Can only be used if this is CraftingMachine_",
          "returnObject": {
            "type": "LuaRecipe",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_recipe": {
          "name": "set_recipe",
          "shortDesc": "Sets the current recipe in this assembly machine.",
          "desc": "Sets the current recipe in this assembly machine. _Can only be used if this is CraftingMachine_",
          "parameters": {
            "recipe": {
              "name": "recipe",
              "desc": "The new recipe or nil to clear the recipe.",
              "type": {
                "value": [
                  "string",
                  "LuaRecipe"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Any items removed from this entity as a result of setting the recipe.",
            "type": {
              "value": [
                "string",
                "uint"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "rotate": {
          "name": "rotate",
          "shortDesc": "Rotates this entity as if the player rotated it",
          "desc": "Rotates this entity as if the player rotated it",
          "parameters": {
            "options": {
              "name": "options",
              "desc": "Table with the following fields",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the rotation was successful.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_driver": {
          "name": "get_driver",
          "shortDesc": "Gets the driver of this vehicle if any.",
          "desc": "Gets the driver of this vehicle if any. _Can only be used if this is Vehicle_",
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity",
                "LuaPlayer"
              ],
              "type": "Union"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_driver": {
          "name": "set_driver",
          "shortDesc": "Sets the driver of this vehicle.",
          "desc": "Sets the driver of this vehicle. _Can only be used if this is Vehicle_",
          "parameters": {
            "driver": {
              "name": "driver",
              "desc": "The new driver or nil to eject the current driver if any.",
              "type": {
                "value": [
                  "LuaEntity",
                  "PlayerSpecification"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_passenger": {
          "name": "get_passenger",
          "shortDesc": "Gets the passenger of this car or spidertron if any.",
          "desc": "Gets the passenger of this car or spidertron if any. _Can only be used if this is Vehicle_",
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity",
                "LuaPlayer"
              ],
              "type": "Union"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_passenger": {
          "name": "set_passenger",
          "shortDesc": "Sets the passenger of this car or spidertron.",
          "desc": "Sets the passenger of this car or spidertron. _Can only be used if this is Vehicle_",
          "parameters": {
            "passenger": {
              "name": "passenger",
              "type": {
                "value": [
                  "LuaEntity",
                  "PlayerSpecification"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "is_connected_to_electric_network": {
          "name": "is_connected_to_electric_network",
          "shortDesc": "Returns true if this entity is connected to an electric network.",
          "desc": "Returns true if this entity is connected to an electric network.",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_train_stop_trains": {
          "name": "get_train_stop_trains",
          "shortDesc": "The trains scheduled to stop at this train stop.",
          "desc": "The trains scheduled to stop at this train stop. _Can only be used if this is TrainStop_",
          "returnObject": {
            "type": {
              "value": [
                "LuaTrain"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_stopped_train": {
          "name": "get_stopped_train",
          "shortDesc": "The train currently stopped at this train stop or `nil` if none.",
          "desc": "The train currently stopped at this train stop or `nil` if none. _Can only be used if this is TrainStop_",
          "returnObject": {
            "type": "LuaTrain",
            "optional": false
          },
          "attribute_type": "function"
        },
        "clone": {
          "name": "clone",
          "shortDesc": "Clones this entity.",
          "desc": "Clones this entity.",
          "parameters": {
            "luaEntityclone_param": {
              "name": "luaEntityclone_param",
              "desc": "Table with the following fields",
              "type": "LuaEntityclone_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The cloned entity or `nil` if this entity can't be cloned/can't be cloned to the given location.",
            "type": "LuaEntity",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaEntityclone_param",
              "attributes": {
                "position": {
                  "name": "position",
                  "desc": "The destination position",
                  "type": "Position",
                  "optional": false
                },
                "surface": {
                  "name": "surface",
                  "desc": "The destination surface",
                  "type": "LuaSurface",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "create_build_effect_smoke": {
                  "name": "create_build_effect_smoke",
                  "desc": "If false, the building effect smoke will not be shown around the new entity.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "get_fluid_count": {
          "name": "get_fluid_count",
          "shortDesc": "Get the amount of all or some fluid in this entity.",
          "desc": "Get the amount of all or some fluid in this entity.",
          "parameters": {
            "fluid": {
              "name": "fluid",
              "desc": "Prototype name of the fluid to count. If not specified, count all fluids.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_fluid_contents": {
          "name": "get_fluid_contents",
          "shortDesc": "Get amounts of all fluids in this entity.",
          "desc": "Get amounts of all fluids in this entity.",
          "returnObject": {
            "desc": "The amounts, indexed by fluid names.",
            "type": {
              "value": [
                "string",
                "double"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "remove_fluid": {
          "name": "remove_fluid",
          "shortDesc": "Remove fluid from this entity.",
          "desc": "Remove fluid from this entity.",
          "parameters": {
            "luaEntityremove_fluid_param": {
              "name": "luaEntityremove_fluid_param",
              "desc": "Table with the following fields",
              "type": "LuaEntityremove_fluid_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Amount of fluid actually removed.",
            "type": "double",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaEntityremove_fluid_param",
              "attributes": {
                "name": {
                  "name": "name",
                  "desc": "Fluid prototype name.",
                  "type": "string",
                  "optional": false
                },
                "amount": {
                  "name": "amount",
                  "desc": "Amount to remove",
                  "type": "double",
                  "optional": false
                },
                "minimum_temperature": {
                  "name": "minimum_temperature",
                  "type": "double",
                  "optional": false
                },
                "maximum_temperature": {
                  "name": "maximum_temperature",
                  "type": "double",
                  "optional": false
                },
                "temperature": {
                  "name": "temperature",
                  "type": "double",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "insert_fluid": {
          "name": "insert_fluid",
          "shortDesc": "Insert fluid into this entity.",
          "desc": "Insert fluid into this entity.\n Fluidbox is chosen automatically.",
          "parameters": {
            "fluid": {
              "name": "fluid",
              "desc": "Fluid to insert.",
              "type": "Fluid",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Amount of fluid actually inserted.",
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "clear_fluid_inside": {
          "name": "clear_fluid_inside",
          "shortDesc": "Remove all fluids from this entity.",
          "desc": "Remove all fluids from this entity.",
          "attribute_type": "function"
        },
        "get_beam_source": {
          "name": "get_beam_source",
          "shortDesc": "Get the source of this beam.",
          "desc": "Get the source of this beam. _Can only be used if this is Beam_",
          "returnObject": {
            "type": "BeamTarget",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_beam_source": {
          "name": "set_beam_source",
          "shortDesc": "Set the source of this beam.",
          "desc": "Set the source of this beam. _Can only be used if this is Beam_",
          "parameters": {
            "source": {
              "name": "source",
              "type": {
                "value": [
                  "LuaEntity",
                  "Position"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_beam_target": {
          "name": "get_beam_target",
          "shortDesc": "Get the target of this beam.",
          "desc": "Get the target of this beam. _Can only be used if this is Beam_",
          "returnObject": {
            "type": "BeamTarget",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_beam_target": {
          "name": "set_beam_target",
          "shortDesc": "Set the target of this beam.",
          "desc": "Set the target of this beam. _Can only be used if this is Beam_",
          "parameters": {
            "target": {
              "name": "target",
              "type": {
                "value": [
                  "LuaEntity",
                  "Position"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_radius": {
          "name": "get_radius",
          "shortDesc": "The radius of this entity.",
          "desc": "The radius of this entity.",
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_health_ratio": {
          "name": "get_health_ratio",
          "shortDesc": "The health ratio of this entity between 1 and 0 (for full health and no health respectively).",
          "desc": "The health ratio of this entity between 1 and 0 (for full health and no health respectively).",
          "returnObject": {
            "type": "float",
            "optional": false
          },
          "attribute_type": "function"
        },
        "create_build_effect_smoke": {
          "name": "create_build_effect_smoke",
          "shortDesc": "Creates the same smoke that is created when you place a building by hand.",
          "desc": "Creates the same smoke that is created when you place a building by hand.\n You can play the building sound to go with it by using [LuaSurface::play_sound](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.play_sound) , eg:\n entity.surface.play_sound{path=\"entity-build/\"..entity.prototype.name, position=entity.position}",
          "attribute_type": "function"
        },
        "release_from_spawner": {
          "name": "release_from_spawner",
          "shortDesc": "Release the unit from the spawner which spawned it.",
          "desc": "Release the unit from the spawner which spawned it. This allows the spawner to continue spawning additional units. _Can only be used if this is Unit_",
          "attribute_type": "function"
        },
        "toggle_equipment_movement_bonus": {
          "name": "toggle_equipment_movement_bonus",
          "shortDesc": "Toggle this entity's equipment movement bonus.",
          "desc": "Toggle this entity's equipment movement bonus. Does nothing if the entity does not have an equipment grid.",
          "attribute_type": "function"
        },
        "can_shoot": {
          "name": "can_shoot",
          "shortDesc": "If this character can shoot the given entity or position.",
          "desc": "If this character can shoot the given entity or position.",
          "parameters": {
            "target": {
              "name": "target",
              "type": "LuaEntity",
              "optional": false
            },
            "position": {
              "name": "position",
              "type": "Position",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "start_fading_out": {
          "name": "start_fading_out",
          "shortDesc": "Only works if the entity is a speech-bubble, with an \"effect\" defined in its wrapper_flow_style.",
          "desc": "Only works if the entity is a speech-bubble, with an \"effect\" defined in its wrapper_flow_style.\n Starts animating the opacity of the speech bubble towards zero, and destroys the entity when it hits zero.",
          "attribute_type": "function"
        },
        "get_upgrade_target": {
          "name": "get_upgrade_target",
          "shortDesc": "Returns the new entity prototype.",
          "desc": "Returns the new entity prototype.",
          "returnObject": {
            "desc": "nil if this entity is not marked for upgrade.",
            "type": "LuaEntityPrototype",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_upgrade_direction": {
          "name": "get_upgrade_direction",
          "shortDesc": "Returns the new entity direction after upgrading.",
          "desc": "Returns the new entity direction after upgrading.",
          "returnObject": {
            "desc": "nil if this entity is not marked for upgrade.",
            "type": "defines.direction",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_damage_to_be_taken": {
          "name": "get_damage_to_be_taken",
          "shortDesc": "Returns the amount of damage to be taken by this entity.",
          "desc": "Returns the amount of damage to be taken by this entity.",
          "returnObject": {
            "type": "float",
            "optional": false
          },
          "attribute_type": "function"
        },
        "deplete": {
          "name": "deplete",
          "shortDesc": "Depletes and destroys this resource entity.",
          "desc": "Depletes and destroys this resource entity. _Can only be used if this is ResourceEntity_",
          "attribute_type": "function"
        },
        "mine": {
          "name": "mine",
          "shortDesc": "Mines this entity.",
          "desc": "Mines this entity.",
          "parameters": {
            "options": {
              "name": "options",
              "desc": "Table with the following fields",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "if mining succeeded.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "spawn_decorations": {
          "name": "spawn_decorations",
          "shortDesc": "Triggers spawn_decoration actions defined in the entity prototype or does nothing if entity is not \"turret\" or \"unit-spawner\".",
          "desc": "Triggers spawn_decoration actions defined in the entity prototype or does nothing if entity is not \"turret\" or \"unit-spawner\".",
          "attribute_type": "function"
        },
        "can_wires_reach": {
          "name": "can_wires_reach",
          "shortDesc": "Can wires reach between these entities.",
          "desc": "Can wires reach between these entities.",
          "parameters": {
            "entity": {
              "name": "entity",
              "type": "LuaEntity",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_connected_rolling_stock": {
          "name": "get_connected_rolling_stock",
          "shortDesc": "Gets rolling stock connected to the given end of this stock",
          "desc": "Gets rolling stock connected to the given end of this stock",
          "parameters": {
            "direction": {
              "name": "direction",
              "type": "defines.rail_direction",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "One of connected rolling stocks",
            "type": "LuaEntity",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_registered_for_construction": {
          "name": "is_registered_for_construction",
          "shortDesc": "Is this entity or tile ghost or item request proxy registered for construction?",
          "desc": "Is this entity or tile ghost or item request proxy registered for construction?\n If false, it means a construction robot has been dispatched to build the entity, or it is not an entity that can be constructed.",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_registered_for_deconstruction": {
          "name": "is_registered_for_deconstruction",
          "shortDesc": "Is this entity registered for deconstruction with this force?",
          "desc": "Is this entity registered for deconstruction with this force?\n If false, it means a construction robot has been dispatched to deconstruct it, or it is not marked for deconstruction.\n This is worst-case O(N) complexity where N is the current number of things in the deconstruct queue.",
          "parameters": {
            "force": {
              "name": "force",
              "desc": "The force construction manager to check.",
              "type": "ForceSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_registered_for_upgrade": {
          "name": "is_registered_for_upgrade",
          "shortDesc": "Is this entity registered for upgrade?",
          "desc": "Is this entity registered for upgrade?\n If false, it means a construction robot has been dispatched to upgrade it, or it is not marked for upgrade.\n This is worst-case O(N) complexity where N is the current number of things in the upgrade queue.",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_registered_for_repair": {
          "name": "is_registered_for_repair",
          "shortDesc": "Is this entity registered for repair?",
          "desc": "Is this entity registered for repair?\n If false, it means a construction robot has been dispatched to upgrade it, or it is not damaged.\n This is worst-case O(N) complexity where N is the current number of things in the repair queue.",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "add_autopilot_destination": {
          "name": "add_autopilot_destination",
          "shortDesc": "Adds (queues) the given position to the spidertron's autopilot.",
          "desc": "Adds (queues) the given position to the spidertron's autopilot. _Can only be used if this is SpiderVehicle_",
          "attribute_type": "function"
        },
        "connect_linked_belts": {
          "name": "connect_linked_belts",
          "shortDesc": "Connects current linked belt with another one.",
          "desc": "Connects current linked belt with another one. Neighbours have to be of different type.\n If given linked belt is connected to something else it will be disconnected first.\n If provided neighbour is connected to something else it will also be disconnected first.\n Automatically updates neighbour to be connected back to this one. _Can only be used if this is LinkedBelt_",
          "parameters": {
            "neighbour": {
              "name": "neighbour",
              "desc": "Another linked belt or entity ghost containing linked belt to connect or nil to disconnect",
              "type": "LuaEntity",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "disconnect_linked_belts": {
          "name": "disconnect_linked_belts",
          "shortDesc": "Disconnects linked belt from its neighbour.",
          "desc": "Disconnects linked belt from its neighbour. _Can only be used if this is LinkedBelt_",
          "attribute_type": "function"
        },
        "name": {
          "name": "name",
          "shortDesc": "Name of the entity prototype.",
          "desc": "Name of the entity prototype. E.g. \"inserter\" or \"filter-inserter\".",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ghost_name": {
          "name": "ghost_name",
          "shortDesc": "Name of the entity or tile contained in this ghost",
          "desc": "Name of the entity or tile contained in this ghost _Can only be used if this is Ghost_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "Localised name of the entity.",
          "desc": "Localised name of the entity.",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ghost_localised_name": {
          "name": "ghost_localised_name",
          "shortDesc": "Localised name of the entity or tile contained in this ghost.",
          "desc": "Localised name of the entity or tile contained in this ghost. _Can only be used if this is Ghost_",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ghost_localised_description": {
          "name": "ghost_localised_description",
          "shortDesc": "",
          "desc": "_Can only be used if this is Ghost_",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "type": {
          "name": "type",
          "shortDesc": "The entity prototype type of this entity.",
          "desc": "The entity prototype type of this entity.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ghost_type": {
          "name": "ghost_type",
          "shortDesc": "The prototype type of the entity or tile contained in this ghost.",
          "desc": "The prototype type of the entity or tile contained in this ghost. _Can only be used if this is Ghost_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "active": {
          "name": "active",
          "shortDesc": "Deactivating an entity will stop all its operations (car will stop moving, inserters\n will stop working, fish will stop moving etc).",
          "desc": "Deactivating an entity will stop all its operations (car will stop moving, inserters\n will stop working, fish will stop moving etc). **Note:** Entities that are not active naturally can't be set to be active (setting\n       it to be active will do nothing) **Note:** Ghosts, simple smoke, and corpses can't be modified at this time. **Note:** It is even possible to set the character to not be active, so he can't move and\n       perform most of the tasks.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "destructible": {
          "name": "destructible",
          "shortDesc": "When the entity is not destructible it can't be damaged.",
          "desc": "When the entity is not destructible it can't be damaged. **Note:** An indestructible entity can still be mined. **Note:** Entities that are indestructible naturally (they have no health, like smoke,\n       resource etc) can't be set to be destructible.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "minable": {
          "name": "minable",
          "shortDesc": "",
          "desc": "**Note:** Not minable entities can still be destroyed. **Note:** Entities that are not minable naturally (like smoke, character, enemy units etc)\n       can't be set to minable.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "rotatable": {
          "name": "rotatable",
          "shortDesc": "When entity is not to be rotatable (inserter, transport belt etc), it can't be rotated\n by player using the R key.",
          "desc": "When entity is not to be rotatable (inserter, transport belt etc), it can't be rotated\n by player using the R key. **Note:** Entities that are not rotatable naturally (like chest or furnace) can't be set to\n       be rotatable.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "operable": {
          "name": "operable",
          "shortDesc": "Player can't open gui of this entity and he can't quick insert/input stuff in to the entity\n when it is not operable.",
          "desc": "Player can't open gui of this entity and he can't quick insert/input stuff in to the entity\n when it is not operable.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "health": {
          "name": "health",
          "shortDesc": "Health of the entity.",
          "desc": "Health of the entity. Setting health to less than 0 will set health to 0, entities\n with 0 health can not be attacked. Setting health to higher than max health will\n set health to max health. **Note:** If used on an entity that doesn't support health, this field will be `nil` .",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "direction": {
          "name": "direction",
          "shortDesc": "The current direction this entity is facing.",
          "desc": "The current direction this entity is facing.",
          "type": "defines.direction",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "supports_direction": {
          "name": "supports_direction",
          "shortDesc": "Whether the entity has direction.",
          "desc": "Whether the entity has direction.\n When it is false for this entity, it will always return north direction when asked for.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "orientation": {
          "name": "orientation",
          "shortDesc": "The smooth orientation.",
          "desc": "The smooth orientation.",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "cliff_orientation": {
          "name": "cliff_orientation",
          "shortDesc": "The orientation of this cliff.",
          "desc": "The orientation of this cliff.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "relative_turret_orientation": {
          "name": "relative_turret_orientation",
          "shortDesc": "The relative orientation of the vehicle turret, artillery turret, artillery wagon\n or `nil` if this entity isn't a vehicle with a vehicle turret or artillery turret/wagon.",
          "desc": "The relative orientation of the vehicle turret, artillery turret, artillery wagon\n or `nil` if this entity isn't a vehicle with a vehicle turret or artillery turret/wagon. **Note:** Writing does nothing if the vehicle doesn't have a turret.",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "torso_orientation": {
          "name": "torso_orientation",
          "shortDesc": "The torso orientation of this spider vehicle.",
          "desc": "The torso orientation of this spider vehicle. _Can only be used if this is SpiderVehicle_",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "amount": {
          "name": "amount",
          "shortDesc": "Count of resource units contained.",
          "desc": "Count of resource units contained. _Can only be used if this is ResourceEntity_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "initial_amount": {
          "name": "initial_amount",
          "shortDesc": "Count of initial resource units contained.",
          "desc": "Count of initial resource units contained. **Note:** If this is not an infinite resource reading will give `nil` and writing will give an error. _Can only be used if this is ResourceEntity_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "effectivity_modifier": {
          "name": "effectivity_modifier",
          "shortDesc": "Multiplies the acceleration the vehicle can create for one unit of energy.",
          "desc": "Multiplies the acceleration the vehicle can create for one unit of energy. By default\n is `1` . _Can only be used if this is Car_",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "consumption_modifier": {
          "name": "consumption_modifier",
          "shortDesc": "Multiplies the energy consumption.",
          "desc": "Multiplies the energy consumption. _Can only be used if this is Car_",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "friction_modifier": {
          "name": "friction_modifier",
          "shortDesc": "Multiplies the car friction rate.",
          "desc": "Multiplies the car friction rate. Example This will allow the car to go much faster `game.player.vehicle.friction_modifier\u00a0=\u00a00.5` _Can only be used if this is Car_",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "driver_is_gunner": {
          "name": "driver_is_gunner",
          "shortDesc": "Whether the driver of this car or spidertron is the gunner, if false, the passenger is the gunner.",
          "desc": "Whether the driver of this car or spidertron is the gunner, if false, the passenger is the gunner.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "vehicle_automatic_targeting_parameters": {
          "name": "vehicle_automatic_targeting_parameters",
          "shortDesc": "Read when this spidertron auto-targets enemies",
          "desc": "Read when this spidertron auto-targets enemies _Can only be used if this is SpiderVehicle_",
          "type": "VehicleAutomaticTargetingParameters",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "speed": {
          "name": "speed",
          "shortDesc": "The current speed of the car, rolling stock, projectile or spider vehicle, or current max speed of the unit.",
          "desc": "The current speed of the car, rolling stock, projectile or spider vehicle, or current max speed of the unit. Only the speed of units, cars, and projectiles are writable.",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "effective_speed": {
          "name": "effective_speed",
          "shortDesc": "The current speed of a unit, taking into account any walking speed modifier given by the tile the unit is\n standing on.",
          "desc": "The current speed of a unit, taking into account any walking speed modifier given by the tile the unit is\n standing on. _Can only be used if this is Unit_",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "stack": {
          "name": "stack",
          "shortDesc": "",
          "desc": "_Can only be used if this is ItemEntity_",
          "type": "LuaItemStack",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "prototype": {
          "name": "prototype",
          "shortDesc": "The entity prototype of this entity.",
          "desc": "The entity prototype of this entity.",
          "type": "LuaEntityPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ghost_prototype": {
          "name": "ghost_prototype",
          "shortDesc": "The prototype of the entity or tile contained in this ghost.",
          "desc": "The prototype of the entity or tile contained in this ghost. _Can only be used if this is Ghost_",
          "type": {
            "value": [
              "LuaEntityPrototype",
              "LuaTilePrototype"
            ],
            "type": "Union"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "drop_position": {
          "name": "drop_position",
          "shortDesc": "Position where the entity puts its stuff.",
          "desc": "Position where the entity puts its stuff. **Note:** Meaningful only for entities that put stuff somewhere, such as mining drills or inserters. Mining drills can't have their drop position changed; inserters must have `allow_custom_vectors` set to true on their prototype to allow changing the drop position.",
          "type": "Position",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "pickup_position": {
          "name": "pickup_position",
          "shortDesc": "Where the inserter will pick up items from.",
          "desc": "Where the inserter will pick up items from. **Note:** Inserters must have `allow_custom_vectors` set to true on their prototype to allow changing the pickup position. _Can only be used if this is Inserter_",
          "type": "Position",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "drop_target": {
          "name": "drop_target",
          "shortDesc": "The entity this entity is putting its stuff to or `nil` if there is no such entity.",
          "desc": "The entity this entity is putting its stuff to or `nil` if there is no such entity. **Note:** Meaningful only for entities that put stuff somewhere, such as mining drills or inserters.",
          "type": "LuaEntity",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "pickup_target": {
          "name": "pickup_target",
          "shortDesc": "The entity the inserter will attempt to pick up from.",
          "desc": "The entity the inserter will attempt to pick up from. For example, this can be a transport belt or a\n storage chest. _Can only be used if this is Inserter_",
          "type": "LuaEntity",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "selected_gun_index": {
          "name": "selected_gun_index",
          "shortDesc": "Index of the currently selected weapon slot of this character, car, or spidertron, or `nil` if the car/spidertron doesn't have guns.",
          "desc": "Index of the currently selected weapon slot of this character, car, or spidertron, or `nil` if the car/spidertron doesn't have guns. _Can only be used if this is Character or  Car_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "energy": {
          "name": "energy",
          "shortDesc": "Energy stored in the entity (heat in furnace, energy stored in electrical devices etc.",
          "desc": "Energy stored in the entity (heat in furnace, energy stored in electrical devices etc.).\n always 0 for entities that don't have the concept of energy stored inside. Example `game.player.print(\"Machine\u00a0energy:\u00a0\"\u00a0..\u00a0game.player.selected.energy\u00a0..\u00a0\"J\") game.player.selected.energy\u00a0=\u00a03000`",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "temperature": {
          "name": "temperature",
          "shortDesc": "The temperature of this entities heat energy source if this entity uses a heat energy source or `nil` .",
          "desc": "The temperature of this entities heat energy source if this entity uses a heat energy source or `nil` .",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "previous_recipe": {
          "name": "previous_recipe",
          "shortDesc": "The previous recipe this furnace was using or nil if the furnace had no previous recipe.",
          "desc": "The previous recipe this furnace was using or nil if the furnace had no previous recipe. _Can only be used if this is Furnace_",
          "type": "LuaRecipe",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "held_stack": {
          "name": "held_stack",
          "shortDesc": "The item stack currently held in an inserter's hand.",
          "desc": "The item stack currently held in an inserter's hand. _Can only be used if this is Inserter_",
          "type": "LuaItemStack",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "held_stack_position": {
          "name": "held_stack_position",
          "shortDesc": "Current position of the inserter's \"hand\".",
          "desc": "Current position of the inserter's \"hand\". _Can only be used if this is Inserter_",
          "type": "Position",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "train": {
          "name": "train",
          "shortDesc": "The train this rolling stock belongs to or nil if not rolling stock.",
          "desc": "The train this rolling stock belongs to or nil if not rolling stock.",
          "type": "LuaTrain",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "neighbours": {
          "name": "neighbours",
          "shortDesc": "",
          "desc": "* When called on an electric pole, this is a dictionary of all connections, indexed\n         by the strings `\"copper\"` , `\"red\"` , and `\"green\"` .\n  * When called on a pipe-connectable entity, this is an array of entity arrays of all entities a given fluidbox is connected to.\n  * When called on an underground transport belt, this is the other end of the\n         underground belt connection, or `nil` if none.\n  * When called on a wall-connectable entity or reactor, this is a dictionary of all connections indexed by the connection direction \"north\", \"south\", \"east\", and \"west\".",
          "type": {
            "value": [
              {
                "value": [
                  "string",
                  {
                    "value": [
                      "LuaEntity"
                    ],
                    "type": "Array"
                  }
                ],
                "type": "Table"
              },
              {
                "value": [
                  {
                    "value": [
                      "LuaEntity"
                    ],
                    "type": "Array"
                  }
                ],
                "type": "Array"
              },
              "LuaEntity"
            ],
            "type": "Union"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "belt_neighbours": {
          "name": "belt_neighbours",
          "shortDesc": "The belt connectable neighbours of this belt connectable entity.",
          "desc": "The belt connectable neighbours of this belt connectable entity. Only entities that input to or are outputs of this entity.\n Does not contain the other end of an underground belt, see [LuaEntity::neighbours](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.neighbours) for that.\n This is a dictionary with `\"inputs\"` , `\"outputs\"` entries that are arrays of transport belt connectable entities, or empty tables if no entities. _Can only be used if this is TransportBeltConnectable_",
          "type": {
            "value": [
              "string",
              {
                "value": [
                  "LuaEntity"
                ],
                "type": "Array"
              }
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fluidbox": {
          "name": "fluidbox",
          "shortDesc": "Fluidboxes of this entity.",
          "desc": "Fluidboxes of this entity.",
          "type": "LuaFluidBox",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "backer_name": {
          "name": "backer_name",
          "shortDesc": "The name of a backer (of Factorio) assigned to a lab or train station / stop.",
          "desc": "The name of a backer (of Factorio) assigned to a lab or train station / stop. **Note:** Only useable on entities that support backer names. Returns `nil` when the entity doesn't support a backer name.",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "entity_label": {
          "name": "entity_label",
          "shortDesc": "The label of this entity if it has one or `nil` .",
          "desc": "The label of this entity if it has one or `nil` . Changing the value will trigger on_entity_renamed event **Note:** only usable on entities that have labels (currently only spider-vehicles).",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "time_to_live": {
          "name": "time_to_live",
          "shortDesc": "The ticks left before a ghost, combat robot, highlight box or smoke with trigger is destroyed.",
          "desc": "The ticks left before a ghost, combat robot, highlight box or smoke with trigger is destroyed. * for ghosts set to uint32 max (4,294,967,295) to never expire.\n  * for ghosts Cannot be set higher than [LuaForce::ghost_time_to_live](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.ghost_time_to_live) of the entity's force.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "color": {
          "name": "color",
          "shortDesc": "The character, rolling stock, train stop, car, spider-vehicle, flying text, corpse or simple-entity-with-owner color.",
          "desc": "The character, rolling stock, train stop, car, spider-vehicle, flying text, corpse or simple-entity-with-owner color. Returns `nil` if this entity doesn't use custom colors. **Note:** Car color is overridden by the color of the current driver/passenger, if there is one.",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "text": {
          "name": "text",
          "shortDesc": "The text of this flying-text entity.",
          "desc": "The text of this flying-text entity. _Can only be used if this is FlyingText_",
          "type": "LocalisedString",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "signal_state": {
          "name": "signal_state",
          "shortDesc": "The state of this rail signal.",
          "desc": "The state of this rail signal. _Can only be used if this is RailSignal_",
          "type": "defines.signal_state",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "chain_signal_state": {
          "name": "chain_signal_state",
          "shortDesc": "The state of this chain signal.",
          "desc": "The state of this chain signal. _Can only be used if this is RailChainSignal_",
          "type": "defines.chain_signal_state",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "to_be_looted": {
          "name": "to_be_looted",
          "shortDesc": "Will this entity be picked up automatically when the player walks over it?",
          "desc": "Will this entity be picked up automatically when the player walks over it? _Can only be used if this is ItemEntity_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "crafting_speed": {
          "name": "crafting_speed",
          "shortDesc": "The current crafting speed, including speed bonuses from modules and beacons.",
          "desc": "The current crafting speed, including speed bonuses from modules and beacons. _Can only be used if this is CraftingMachine_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "crafting_progress": {
          "name": "crafting_progress",
          "shortDesc": "The current crafting progress, as a number in range [0, 1].",
          "desc": "The current crafting progress, as a number in range [0, 1]. _Can only be used if this is CraftingMachine_",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "bonus_progress": {
          "name": "bonus_progress",
          "shortDesc": "The current productivity bonus progress, as a number in range [0, 1].",
          "desc": "The current productivity bonus progress, as a number in range [0, 1]. _Can only be used if this is CraftingMachine_",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "productivity_bonus": {
          "name": "productivity_bonus",
          "shortDesc": "The productivity bonus of this entity.",
          "desc": "The productivity bonus of this entity. **Note:** This includes force based bonuses as well as beacon/module bonuses.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "pollution_bonus": {
          "name": "pollution_bonus",
          "shortDesc": "The pollution bonus of this entity.",
          "desc": "The pollution bonus of this entity.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "speed_bonus": {
          "name": "speed_bonus",
          "shortDesc": "The speed bonus of this entity.",
          "desc": "The speed bonus of this entity. **Note:** This includes force based bonuses as well as beacon/module bonuses.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "consumption_bonus": {
          "name": "consumption_bonus",
          "shortDesc": "The consumption bonus of this entity.",
          "desc": "The consumption bonus of this entity.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "belt_to_ground_type": {
          "name": "belt_to_ground_type",
          "shortDesc": "`\"input\"` or `\"output\"` , depending on whether this underground belt goes down or up.",
          "desc": "`\"input\"` or `\"output\"` , depending on whether this underground belt goes down or up. _Can only be used if this is TransportBeltToGround_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "loader_type": {
          "name": "loader_type",
          "shortDesc": "`\"input\"` or `\"output\"` , depending on whether this loader puts to or gets from a container.",
          "desc": "`\"input\"` or `\"output\"` , depending on whether this loader puts to or gets from a container. _Can only be used if this is Loader_",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "rocket_parts": {
          "name": "rocket_parts",
          "shortDesc": "Number of rocket parts in the silo.",
          "desc": "Number of rocket parts in the silo. _Can only be used if this is RocketSilo_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "logistic_network": {
          "name": "logistic_network",
          "shortDesc": "The logistic network this entity is a part of.",
          "desc": "The logistic network this entity is a part of.",
          "type": "LuaLogisticNetwork",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "logistic_cell": {
          "name": "logistic_cell",
          "shortDesc": "The logistic cell this entity is a part of.",
          "desc": "The logistic cell this entity is a part of. Will be `nil` if this entity is not a part of any logistic cell.",
          "type": "LuaLogisticCell",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "item_requests": {
          "name": "item_requests",
          "shortDesc": "Items this ghost will request when revived or items this item request proxy is requesting.",
          "desc": "Items this ghost will request when revived or items this item request proxy is requesting.\n Result is a dictionary mapping each item prototype name to the required count.",
          "type": {
            "value": [
              "string",
              "uint"
            ],
            "type": "Table"
          },
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "player": {
          "name": "player",
          "shortDesc": "The player connected to this character or `nil` if none.",
          "desc": "The player connected to this character or `nil` if none. _Can only be used if this is Character_",
          "type": "LuaPlayer",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "unit_group": {
          "name": "unit_group",
          "shortDesc": "The unit group this unit is a member of, or `nil` if none.",
          "desc": "The unit group this unit is a member of, or `nil` if none. _Can only be used if this is Unit_",
          "type": "LuaUnitGroup",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "damage_dealt": {
          "name": "damage_dealt",
          "shortDesc": "The damage dealt by this turret, artillery turret, or artillery wagon.",
          "desc": "The damage dealt by this turret, artillery turret, or artillery wagon. _Can only be used if this is Turret_",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "kills": {
          "name": "kills",
          "shortDesc": "The number of units killed by this turret, artillery turret, or artillery wagon.",
          "desc": "The number of units killed by this turret, artillery turret, or artillery wagon. _Can only be used if this is Turret_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "last_user": {
          "name": "last_user",
          "shortDesc": "The player who built the entity",
          "desc": "The player who built the entity _Can only be used if this is EntityWithOwner_",
          "type": "LuaPlayer",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "electric_buffer_size": {
          "name": "electric_buffer_size",
          "shortDesc": "The buffer size for the electric energy source or nil if the entity doesn't have an electric energy source.",
          "desc": "The buffer size for the electric energy source or nil if the entity doesn't have an electric energy source. **Note:** Write access is limited to the ElectricEnergyInterface type",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "electric_input_flow_limit": {
          "name": "electric_input_flow_limit",
          "shortDesc": "The input flow limit for the electric energy source or nil if the entity doesn't have an electric energy source.",
          "desc": "The input flow limit for the electric energy source or nil if the entity doesn't have an electric energy source.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "electric_output_flow_limit": {
          "name": "electric_output_flow_limit",
          "shortDesc": "The output flow limit for the electric energy source or nil if the entity doesn't have an electric energy source.",
          "desc": "The output flow limit for the electric energy source or nil if the entity doesn't have an electric energy source.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "electric_drain": {
          "name": "electric_drain",
          "shortDesc": "The electric drain for the electric energy source or nil if the entity doesn't have an electric energy source.",
          "desc": "The electric drain for the electric energy source or nil if the entity doesn't have an electric energy source.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "electric_emissions": {
          "name": "electric_emissions",
          "shortDesc": "The emissions for the electric energy source or nil if the entity doesn't have an electric energy source.",
          "desc": "The emissions for the electric energy source or nil if the entity doesn't have an electric energy source.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "unit_number": {
          "name": "unit_number",
          "shortDesc": "The unit number or nil if the entity doesn't have one.",
          "desc": "The unit number or nil if the entity doesn't have one. This is universally unique for every entity that has one, for the lifetime of a whole game.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ghost_unit_number": {
          "name": "ghost_unit_number",
          "shortDesc": "The unit number of the entity contained in this ghost or nil if the entity doesn't have one.",
          "desc": "The unit number of the entity contained in this ghost or nil if the entity doesn't have one. _Can only be used if this is EntityGhost_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mining_progress": {
          "name": "mining_progress",
          "shortDesc": "The mining progress for this mining drill or `nil` if this isn't a mining drill.",
          "desc": "The mining progress for this mining drill or `nil` if this isn't a mining drill.  Is a number in range [0, mining_target.prototype.mineable_properties.mining_time]",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "bonus_mining_progress": {
          "name": "bonus_mining_progress",
          "shortDesc": "The bonus mining progress for this mining drill or `nil` if this isn't a mining drill.",
          "desc": "The bonus mining progress for this mining drill or `nil` if this isn't a mining drill.  Read yields a number in range [0, mining_target.prototype.mineable_properties.mining_time]",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "power_production": {
          "name": "power_production",
          "shortDesc": "The power production specific to the ElectricEnergyInterface entity type.",
          "desc": "The power production specific to the ElectricEnergyInterface entity type. _Can only be used if this is ElectricEnergyInterface_",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "power_usage": {
          "name": "power_usage",
          "shortDesc": "The power usage specific to the ElectricEnergyInterface entity type.",
          "desc": "The power usage specific to the ElectricEnergyInterface entity type. _Can only be used if this is ElectricEnergyInterface_",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "bounding_box": {
          "name": "bounding_box",
          "shortDesc": "[LuaEntityPrototype::collision_box](https://lua-api.factorio.com/latest/LuaEntityPrototype.html#LuaEntityPrototype.collision_box) around entity's given position and respecting the current entity orientation.",
          "desc": "[LuaEntityPrototype::collision_box](https://lua-api.factorio.com/latest/LuaEntityPrototype.html#LuaEntityPrototype.collision_box) around entity's given position and respecting the current entity orientation.",
          "type": "BoundingBox",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "secondary_bounding_box": {
          "name": "secondary_bounding_box",
          "shortDesc": "The secondary bounding box of this entity or `nil` if it doesn't have one.",
          "desc": "The secondary bounding box of this entity or `nil` if it doesn't have one.",
          "type": "BoundingBox",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "selection_box": {
          "name": "selection_box",
          "shortDesc": "[LuaEntityPrototype::selection_box](https://lua-api.factorio.com/latest/LuaEntityPrototype.html#LuaEntityPrototype.selection_box) around entity's given position and respecting the current entity orientation.",
          "desc": "[LuaEntityPrototype::selection_box](https://lua-api.factorio.com/latest/LuaEntityPrototype.html#LuaEntityPrototype.selection_box) around entity's given position and respecting the current entity orientation.",
          "type": "BoundingBox",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "secondary_selection_box": {
          "name": "secondary_selection_box",
          "shortDesc": "The secondary selection box of this entity or `nil` if it doesn't have one.",
          "desc": "The secondary selection box of this entity or `nil` if it doesn't have one.",
          "type": "BoundingBox",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mining_target": {
          "name": "mining_target",
          "shortDesc": "The mining target or `nil` if none",
          "desc": "The mining target or `nil` if none _Can only be used if this is MiningDrill_",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "circuit_connected_entities": {
          "name": "circuit_connected_entities",
          "shortDesc": "Entities connected to this entity via the circuit network.",
          "desc": "Entities connected to this entity via the circuit network. It is a table: * red :: array of [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  Entities connected via the red wire.\n  * green :: array of [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  Entities connected via the green wire.",
          "type": "table",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "circuit_connection_definitions": {
          "name": "circuit_connection_definitions",
          "shortDesc": "The connection definition for entities connected to this entity via the circuit network.",
          "desc": "The connection definition for entities connected to this entity via the circuit network. Each CircuitConnectionDefinition is a table: * wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color, either [defines.wire_type.red](https://lua-api.factorio.com/latest/defines.html#defines.wire_type.red) or [defines.wire_type.green](https://lua-api.factorio.com/latest/defines.html#defines.wire_type.green) .\n  * target_entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)\n  * source_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)\n  * target_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
          "type": {
            "value": [
              "CircuitConnectionDefinition"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "request_slot_count": {
          "name": "request_slot_count",
          "shortDesc": "The index of the configured request with the highest index for this entity.",
          "desc": "The index of the configured request with the highest index for this entity. This means 0 if no requests are set and e.g. 20 if the 20th request slot is configured.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "filter_slot_count": {
          "name": "filter_slot_count",
          "shortDesc": "The number of filter slots this inserter, loader, or logistic storage container has.",
          "desc": "The number of filter slots this inserter, loader, or logistic storage container has. 0 if not one of those entities.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "loader_container": {
          "name": "loader_container",
          "shortDesc": "The container entity this loader is pointing at/pulling from depending on the [LuaEntity::loader_type](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.loader_type) .",
          "desc": "The container entity this loader is pointing at/pulling from depending on the [LuaEntity::loader_type](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.loader_type) . _Can only be used if this is Loader_",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "grid": {
          "name": "grid",
          "shortDesc": "The equipment grid or `nil` if this entity doesn't have an equipment grid.",
          "desc": "The equipment grid or `nil` if this entity doesn't have an equipment grid.",
          "type": "LuaEquipmentGrid",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "graphics_variation": {
          "name": "graphics_variation",
          "shortDesc": "The graphics variation for this entity or `nil` if this entity doesn't use graphics variations.",
          "desc": "The graphics variation for this entity or `nil` if this entity doesn't use graphics variations.",
          "type": "uint8",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tree_color_index": {
          "name": "tree_color_index",
          "shortDesc": "Index of the tree color.",
          "desc": "Index of the tree color.",
          "type": "uint8",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tree_color_index_max": {
          "name": "tree_color_index_max",
          "shortDesc": "Maximum index of the tree colors.",
          "desc": "Maximum index of the tree colors.",
          "type": "uint8",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tree_stage_index": {
          "name": "tree_stage_index",
          "shortDesc": "Index of the tree stage.",
          "desc": "Index of the tree stage.",
          "type": "uint8",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tree_stage_index_max": {
          "name": "tree_stage_index_max",
          "shortDesc": "Maximum index of the tree stages.",
          "desc": "Maximum index of the tree stages.",
          "type": "uint8",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tree_gray_stage_index": {
          "name": "tree_gray_stage_index",
          "shortDesc": "Index of the tree gray stage",
          "desc": "Index of the tree gray stage",
          "type": "uint8",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tree_gray_stage_index_max": {
          "name": "tree_gray_stage_index_max",
          "shortDesc": "Maximum index of the tree gray stages.",
          "desc": "Maximum index of the tree gray stages.",
          "type": "uint8",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "burner": {
          "name": "burner",
          "shortDesc": "The burner energy source for this entity or `nil` if there isn't one.",
          "desc": "The burner energy source for this entity or `nil` if there isn't one.",
          "type": "LuaBurner",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "shooting_target": {
          "name": "shooting_target",
          "shortDesc": "The shooting target for this turret or `nil` .",
          "desc": "The shooting target for this turret or `nil` .",
          "type": "LuaEntity",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "proxy_target": {
          "name": "proxy_target",
          "shortDesc": "The target entity for this item-request-proxy or `nil`",
          "desc": "The target entity for this item-request-proxy or `nil`",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "stickers": {
          "name": "stickers",
          "shortDesc": "The sticker entities attached to this entity or `nil` if none.",
          "desc": "The sticker entities attached to this entity or `nil` if none.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "sticked_to": {
          "name": "sticked_to",
          "shortDesc": "The entity this sticker is sticked to.",
          "desc": "The entity this sticker is sticked to.",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "parameters": {
          "name": "parameters",
          "shortDesc": "",
          "desc": "_Can only be used if this is ProgrammableSpeaker_",
          "type": "ProgrammableSpeakerParameters",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "alert_parameters": {
          "name": "alert_parameters",
          "shortDesc": "",
          "desc": "_Can only be used if this is ProgrammableSpeaker_",
          "type": "ProgrammableSpeakerAlertParameters",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "electric_network_statistics": {
          "name": "electric_network_statistics",
          "shortDesc": "The electric network statistics for this electric pole.",
          "desc": "The electric network statistics for this electric pole. _Can only be used if this is ElectricPole_",
          "type": "LuaFlowStatistics",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "inserter_stack_size_override": {
          "name": "inserter_stack_size_override",
          "shortDesc": "Sets the stack size limit on this inserter.",
          "desc": "Sets the stack size limit on this inserter. If the stack size is > than the force stack size limit the value is ignored. **Note:** Set to 0 to reset.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "products_finished": {
          "name": "products_finished",
          "shortDesc": "The number of products this machine finished crafting in its lifetime.",
          "desc": "The number of products this machine finished crafting in its lifetime. _Can only be used if this is CraftingMachine_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "spawner": {
          "name": "spawner",
          "shortDesc": "The spawner associated with this unit entity or `nil` if the unit has no associated spawner.",
          "desc": "The spawner associated with this unit entity or `nil` if the unit has no associated spawner.",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "units": {
          "name": "units",
          "shortDesc": "The units associated with this spawner entity.",
          "desc": "The units associated with this spawner entity.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "power_switch_state": {
          "name": "power_switch_state",
          "shortDesc": "The state of this power switch.",
          "desc": "The state of this power switch.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "effects": {
          "name": "effects",
          "shortDesc": "The effects being applied to this entity or `nil` .",
          "desc": "The effects being applied to this entity or `nil` . For beacons this is the effect the beacon is broadcasting.",
          "type": "Effects",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "infinity_container_filters": {
          "name": "infinity_container_filters",
          "shortDesc": "The filters for this infinity container.",
          "desc": "The filters for this infinity container. _Can only be used if this is InfinityContainer_",
          "type": {
            "value": [
              "InfinityInventoryFilter"
            ],
            "type": "Array"
          },
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "remove_unfiltered_items": {
          "name": "remove_unfiltered_items",
          "shortDesc": "If items not included in this infinity container filters should be removed from the container.",
          "desc": "If items not included in this infinity container filters should be removed from the container. _Can only be used if this is InfinityContainer_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_corpse_player_index": {
          "name": "character_corpse_player_index",
          "shortDesc": "The player index associated with this character corpse.",
          "desc": "The player index associated with this character corpse. **Note:** The index is not guaranteed to be valid so it should always be checked first if a player with that index actually exists. _Can only be used if this is CharacterCorpse_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_corpse_tick_of_death": {
          "name": "character_corpse_tick_of_death",
          "shortDesc": "The tick this character corpse died at.",
          "desc": "The tick this character corpse died at. _Can only be used if this is CharacterCorpse_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_corpse_death_cause": {
          "name": "character_corpse_death_cause",
          "shortDesc": "The reason this character corpse character died (if any).",
          "desc": "The reason this character corpse character died (if any). _Can only be used if this is CharacterCorpse_",
          "type": "LocalisedString",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "associated_player": {
          "name": "associated_player",
          "shortDesc": "The player this character is associated with or `nil` if none.",
          "desc": "The player this character is associated with or `nil` if none.\n When the player logs off in multiplayer all of the associated characters will be logged off with him. **Note:** A character associated with a player is not directly controlled by any player. **Note:** Set to `nil` to clear. The player will be automatically disassociated when a controller is set on the character. _Can only be used if this is Character_",
          "type": "LuaPlayer",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tick_of_last_attack": {
          "name": "tick_of_last_attack",
          "shortDesc": "The last tick this character entity was attacked.",
          "desc": "The last tick this character entity was attacked. _Can only be used if this is Character_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tick_of_last_damage": {
          "name": "tick_of_last_damage",
          "shortDesc": "The last tick this character entity was damaged.",
          "desc": "The last tick this character entity was damaged. _Can only be used if this is Character_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "splitter_filter": {
          "name": "splitter_filter",
          "shortDesc": "The filter for this splitter or `nil` if no filter is set.",
          "desc": "The filter for this splitter or `nil` if no filter is set. _Can only be used if this is Splitter_",
          "type": "LuaItemPrototype",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "inserter_filter_mode": {
          "name": "inserter_filter_mode",
          "shortDesc": "The filter mode for this filter inserter: \"whitelist\", \"blacklist\", or `nil` if this inserter doesn't use filters.",
          "desc": "The filter mode for this filter inserter: \"whitelist\", \"blacklist\", or `nil` if this inserter doesn't use filters. _Can only be used if this is Inserter_",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "splitter_input_priority": {
          "name": "splitter_input_priority",
          "shortDesc": "The input priority for this splitter : \"left\", \"none\", or \"right\".",
          "desc": "The input priority for this splitter : \"left\", \"none\", or \"right\". _Can only be used if this is Splitter_",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "splitter_output_priority": {
          "name": "splitter_output_priority",
          "shortDesc": "The output priority for this splitter : \"left\", \"none\", or \"right\".",
          "desc": "The output priority for this splitter : \"left\", \"none\", or \"right\". _Can only be used if this is Splitter_",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "armed": {
          "name": "armed",
          "shortDesc": "If this land mine is armed.",
          "desc": "If this land mine is armed. _Can only be used if this is LandMine_",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "recipe_locked": {
          "name": "recipe_locked",
          "shortDesc": "When locked; the recipe in this assembling machine can't be changed by the player.",
          "desc": "When locked; the recipe in this assembling machine can't be changed by the player. _Can only be used if this is AssemblingMachine_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "connected_rail": {
          "name": "connected_rail",
          "shortDesc": "The rail entity this train stop is connected to or `nil` if there is none.",
          "desc": "The rail entity this train stop is connected to or `nil` if there is none. _Can only be used if this is TrainStop_",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "trains_in_block": {
          "name": "trains_in_block",
          "shortDesc": "The number of trains in this rail block for this rail entity.",
          "desc": "The number of trains in this rail block for this rail entity. _Can only be used if this is Rail_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "timeout": {
          "name": "timeout",
          "shortDesc": "The timeout left on this landmine in ticks.",
          "desc": "The timeout left on this landmine in ticks. _Can only be used if this is LandMine_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "neighbour_bonus": {
          "name": "neighbour_bonus",
          "shortDesc": "The current total neighbour bonus of this reactor.",
          "desc": "The current total neighbour bonus of this reactor. _Can only be used if this is Reactor_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ai_settings": {
          "name": "ai_settings",
          "shortDesc": "The ai settings of this unit.",
          "desc": "The ai settings of this unit. _Can only be used if this is Unit_",
          "type": "LuaAISettings",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "highlight_box_type": {
          "name": "highlight_box_type",
          "shortDesc": "The hightlight box type of this highlight box entity.",
          "desc": "The hightlight box type of this highlight box entity. _Can only be used if this is HighlightBox_",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "highlight_box_blink_interval": {
          "name": "highlight_box_blink_interval",
          "shortDesc": "The blink interval of this highlight box entity.",
          "desc": "The blink interval of this highlight box entity.\n 0 indicates no blink. _Can only be used if this is HighlightBox_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "status": {
          "name": "status",
          "shortDesc": "The status of this entity or `nil` if no status.",
          "desc": "The status of this entity or `nil` if no status.",
          "type": "defines.entity_status",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "enable_logistics_while_moving": {
          "name": "enable_logistics_while_moving",
          "shortDesc": "If equipment grid logistics are enabled while this vehicle is moving.",
          "desc": "If equipment grid logistics are enabled while this vehicle is moving. _Can only be used if this is Vehicle_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "render_player": {
          "name": "render_player",
          "shortDesc": "The player that this simple-entity-with-owner, simple-entity-with-force, flying-text or highlight-box is visible to or `nil` .",
          "desc": "The player that this simple-entity-with-owner, simple-entity-with-force, flying-text or highlight-box is visible to or `nil` . Set to `nil` to clear.",
          "type": "LuaPlayer",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "render_to_forces": {
          "name": "render_to_forces",
          "shortDesc": "The forces that this simple-entity-with-owner, simple-entity-with-force or flying-text is visible to or `nil` .",
          "desc": "The forces that this simple-entity-with-owner, simple-entity-with-force or flying-text is visible to or `nil` . Set to `nil` to clear. **Note:** Reading will always give an array of [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html)",
          "type": {
            "value": [
              "ForceSpecification"
            ],
            "type": "Array"
          },
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "pump_rail_target": {
          "name": "pump_rail_target",
          "shortDesc": "The rail target of this pump or `nil` .",
          "desc": "The rail target of this pump or `nil` . _Can only be used if this is Pump_",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "moving": {
          "name": "moving",
          "shortDesc": "Returns true if this unit is moving.",
          "desc": "Returns true if this unit is moving. _Can only be used if this is Unit_",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "electric_network_id": {
          "name": "electric_network_id",
          "shortDesc": "Returns the id of the electric network that this entity is connected to or `nil` .",
          "desc": "Returns the id of the electric network that this entity is connected to or `nil` .",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allow_dispatching_robots": {
          "name": "allow_dispatching_robots",
          "shortDesc": "Whether this character's personal roboports are allowed to dispatch robots.",
          "desc": "Whether this character's personal roboports are allowed to dispatch robots. _Can only be used if this is Character_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "auto_launch": {
          "name": "auto_launch",
          "shortDesc": "Whether this rocket silo automatically launches the rocket when cargo is inserted.",
          "desc": "Whether this rocket silo automatically launches the rocket when cargo is inserted. _Can only be used if this is RocketSilo_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "energy_generated_last_tick": {
          "name": "energy_generated_last_tick",
          "shortDesc": "How much energy this generator generated in the last tick.",
          "desc": "How much energy this generator generated in the last tick. _Can only be used if this is Generator_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "storage_filter": {
          "name": "storage_filter",
          "shortDesc": "The storage filter for this logistic storage container.",
          "desc": "The storage filter for this logistic storage container.",
          "type": "LuaItemPrototype",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "request_from_buffers": {
          "name": "request_from_buffers",
          "shortDesc": "Whether this requester chest is set to also request from buffer chests.",
          "desc": "Whether this requester chest is set to also request from buffer chests. **Note:** Useable only on entities that have requester slots.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "corpse_expires": {
          "name": "corpse_expires",
          "shortDesc": "Whether this corpse will ever fade away.",
          "desc": "Whether this corpse will ever fade away. **Note:** Useable only on corpses.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "corpse_immune_to_entity_placement": {
          "name": "corpse_immune_to_entity_placement",
          "shortDesc": "If true, corpse won't be destroyed when entities are placed over it.",
          "desc": "If true, corpse won't be destroyed when entities are placed over it.\n If false, whether corpse will be removed or not depends on value of CorpsePrototype::remove_on_entity_placement. **Note:** Useable only on corpses.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tags": {
          "name": "tags",
          "shortDesc": "The tags associated with this entity ghost or `nil` if not an entity ghost.",
          "desc": "The tags associated with this entity ghost or `nil` if not an entity ghost.",
          "type": "Tags",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "command": {
          "name": "command",
          "shortDesc": "The command given to this unit or `nil` is the unit has no command.",
          "desc": "The command given to this unit or `nil` is the unit has no command. _Can only be used if this is Unit_",
          "type": "Command",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "distraction_command": {
          "name": "distraction_command",
          "shortDesc": "The distraction command given to this unit or `nil` is the unit currently isn't distracted.",
          "desc": "The distraction command given to this unit or `nil` is the unit currently isn't distracted. _Can only be used if this is Unit_",
          "type": "Command",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "time_to_next_effect": {
          "name": "time_to_next_effect",
          "shortDesc": "The ticks until the next trigger effect of this smoke-with-trigger.",
          "desc": "The ticks until the next trigger effect of this smoke-with-trigger. _Can only be used if this is SmokeWithTrigger_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "autopilot_destination": {
          "name": "autopilot_destination",
          "shortDesc": "Destination position of spidertron's autopilot.",
          "desc": "Destination position of spidertron's autopilot. Returns `nil` if autopilot doesn't have destination set. _Can only be used if this is SpiderVehicle_",
          "type": "Position",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "autopilot_destinations": {
          "name": "autopilot_destinations",
          "shortDesc": "The queued destination positions of spidertron's autopilot.",
          "desc": "The queued destination positions of spidertron's autopilot. _Can only be used if this is SpiderVehicle_",
          "type": {
            "value": [
              "Position"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "trains_count": {
          "name": "trains_count",
          "shortDesc": "Amount of trains related to this particular train stop.",
          "desc": "Amount of trains related to this particular train stop. Includes train stopped at this train stop (until it\n  finds a path to next target) and trains having this train stop as goal or waypoint.\n Writing nil will disable the limit (will set a maximum possible value). **Note:** Train may be included multiple times when braking distance covers this train stop multiple times **Note:** Value may be read even when train stop has no control behavior _Can only be used if this is TrainStop_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "trains_limit": {
          "name": "trains_limit",
          "shortDesc": "Amount of trains above which no new trains will be sent to this train stop.",
          "desc": "Amount of trains above which no new trains will be sent to this train stop. **Note:** When a train stop has a control behavior with wire connected and set_trains_limit enabled,\n       this value will be overwritten by it _Can only be used if this is TrainStop_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "is_entity_with_force": {
          "name": "is_entity_with_force",
          "shortDesc": "If this entity is EntityWithForce",
          "desc": "If this entity is EntityWithForce",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_entity_with_owner": {
          "name": "is_entity_with_owner",
          "shortDesc": "If this entity is EntityWithOwner",
          "desc": "If this entity is EntityWithOwner",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_entity_with_health": {
          "name": "is_entity_with_health",
          "shortDesc": "If this entity is EntityWithHealth",
          "desc": "If this entity is EntityWithHealth",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "combat_robot_owner": {
          "name": "combat_robot_owner",
          "shortDesc": "The owner of this combat robot if any.",
          "desc": "The owner of this combat robot if any.",
          "type": "LuaEntity",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "link_id": {
          "name": "link_id",
          "shortDesc": "The link ID this linked container is using.",
          "desc": "The link ID this linked container is using.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "follow_target": {
          "name": "follow_target",
          "shortDesc": "The follow target of this spidertron if any.",
          "desc": "The follow target of this spidertron if any. _Can only be used if this is SpiderVehicle_",
          "type": "LuaEntity",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "follow_offset": {
          "name": "follow_offset",
          "shortDesc": "The follow offset of this spidertron if any.",
          "desc": "The follow offset of this spidertron if any. If it is not following an entity this will be nil.\n This is randomized each time the follow entity is set. _Can only be used if this is SpiderVehicle_",
          "type": "Position",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "linked_belt_type": {
          "name": "linked_belt_type",
          "shortDesc": "Type of linked belt: it is either `\"input\"` or `\"output\"` .",
          "desc": "Type of linked belt: it is either `\"input\"` or `\"output\"` . Changing type will also flip direction so the belt is out of the same side **Note:** Can only be changed when linked belt is disconnected (has no neighbour set) **Note:** Can also be used on entity ghost if it contains linked-belt _Can only be used if this is LinkedBelt_",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "linked_belt_neighbour": {
          "name": "linked_belt_neighbour",
          "shortDesc": "Neighbour to which this linked belt is connected to.",
          "desc": "Neighbour to which this linked belt is connected to. Returns nil if not connected. **Note:** Can also be used on entity ghost if it contains linked-belt **Note:** May return entity ghost which contains linked belt to which connection is made _Can only be used if this is LinkedBelt_",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControl",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaEntityPrototype": {
      "name": "LuaEntityPrototype",
      "desc": "Prototype of an entity.",
      "url": "LuaEntityPrototype.html",
      "attributes": {
        "has_flag": {
          "name": "has_flag",
          "shortDesc": "Does this prototype have a flag enabled?",
          "desc": "Does this prototype have a flag enabled?",
          "parameters": {
            "flag": {
              "name": "flag",
              "desc": "The flag to check. Must be one of `\"not-rotatable\"` `\"placeable-neutral\"` `\"placeable-player\"` `\"placeable-enemy\"` `\"placeable-off-grid\"` `\"player-creation\"` `\"building-direction-8-way\"` `\"filter-directions\"` `\"fast-replaceable-no-build-while-moving\"` `\"breaths-air\"` `\"not-repairable\"` `\"not-on-map\"` `\"not-deconstructable\"` `\"not-blueprintable\"` `\"hide-from-bonus-gui\"` `\"hide-alt-info\"` `\"fast-replaceable-no-cross-type-while-moving\"` `\"no-gap-fill-while-building\"` `\"not-flammable\"` `\"no-automated-item-removal\"` `\"no-automated-item-insertion\"` `\"not-upgradable\"`",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_inventory_size": {
          "name": "get_inventory_size",
          "shortDesc": "Gets the base size of the given inventory on this entity or `nil` if the given inventory doesn't exist.",
          "desc": "Gets the base size of the given inventory on this entity or `nil` if the given inventory doesn't exist.",
          "parameters": {
            "index": {
              "name": "index",
              "type": "defines.inventory",
              "optional": false
            }
          },
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "type": {
          "name": "type",
          "shortDesc": "Type of this prototype.",
          "desc": "Type of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_health": {
          "name": "max_health",
          "shortDesc": "Max health of this entity.",
          "desc": "Max health of this entity. Will be `0` if this is not an entity with health.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "infinite_resource": {
          "name": "infinite_resource",
          "shortDesc": "Is this resource infinite?",
          "desc": "Is this resource infinite? Will be `nil` when used on a non-resource.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "minimum_resource_amount": {
          "name": "minimum_resource_amount",
          "shortDesc": "Minimum amount of this resource.",
          "desc": "Minimum amount of this resource. Will be `nil` when used on a non-resource.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "normal_resource_amount": {
          "name": "normal_resource_amount",
          "shortDesc": "The normal amount for this resource.",
          "desc": "The normal amount for this resource. `nil` when not a resource.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "infinite_depletion_resource_amount": {
          "name": "infinite_depletion_resource_amount",
          "shortDesc": "Every time this infinite resource 'ticks' down it is reduced by this amount.",
          "desc": "Every time this infinite resource 'ticks' down it is reduced by this amount. `nil` when not a resource. Meaningless if this isn't an infinite type resource.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "resource_category": {
          "name": "resource_category",
          "shortDesc": "Name of the category of this resource or `nil` when not a resource.",
          "desc": "Name of the category of this resource or `nil` when not a resource. **Note:** During data stage this property is named \"category\".",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mineable_properties": {
          "name": "mineable_properties",
          "shortDesc": "Whether this entity is minable and what can be obtained by mining it.",
          "desc": "Whether this entity is minable and what can be obtained by mining it. Table with the following fields: * minable :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  Is this entity mineable at all?\n  * mining_time :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Energy required to mine an entity.\n  * mining_particle :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the particle produced when mining this entity.\n     Will only be present if this entity produces any particle during mining.\n  * products :: array of [Product](https://lua-api.factorio.com/latest/Concepts.html#Product) (optional) :  Products obtained by mining this entity.\n  * fluid_amount :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The required fluid amount if any.\n  * required_fluid :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The prototype name of the required fluid if any.\n  * mining_trigger :: [Trigger](https://lua-api.factorio.com/latest/Concepts.html#Trigger) (optional) :  The mining trigger if any.",
          "type": "table",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "items_to_place_this": {
          "name": "items_to_place_this",
          "shortDesc": "Items that when placed will produce this entity.",
          "desc": "Items that when placed will produce this entity. It is an array of items or `nil` for no items.",
          "type": {
            "value": [
              "SimpleItemStack"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "collision_box": {
          "name": "collision_box",
          "shortDesc": "The bounding box used for collision checking.",
          "desc": "The bounding box used for collision checking.",
          "type": "BoundingBox",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "secondary_collision_box": {
          "name": "secondary_collision_box",
          "shortDesc": "The secondary bounding box used for collision checking, or `nil` if it doesn't have one.",
          "desc": "The secondary bounding box used for collision checking, or `nil` if it doesn't have one. This is only used in rails and rail remnants.",
          "type": "BoundingBox",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "map_generator_bounding_box": {
          "name": "map_generator_bounding_box",
          "shortDesc": "The bounding box used for map generator collision checking.",
          "desc": "The bounding box used for map generator collision checking.",
          "type": "BoundingBox",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "selection_box": {
          "name": "selection_box",
          "shortDesc": "The bounding box used for drawing selection.",
          "desc": "The bounding box used for drawing selection.",
          "type": "BoundingBox",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "drawing_box": {
          "name": "drawing_box",
          "shortDesc": "The bounding box used for drawing the entity icon.",
          "desc": "The bounding box used for drawing the entity icon.",
          "type": "BoundingBox",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "sticker_box": {
          "name": "sticker_box",
          "shortDesc": "The bounding box used to attach sticker type entities.",
          "desc": "The bounding box used to attach sticker type entities.",
          "type": "BoundingBox",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "collision_mask": {
          "name": "collision_mask",
          "shortDesc": "The collision masks this entity uses",
          "desc": "The collision masks this entity uses",
          "type": "CollisionMask",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "collision_mask_with_flags": {
          "name": "collision_mask_with_flags",
          "shortDesc": "",
          "type": "CollisionMaskWithFlags",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "default_collision_mask_with_flags": {
          "name": "default_collision_mask_with_flags",
          "shortDesc": "The hardcoded default collision mask (with flags) for this entity prototype type.",
          "desc": "The hardcoded default collision mask (with flags) for this entity prototype type.",
          "type": "CollisionMaskWithFlags",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "group": {
          "name": "group",
          "shortDesc": "Group of this entity.",
          "desc": "Group of this entity.",
          "type": "LuaGroup",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "subgroup": {
          "name": "subgroup",
          "shortDesc": "Subgroup of this entity.",
          "desc": "Subgroup of this entity.",
          "type": "LuaGroup",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "healing_per_tick": {
          "name": "healing_per_tick",
          "shortDesc": "Amount this entity can heal per tick.",
          "desc": "Amount this entity can heal per tick.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "emissions_per_second": {
          "name": "emissions_per_second",
          "shortDesc": "Amount of pollution emissions per second this entity will create.",
          "desc": "Amount of pollution emissions per second this entity will create.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "corpses": {
          "name": "corpses",
          "shortDesc": "Corpses used when this entity is destroyed.",
          "desc": "Corpses used when this entity is destroyed. It is a dictionary indexed by the corpse's prototype\n name.",
          "type": {
            "value": [
              "string",
              "LuaEntityPrototype"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "selectable_in_game": {
          "name": "selectable_in_game",
          "shortDesc": "Is this entity selectable?",
          "desc": "Is this entity selectable?",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "selection_priority": {
          "name": "selection_priority",
          "shortDesc": "The selection priority of this entity - a value between 0 and 255",
          "desc": "The selection priority of this entity - a value between 0 and 255",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "weight": {
          "name": "weight",
          "shortDesc": "The weight of this vehicle prototype or `nil` if not a vehicle prototype.",
          "desc": "The weight of this vehicle prototype or `nil` if not a vehicle prototype.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "resistances": {
          "name": "resistances",
          "shortDesc": "",
          "type": "Resistances",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fast_replaceable_group": {
          "name": "fast_replaceable_group",
          "shortDesc": "The group of mutually fast-replaceable entities.",
          "desc": "The group of mutually fast-replaceable entities. Possibly `nil` .",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "next_upgrade": {
          "name": "next_upgrade",
          "shortDesc": "The next upgrade for this entity or `nil` .",
          "desc": "The next upgrade for this entity or `nil` .",
          "type": "LuaEntityPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "loot": {
          "name": "loot",
          "shortDesc": "Loot that will be dropped when this entity is killed.",
          "desc": "Loot that will be dropped when this entity is killed. `nil` if there is no loot.",
          "type": "Loot",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "repair_speed_modifier": {
          "name": "repair_speed_modifier",
          "shortDesc": "Repair-speed modifier for this entity.",
          "desc": "Repair-speed modifier for this entity. Actual repair speed will be `tool_repair_speed * entity_repair_speed_modifier` . May be `nil` .",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "turret_range": {
          "name": "turret_range",
          "shortDesc": "The range of this turret or `nil` if this isn't a turret related prototype.",
          "desc": "The range of this turret or `nil` if this isn't a turret related prototype.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "autoplace_specification": {
          "name": "autoplace_specification",
          "shortDesc": "Autoplace specification for this entity prototype.",
          "desc": "Autoplace specification for this entity prototype. `nil` if none.",
          "type": "AutoplaceSpecification",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "belt_speed": {
          "name": "belt_speed",
          "shortDesc": "The speed of this transport belt or `nil` if this isn't a transport belt related prototype.",
          "desc": "The speed of this transport belt or `nil` if this isn't a transport belt related prototype.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "result_units": {
          "name": "result_units",
          "shortDesc": "The result units and spawn points with weight and evolution factor for a biter spawner entity.",
          "desc": "The result units and spawn points with weight and evolution factor for a biter spawner entity. Each UnitSpawnDefinition is a table: * unit :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the unit that would be spawned\n  * spawn_points :: array of SpawnPoint :  Each SpawnPoint is a table: + evolution_factor :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Evolution factor for which this weight applies.\n    + weight :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Probability of spawning this unit at this evolution factor.",
          "type": {
            "value": [
              "UnitSpawnDefinition"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "attack_result": {
          "name": "attack_result",
          "shortDesc": "The attack result of this entity if the entity has one, else `nil` .",
          "desc": "The attack result of this entity if the entity has one, else `nil` .",
          "type": "Trigger",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "final_attack_result": {
          "name": "final_attack_result",
          "shortDesc": "The final attack result for projectiles `nil` if not a projectile",
          "desc": "The final attack result for projectiles `nil` if not a projectile",
          "type": "Trigger",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "attack_parameters": {
          "name": "attack_parameters",
          "shortDesc": "The attack parameters for this entity or `nil` if the entity doesn't use attack parameters.",
          "desc": "The attack parameters for this entity or `nil` if the entity doesn't use attack parameters.",
          "type": "AttackParameters",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "spawn_cooldown": {
          "name": "spawn_cooldown",
          "shortDesc": "The spawning cooldown for this enemy spawner prototype or `nil` .",
          "desc": "The spawning cooldown for this enemy spawner prototype or `nil` .\n It is a table: * min :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)\n  * max :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)",
          "type": "table",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mining_drill_radius": {
          "name": "mining_drill_radius",
          "shortDesc": "The mining radius of this mining drill prototype or `nil` if this isn't a mining drill prototype.",
          "desc": "The mining radius of this mining drill prototype or `nil` if this isn't a mining drill prototype.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mining_speed": {
          "name": "mining_speed",
          "shortDesc": "The mining speed of this mining drill/character prototype or `nil` .",
          "desc": "The mining speed of this mining drill/character prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "logistic_mode": {
          "name": "logistic_mode",
          "shortDesc": "The logistic mode of this logistic container or `nil` if this isn't a logistic container prototype.",
          "desc": "The logistic mode of this logistic container or `nil` if this isn't a logistic container prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_underground_distance": {
          "name": "max_underground_distance",
          "shortDesc": "The max underground distance for underground belts and underground pipes or `nil` if this isn't one of those prototypes.",
          "desc": "The max underground distance for underground belts and underground pipes or `nil` if this isn't one of those prototypes.",
          "type": "uint8",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "flags": {
          "name": "flags",
          "shortDesc": "The entity prototype flags for this entity.",
          "desc": "The entity prototype flags for this entity.",
          "type": "EntityPrototypeFlags",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "remains_when_mined": {
          "name": "remains_when_mined",
          "shortDesc": "The remains left behind when this entity is mined.",
          "desc": "The remains left behind when this entity is mined.",
          "type": {
            "value": [
              "LuaEntityPrototype"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "additional_pastable_entities": {
          "name": "additional_pastable_entities",
          "shortDesc": "Entities this entity can be pasted onto in addition to the normal allowed ones.",
          "desc": "Entities this entity can be pasted onto in addition to the normal allowed ones.",
          "type": {
            "value": [
              "LuaEntityPrototype"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allow_copy_paste": {
          "name": "allow_copy_paste",
          "shortDesc": "When false copy-paste is not allowed for this entity.",
          "desc": "When false copy-paste is not allowed for this entity.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "shooting_cursor_size": {
          "name": "shooting_cursor_size",
          "shortDesc": "The cursor size used when shooting at this entity.",
          "desc": "The cursor size used when shooting at this entity.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "created_smoke": {
          "name": "created_smoke",
          "shortDesc": "The smoke trigger run when this entity is built or `nil` .",
          "desc": "The smoke trigger run when this entity is built or `nil` . It is a table:",
          "type": "table",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "created_effect": {
          "name": "created_effect",
          "shortDesc": "The trigger run when this entity is created or `nil` .",
          "desc": "The trigger run when this entity is created or `nil` .",
          "type": "Trigger",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "map_color": {
          "name": "map_color",
          "shortDesc": "The map color used when charting this entity if a friendly or enemy color isn't defined or `nil` .",
          "desc": "The map color used when charting this entity if a friendly or enemy color isn't defined or `nil` .",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "friendly_map_color": {
          "name": "friendly_map_color",
          "shortDesc": "The friendly map color used when charting this entity.",
          "desc": "The friendly map color used when charting this entity.",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "enemy_map_color": {
          "name": "enemy_map_color",
          "shortDesc": "The enemy map color used when charting this entity.",
          "desc": "The enemy map color used when charting this entity.",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "build_base_evolution_requirement": {
          "name": "build_base_evolution_requirement",
          "shortDesc": "The evolution requirement to build this entity as a base when expanding enemy bases.",
          "desc": "The evolution requirement to build this entity as a base when expanding enemy bases.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "instruments": {
          "name": "instruments",
          "shortDesc": "The instruments for this programmable speaker or `nil` .",
          "desc": "The instruments for this programmable speaker or `nil` .",
          "type": {
            "value": [
              "ProgrammableSpeakerInstrument"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_polyphony": {
          "name": "max_polyphony",
          "shortDesc": "The maximum polyphony for this programmable speaker or `nil` .",
          "desc": "The maximum polyphony for this programmable speaker or `nil` .",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "module_inventory_size": {
          "name": "module_inventory_size",
          "shortDesc": "The module inventory size or `nil` if this entity doesn't support modules.",
          "desc": "The module inventory size or `nil` if this entity doesn't support modules.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ingredient_count": {
          "name": "ingredient_count",
          "shortDesc": "The max number of ingredients this crafting-machine prototype supports or `nil` if this isn't a crafting-machine prototype.",
          "desc": "The max number of ingredients this crafting-machine prototype supports or `nil` if this isn't a crafting-machine prototype.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "crafting_speed": {
          "name": "crafting_speed",
          "shortDesc": "The crafting speed of this crafting-machine or `nil` .",
          "desc": "The crafting speed of this crafting-machine or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "crafting_categories": {
          "name": "crafting_categories",
          "shortDesc": "The crafting categories this entity supports.",
          "desc": "The crafting categories this entity supports. Only meaningful when this is a crafting-machine or player entity type. **Note:** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup.",
          "type": {
            "value": [
              "string",
              "boolean"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "resource_categories": {
          "name": "resource_categories",
          "shortDesc": "The resource categories this mining drill supports or `nil` if not a mining dill.",
          "desc": "The resource categories this mining drill supports or `nil` if not a mining dill. **Note:** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup.",
          "type": {
            "value": [
              "string",
              "boolean"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "supply_area_distance": {
          "name": "supply_area_distance",
          "shortDesc": "The supply area of this electric pole, beacon, or `nil` if this is neither.",
          "desc": "The supply area of this electric pole, beacon, or `nil` if this is neither.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_wire_distance": {
          "name": "max_wire_distance",
          "shortDesc": "The maximum wire distance for this entity.",
          "desc": "The maximum wire distance for this entity. 0 when the entity doesn't support wires.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_circuit_wire_distance": {
          "name": "max_circuit_wire_distance",
          "shortDesc": "The maximum circuit wire distance for this entity.",
          "desc": "The maximum circuit wire distance for this entity. 0 when the entity doesn't support circuit wires.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "energy_usage": {
          "name": "energy_usage",
          "shortDesc": "The direct energy usage of this entity or `nil` if this entity doesn't have a direct energy usage.",
          "desc": "The direct energy usage of this entity or `nil` if this entity doesn't have a direct energy usage.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_energy_usage": {
          "name": "max_energy_usage",
          "shortDesc": "The theoretical maximum energy usage for this entity.",
          "desc": "The theoretical maximum energy usage for this entity.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_energy_production": {
          "name": "max_energy_production",
          "shortDesc": "The theoretical maximum energy production for this this entity.",
          "desc": "The theoretical maximum energy production for this this entity.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "effectivity": {
          "name": "effectivity",
          "shortDesc": "The effectivity of this car prototype, generator prototype or `nil` .",
          "desc": "The effectivity of this car prototype, generator prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "consumption": {
          "name": "consumption",
          "shortDesc": "The energy consumption of this car prototype or `nil` if not a car prototype.",
          "desc": "The energy consumption of this car prototype or `nil` if not a car prototype.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "friction_force": {
          "name": "friction_force",
          "shortDesc": "The friction of this vehicle prototype or `nil` if not a vehicle prototype.",
          "desc": "The friction of this vehicle prototype or `nil` if not a vehicle prototype.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "braking_force": {
          "name": "braking_force",
          "shortDesc": "The braking force of this vehicle prototype or `nil` if not a vehicle prototype.",
          "desc": "The braking force of this vehicle prototype or `nil` if not a vehicle prototype.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tank_driving": {
          "name": "tank_driving",
          "shortDesc": "If this car prototype uses tank controls to drive or `nil` if this is not a car prototype.",
          "desc": "If this car prototype uses tank controls to drive or `nil` if this is not a car prototype.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "rotation_speed": {
          "name": "rotation_speed",
          "shortDesc": "The rotation speed of this car prototype or `nil` if not a car prototype.",
          "desc": "The rotation speed of this car prototype or `nil` if not a car prototype.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "turret_rotation_speed": {
          "name": "turret_rotation_speed",
          "shortDesc": "The turret rotation speed of this car prototype or `nil` if not a car prototype.",
          "desc": "The turret rotation speed of this car prototype or `nil` if not a car prototype.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "guns": {
          "name": "guns",
          "shortDesc": "The guns this prototype uses or `nil` .",
          "desc": "The guns this prototype uses or `nil` .",
          "type": {
            "value": [
              "string",
              "LuaItemPrototype"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "speed": {
          "name": "speed",
          "shortDesc": "The default speed of this flying robot, rolling stock, unit or `nil` .",
          "desc": "The default speed of this flying robot, rolling stock, unit or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "speed_multiplier_when_out_of_energy": {
          "name": "speed_multiplier_when_out_of_energy",
          "shortDesc": "The speed multiplier when this flying robot is out of energy or `nil` .",
          "desc": "The speed multiplier when this flying robot is out of energy or `nil` .",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_payload_size": {
          "name": "max_payload_size",
          "shortDesc": "The max payload size of this logistics or construction robot or `nil` .",
          "desc": "The max payload size of this logistics or construction robot or `nil` .",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "draw_cargo": {
          "name": "draw_cargo",
          "shortDesc": "Whether this logistics or construction robot renders its cargo when flying or `nil` .",
          "desc": "Whether this logistics or construction robot renders its cargo when flying or `nil` .",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "energy_per_move": {
          "name": "energy_per_move",
          "shortDesc": "The energy consumed per tile moved for this flying robot or `nil` .",
          "desc": "The energy consumed per tile moved for this flying robot or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "energy_per_tick": {
          "name": "energy_per_tick",
          "shortDesc": "The energy consumed per tick for this flying robot or `nil` .",
          "desc": "The energy consumed per tick for this flying robot or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_energy": {
          "name": "max_energy",
          "shortDesc": "The max energy for this flying robot or `nil` .",
          "desc": "The max energy for this flying robot or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "min_to_charge": {
          "name": "min_to_charge",
          "shortDesc": "The minimum energy for this flying robot before it tries to recharge or `nil` .",
          "desc": "The minimum energy for this flying robot before it tries to recharge or `nil` .",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_to_charge": {
          "name": "max_to_charge",
          "shortDesc": "The maximum energy for this flying robot above which it won't try to recharge when stationing or `nil` .",
          "desc": "The maximum energy for this flying robot above which it won't try to recharge when stationing or `nil` .",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "burner_prototype": {
          "name": "burner_prototype",
          "shortDesc": "The burner energy source prototype this entity uses or `nil` .",
          "desc": "The burner energy source prototype this entity uses or `nil` .",
          "type": "LuaBurnerPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "electric_energy_source_prototype": {
          "name": "electric_energy_source_prototype",
          "shortDesc": "The electric energy source prototype this entity uses or `nil` .",
          "desc": "The electric energy source prototype this entity uses or `nil` .",
          "type": "LuaElectricEnergySourcePrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "heat_energy_source_prototype": {
          "name": "heat_energy_source_prototype",
          "shortDesc": "The heat energy source prototype this entity uses or `nil` .",
          "desc": "The heat energy source prototype this entity uses or `nil` .",
          "type": "LuaHeatEnergySourcePrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fluid_energy_source_prototype": {
          "name": "fluid_energy_source_prototype",
          "shortDesc": "The fluid energy source prototype this entity uses or `nil` .",
          "desc": "The fluid energy source prototype this entity uses or `nil` .",
          "type": "LuaFluidEnergySourcePrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "void_energy_source_prototype": {
          "name": "void_energy_source_prototype",
          "shortDesc": "The void energy source prototype this entity uses or `nil` .",
          "desc": "The void energy source prototype this entity uses or `nil` .",
          "type": "LuaVoidEnergySourcePrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "building_grid_bit_shift": {
          "name": "building_grid_bit_shift",
          "shortDesc": "The log2 of grid size of the building",
          "desc": "The log2 of grid size of the building",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fluid_usage_per_tick": {
          "name": "fluid_usage_per_tick",
          "shortDesc": "The fluid usage of this generator prototype or `nil` .",
          "desc": "The fluid usage of this generator prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "maximum_temperature": {
          "name": "maximum_temperature",
          "shortDesc": "The maximum fluid temperature of this generator prototype or `nil` .",
          "desc": "The maximum fluid temperature of this generator prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "target_temperature": {
          "name": "target_temperature",
          "shortDesc": "The target temperature of this boiler prototype or `nil` .",
          "desc": "The target temperature of this boiler prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fluid": {
          "name": "fluid",
          "shortDesc": "The fluid this offshore pump produces or `nil` .",
          "desc": "The fluid this offshore pump produces or `nil` .",
          "type": "LuaFluidPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fluid_capacity": {
          "name": "fluid_capacity",
          "shortDesc": "The fluid capacity of this entity or 0 if this entity doesn't support fluids.",
          "desc": "The fluid capacity of this entity or 0 if this entity doesn't support fluids. **Note:** Crafting machines will report 0 due to their fluid capacity being what ever a given recipe needs.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "pumping_speed": {
          "name": "pumping_speed",
          "shortDesc": "The pumping speed of this offshore pump, normal pump, or `nil` .",
          "desc": "The pumping speed of this offshore pump, normal pump, or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "stack": {
          "name": "stack",
          "shortDesc": "If this inserter is a stack-type.",
          "desc": "If this inserter is a stack-type.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allow_custom_vectors": {
          "name": "allow_custom_vectors",
          "shortDesc": "If this inserter allows custom pickup and drop vectors.",
          "desc": "If this inserter allows custom pickup and drop vectors.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allow_burner_leech": {
          "name": "allow_burner_leech",
          "shortDesc": "If this inserter allows burner leeching.",
          "desc": "If this inserter allows burner leeching.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "inserter_extension_speed": {
          "name": "inserter_extension_speed",
          "shortDesc": "The extension speed of this inserter or `nil` .",
          "desc": "The extension speed of this inserter or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "inserter_rotation_speed": {
          "name": "inserter_rotation_speed",
          "shortDesc": "The rotation speed of this inserter or `nil` .",
          "desc": "The rotation speed of this inserter or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "inserter_pickup_position": {
          "name": "inserter_pickup_position",
          "shortDesc": "The pickup position for this inserter or `nil` .",
          "desc": "The pickup position for this inserter or `nil` .",
          "type": "Vector",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "inserter_drop_position": {
          "name": "inserter_drop_position",
          "shortDesc": "The drop position for this inserter or `nil` .",
          "desc": "The drop position for this inserter or `nil` .",
          "type": "Vector",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "inserter_chases_belt_items": {
          "name": "inserter_chases_belt_items",
          "shortDesc": "True if this inserter chases items on belts for pickup or `nil` .",
          "desc": "True if this inserter chases items on belts for pickup or `nil` .",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "count_as_rock_for_filtered_deconstruction": {
          "name": "count_as_rock_for_filtered_deconstruction",
          "shortDesc": "If this simple-entity is counted as a rock for the deconstruction planner \"trees and rocks only\" filter.",
          "desc": "If this simple-entity is counted as a rock for the deconstruction planner \"trees and rocks only\" filter.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "filter_count": {
          "name": "filter_count",
          "shortDesc": "The filter count of this inserter, loader, or logistic chest or `nil` .",
          "desc": "The filter count of this inserter, loader, or logistic chest or `nil` .\n For logistic containers, `nil` means no limit.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "time_to_live": {
          "name": "time_to_live",
          "shortDesc": "The time to live for this prototype or `0` if prototype doesn't have time_to_live or time_before_removed.",
          "desc": "The time to live for this prototype or `0` if prototype doesn't have time_to_live or time_before_removed.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "distribution_effectivity": {
          "name": "distribution_effectivity",
          "shortDesc": "The distribution effectivity for this beacon prototype or `nil` if not a beacon prototype.",
          "desc": "The distribution effectivity for this beacon prototype or `nil` if not a beacon prototype.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "explosion_beam": {
          "name": "explosion_beam",
          "shortDesc": "Does this explosion have a beam or `nil` if not an explosion prototype.",
          "desc": "Does this explosion have a beam or `nil` if not an explosion prototype.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "explosion_rotate": {
          "name": "explosion_rotate",
          "shortDesc": "Does this explosion rotate or `nil` if not an explosion prototype.",
          "desc": "Does this explosion rotate or `nil` if not an explosion prototype.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tree_color_count": {
          "name": "tree_color_count",
          "shortDesc": "If it is a tree, return the number of colors it supports.",
          "desc": "If it is a tree, return the number of colors it supports. `nil` otherwise.",
          "type": "uint8",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "alert_when_damaged": {
          "name": "alert_when_damaged",
          "shortDesc": "Does this entity with health prototype alert when damaged?",
          "desc": "Does this entity with health prototype alert when damaged? or `nil` if not entity with health prototype.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "alert_when_attacking": {
          "name": "alert_when_attacking",
          "shortDesc": "Does this turret prototype alert when attacking?",
          "desc": "Does this turret prototype alert when attacking? or `nil` if not turret prototype.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "color": {
          "name": "color",
          "shortDesc": "The color of the prototype, or `nil` if the prototype doesn't have color.",
          "desc": "The color of the prototype, or `nil` if the prototype doesn't have color.",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "collision_mask_collides_with_self": {
          "name": "collision_mask_collides_with_self",
          "shortDesc": "Does this prototype collision mask collide with itself?",
          "desc": "Does this prototype collision mask collide with itself?",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "collision_mask_collides_with_tiles_only": {
          "name": "collision_mask_collides_with_tiles_only",
          "shortDesc": "Does this prototype collision mask collide with tiles only?",
          "desc": "Does this prototype collision mask collide with tiles only?",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "collision_mask_considers_tile_transitions": {
          "name": "collision_mask_considers_tile_transitions",
          "shortDesc": "Does this prototype collision mask consider tile transitions?",
          "desc": "Does this prototype collision mask consider tile transitions?",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allowed_effects": {
          "name": "allowed_effects",
          "shortDesc": "The allowed module effects for this entity or `nil` .",
          "desc": "The allowed module effects for this entity or `nil` .",
          "type": {
            "value": [
              "string",
              "boolean"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "rocket_parts_required": {
          "name": "rocket_parts_required",
          "shortDesc": "The rocket parts required for this rocket silo prototype or `nil` .",
          "desc": "The rocket parts required for this rocket silo prototype or `nil` .",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "rocket_rising_delay": {
          "name": "rocket_rising_delay",
          "shortDesc": "The rocket rising delay for this rocket silo prototype or `nil` .",
          "desc": "The rocket rising delay for this rocket silo prototype or `nil` .",
          "type": "uint8",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "launch_wait_time": {
          "name": "launch_wait_time",
          "shortDesc": "The rocket launch delay for this rocket silo prototype or `nil` .",
          "desc": "The rocket launch delay for this rocket silo prototype or `nil` .",
          "type": "uint8",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "light_blinking_speed": {
          "name": "light_blinking_speed",
          "shortDesc": "The light blinking speed for this rocket silo prototype or `nil` .",
          "desc": "The light blinking speed for this rocket silo prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "door_opening_speed": {
          "name": "door_opening_speed",
          "shortDesc": "The door opening speed for this rocket silo prototype or `nil` .",
          "desc": "The door opening speed for this rocket silo prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "rising_speed": {
          "name": "rising_speed",
          "shortDesc": "The rising speed for this rocket silo rocket prototype or `nil` .",
          "desc": "The rising speed for this rocket silo rocket prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "engine_starting_speed": {
          "name": "engine_starting_speed",
          "shortDesc": "The engine starting speed for this rocket silo rocket prototype or `nil` .",
          "desc": "The engine starting speed for this rocket silo rocket prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "flying_speed": {
          "name": "flying_speed",
          "shortDesc": "The flying speed for this rocket silo rocket prototype or `nil` .",
          "desc": "The flying speed for this rocket silo rocket prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "flying_acceleration": {
          "name": "flying_acceleration",
          "shortDesc": "The flying acceleration for this rocket silo rocket prototype or `nil` .",
          "desc": "The flying acceleration for this rocket silo rocket prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fixed_recipe": {
          "name": "fixed_recipe",
          "shortDesc": "The fixed recipe name for this assembling machine prototype or `nil` .",
          "desc": "The fixed recipe name for this assembling machine prototype or `nil` .",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "construction_radius": {
          "name": "construction_radius",
          "shortDesc": "The construction radius for this roboport prototype or `nil` .",
          "desc": "The construction radius for this roboport prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "logistic_radius": {
          "name": "logistic_radius",
          "shortDesc": "The logistic radius for this roboport prototype or `nil` .",
          "desc": "The logistic radius for this roboport prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "energy_per_hit_point": {
          "name": "energy_per_hit_point",
          "shortDesc": "The energy used per hitpoint taken for this vehicle during collisions or `nil` .",
          "desc": "The energy used per hitpoint taken for this vehicle during collisions or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "create_ghost_on_death": {
          "name": "create_ghost_on_death",
          "shortDesc": "If this prototype will attempt to create a ghost of itself on death.",
          "desc": "If this prototype will attempt to create a ghost of itself on death. **Note:** If this is false then a ghost will never be made, if it's true a ghost may be made.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "timeout": {
          "name": "timeout",
          "shortDesc": "The time it takes this land mine to arm.",
          "desc": "The time it takes this land mine to arm.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fluidbox_prototypes": {
          "name": "fluidbox_prototypes",
          "shortDesc": "The fluidbox prototypes for this entity.",
          "desc": "The fluidbox prototypes for this entity.",
          "type": {
            "value": [
              "LuaFluidBoxPrototype"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "neighbour_bonus": {
          "name": "neighbour_bonus",
          "shortDesc": "",
          "desc": "_Can only be used if this is Reactor_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "neighbour_collision_increase": {
          "name": "neighbour_collision_increase",
          "shortDesc": "Controls how much a reactor extends when connected to other reactors.",
          "desc": "Controls how much a reactor extends when connected to other reactors. _Can only be used if this is Reactor_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "container_distance": {
          "name": "container_distance",
          "shortDesc": "",
          "desc": "_Can only be used if this is Loader_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "belt_distance": {
          "name": "belt_distance",
          "shortDesc": "",
          "desc": "_Can only be used if this is Loader_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "belt_length": {
          "name": "belt_length",
          "shortDesc": "",
          "desc": "_Can only be used if this is Loader_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_building": {
          "name": "is_building",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "automated_ammo_count": {
          "name": "automated_ammo_count",
          "shortDesc": "The amount of ammo that inserters automatically insert into this ammo-turret or artillery-turret or `nil` .",
          "desc": "The amount of ammo that inserters automatically insert into this ammo-turret or artillery-turret or `nil` .",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_speed": {
          "name": "max_speed",
          "shortDesc": "The max speed of this projectile prototype or flying robot prototype or `nil` .",
          "desc": "The max speed of this projectile prototype or flying robot prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "darkness_for_all_lamps_on": {
          "name": "darkness_for_all_lamps_on",
          "shortDesc": "Value between 0 and 1 darkness where all lamps of this lamp prototype are on or `nil` .",
          "desc": "Value between 0 and 1 darkness where all lamps of this lamp prototype are on or `nil` .",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "darkness_for_all_lamps_off": {
          "name": "darkness_for_all_lamps_off",
          "shortDesc": "Value between 0 and 1 darkness where all lamps of this lamp prototype are off or `nil` .",
          "desc": "Value between 0 and 1 darkness where all lamps of this lamp prototype are off or `nil` .",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "always_on": {
          "name": "always_on",
          "shortDesc": "Whether the lamp is always on (except when out of power or turned off by the circuit network) or `nil` .",
          "desc": "Whether the lamp is always on (except when out of power or turned off by the circuit network) or `nil` .",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "min_darkness_to_spawn": {
          "name": "min_darkness_to_spawn",
          "shortDesc": "The minimum darkness at which this unit spawner can spawn entities.",
          "desc": "The minimum darkness at which this unit spawner can spawn entities.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_darkness_to_spawn": {
          "name": "max_darkness_to_spawn",
          "shortDesc": "The maximum darkness at which this unit spawner can spawn entities.",
          "desc": "The maximum darkness at which this unit spawner can spawn entities.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "call_for_help_radius": {
          "name": "call_for_help_radius",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_count_of_owned_units": {
          "name": "max_count_of_owned_units",
          "shortDesc": "Count of enemies this spawner can sustain.",
          "desc": "Count of enemies this spawner can sustain.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_friends_around_to_spawn": {
          "name": "max_friends_around_to_spawn",
          "shortDesc": "How many friendly units are required within the spawning_radius of this spawner for it to stop producing more units.",
          "desc": "How many friendly units are required within the spawning_radius of this spawner for it to stop producing more units.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "spawning_radius": {
          "name": "spawning_radius",
          "shortDesc": "How far from the spawner can the units be spawned.",
          "desc": "How far from the spawner can the units be spawned.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "spawning_spacing": {
          "name": "spawning_spacing",
          "shortDesc": "What spaces should be between the spawned units.",
          "desc": "What spaces should be between the spawned units.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "radius": {
          "name": "radius",
          "shortDesc": "The radius of this entity prototype.",
          "desc": "The radius of this entity prototype.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "cliff_explosive_prototype": {
          "name": "cliff_explosive_prototype",
          "shortDesc": "The item prototype name used to destroy this cliff or `nil` .",
          "desc": "The item prototype name used to destroy this cliff or `nil` .",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "rocket_entity_prototype": {
          "name": "rocket_entity_prototype",
          "shortDesc": "The rocket entity prototype associated with this rocket silo prototype or `nil` .",
          "desc": "The rocket entity prototype associated with this rocket silo prototype or `nil` .",
          "type": "LuaEntityPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "has_belt_immunity": {
          "name": "has_belt_immunity",
          "shortDesc": "Whether this unit, car, or character prototype has belt immunity, `nil` if not car, unit, or character prototype.",
          "desc": "Whether this unit, car, or character prototype has belt immunity, `nil` if not car, unit, or character prototype.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "vision_distance": {
          "name": "vision_distance",
          "shortDesc": "The vision distance of this unit prototype or `nil` .",
          "desc": "The vision distance of this unit prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "pollution_to_join_attack": {
          "name": "pollution_to_join_attack",
          "shortDesc": "The amount of pollution that has to be absorbed by the unit's spawner before the unit will leave the spawner and attack the source of the pollution.",
          "desc": "The amount of pollution that has to be absorbed by the unit's spawner before the unit will leave the spawner and attack the source of the pollution. `nil` when prototype is not a unit prototype.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "min_pursue_time": {
          "name": "min_pursue_time",
          "shortDesc": "The minimum pursue time of this unit prototype or `nil` .",
          "desc": "The minimum pursue time of this unit prototype or `nil` .",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_pursue_distance": {
          "name": "max_pursue_distance",
          "shortDesc": "The maximum pursue distance of this unit prototype or `nil` .",
          "desc": "The maximum pursue distance of this unit prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "radar_range": {
          "name": "radar_range",
          "shortDesc": "The radar range of this unit prototype or `nil` .",
          "desc": "The radar range of this unit prototype or `nil` .",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "move_while_shooting": {
          "name": "move_while_shooting",
          "shortDesc": "Whether this unit prototype can move while shooting or `nil` .",
          "desc": "Whether this unit prototype can move while shooting or `nil` .",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "can_open_gates": {
          "name": "can_open_gates",
          "shortDesc": "Whether this unit prototype can open gates or `nil` .",
          "desc": "Whether this unit prototype can open gates or `nil` .",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "affected_by_tiles": {
          "name": "affected_by_tiles",
          "shortDesc": "Whether this unit prototype is affected by tile walking speed modifiers or `nil` .",
          "desc": "Whether this unit prototype is affected by tile walking speed modifiers or `nil` .",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "distraction_cooldown": {
          "name": "distraction_cooldown",
          "shortDesc": "The distraction cooldown of this unit prototype or `nil` .",
          "desc": "The distraction cooldown of this unit prototype or `nil` .",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "spawning_time_modifier": {
          "name": "spawning_time_modifier",
          "shortDesc": "The spawning time modifier of this unit prototype or `nil` .",
          "desc": "The spawning time modifier of this unit prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "alert_icon_shift": {
          "name": "alert_icon_shift",
          "shortDesc": "The alert icon shift of this entity prototype.",
          "desc": "The alert icon shift of this entity prototype.",
          "type": "Vector",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "lab_inputs": {
          "name": "lab_inputs",
          "shortDesc": "The item prototype names that are the inputs of this lab prototype or `nil` .",
          "desc": "The item prototype names that are the inputs of this lab prototype or `nil` .",
          "type": {
            "value": [
              "string"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "researching_speed": {
          "name": "researching_speed",
          "shortDesc": "The base researching speed of this lab prototype or `nil` .",
          "desc": "The base researching speed of this lab prototype or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "item_slot_count": {
          "name": "item_slot_count",
          "shortDesc": "The item slot count of this constant combinator prototype or `nil` .",
          "desc": "The item slot count of this constant combinator prototype or `nil` .",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "base_productivity": {
          "name": "base_productivity",
          "shortDesc": "The base productivity of this crafting machine, lab, or mining drill, or `nil` .",
          "desc": "The base productivity of this crafting machine, lab, or mining drill, or `nil` .",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allow_access_to_all_forces": {
          "name": "allow_access_to_all_forces",
          "shortDesc": "If this market allows access to all forces or just friendly ones.",
          "desc": "If this market allows access to all forces or just friendly ones.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "supports_direction": {
          "name": "supports_direction",
          "shortDesc": "If this entity prototype could possibly ever be rotated.",
          "desc": "If this entity prototype could possibly ever be rotated.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "terrain_friction_modifier": {
          "name": "terrain_friction_modifier",
          "shortDesc": "The terrain friction modifier for this vehicle.",
          "desc": "The terrain friction modifier for this vehicle.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allow_passengers": {
          "name": "allow_passengers",
          "shortDesc": "If this vehicle allows passengers.",
          "desc": "If this vehicle allows passengers.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_distance_of_sector_revealed": {
          "name": "max_distance_of_sector_revealed",
          "shortDesc": "The radius of the area this radar can chart, in chunks.",
          "desc": "The radius of the area this radar can chart, in chunks.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_distance_of_nearby_sector_revealed": {
          "name": "max_distance_of_nearby_sector_revealed",
          "shortDesc": "The radius of the area constantly revealed by this radar, in chunks.",
          "desc": "The radius of the area constantly revealed by this radar, in chunks.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "adjacent_tile_collision_box": {
          "name": "adjacent_tile_collision_box",
          "shortDesc": "The bounding box that specifies which tiles adjacent to the offshore pump should be checked.",
          "desc": "The bounding box that specifies which tiles adjacent to the offshore pump should be checked. _Can only be used if this is OffshorePump_",
          "type": "BoundingBox",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "adjacent_tile_collision_mask": {
          "name": "adjacent_tile_collision_mask",
          "shortDesc": "Tiles adjacent to the offshore pump must not collide with this collision mask.",
          "desc": "Tiles adjacent to the offshore pump must not collide with this collision mask. _Can only be used if this is OffshorePump_",
          "type": "CollisionMask",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "adjacent_tile_collision_test": {
          "name": "adjacent_tile_collision_test",
          "shortDesc": "If this mask is not empty, tiles adjacent to the offshore pump must not collide with this collision mask.",
          "desc": "If this mask is not empty, tiles adjacent to the offshore pump must not collide with this collision mask. _Can only be used if this is OffshorePump_",
          "type": "CollisionMask",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "center_collision_mask": {
          "name": "center_collision_mask",
          "shortDesc": "The collision mask used only for collision test with tile directly at offshore pump position.",
          "desc": "The collision mask used only for collision test with tile directly at offshore pump position. _Can only be used if this is OffshorePump_",
          "type": "CollisionMask",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "grid_prototype": {
          "name": "grid_prototype",
          "shortDesc": "The equipment grid prototype for this entity or `nil` .",
          "desc": "The equipment grid prototype for this entity or `nil` .",
          "type": "LuaEquipmentGridPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "remove_decoratives": {
          "name": "remove_decoratives",
          "shortDesc": "",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "running_speed": {
          "name": "running_speed",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "maximum_corner_sliding_distance": {
          "name": "maximum_corner_sliding_distance",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "build_distance": {
          "name": "build_distance",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "drop_item_distance": {
          "name": "drop_item_distance",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "reach_distance": {
          "name": "reach_distance",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "reach_resource_distance": {
          "name": "reach_resource_distance",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "item_pickup_distance": {
          "name": "item_pickup_distance",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "loot_pickup_distance": {
          "name": "loot_pickup_distance",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "enter_vehicle_distance": {
          "name": "enter_vehicle_distance",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ticks_to_keep_gun": {
          "name": "ticks_to_keep_gun",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ticks_to_keep_aiming_direction": {
          "name": "ticks_to_keep_aiming_direction",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ticks_to_stay_in_combat": {
          "name": "ticks_to_stay_in_combat",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "respawn_time": {
          "name": "respawn_time",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "damage_hit_tint": {
          "name": "damage_hit_tint",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "character_corpse": {
          "name": "character_corpse",
          "shortDesc": "",
          "desc": "_Can only be used if this is Character_",
          "type": "LuaEntityPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaEquipment": {
      "name": "LuaEquipment",
      "desc": "An item in a [LuaEquipmentGrid](https://lua-api.factorio.com/latest/LuaEquipmentGrid.html) , for example one's power armor.\n**Note:** An equipment reference becomes invalid once the equipment is removed or the\n       equipment grid it resides in is destroyed.",
      "url": "LuaEquipment.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this equipment.",
          "desc": "Name of this equipment.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "type": {
          "name": "type",
          "shortDesc": "Type of this equipment.",
          "desc": "Type of this equipment.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "position": {
          "name": "position",
          "shortDesc": "Position of this equipment in the equipment grid.",
          "desc": "Position of this equipment in the equipment grid.",
          "type": "Position",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "shape": {
          "name": "shape",
          "shortDesc": "Shape of this equipment.",
          "desc": "Shape of this equipment. It is a table: * width :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)\n  * height :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)",
          "type": "table",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "shield": {
          "name": "shield",
          "shortDesc": "Current shield value of the equipment.",
          "desc": "Current shield value of the equipment. **Note:** Can't be set higher than [LuaEquipment::max_shield](https://lua-api.factorio.com/latest/LuaEquipment.html#LuaEquipment.max_shield) .",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "max_shield": {
          "name": "max_shield",
          "shortDesc": "Maximum shield value.",
          "desc": "Maximum shield value.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_solar_power": {
          "name": "max_solar_power",
          "shortDesc": "Maximum solar power generated.",
          "desc": "Maximum solar power generated.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "movement_bonus": {
          "name": "movement_bonus",
          "shortDesc": "Movement speed bonus.",
          "desc": "Movement speed bonus.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "generator_power": {
          "name": "generator_power",
          "shortDesc": "Energy generated per tick.",
          "desc": "Energy generated per tick.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "energy": {
          "name": "energy",
          "shortDesc": "Current available energy.",
          "desc": "Current available energy.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "max_energy": {
          "name": "max_energy",
          "shortDesc": "Maximum amount of energy that can be stored in this equipment.",
          "desc": "Maximum amount of energy that can be stored in this equipment.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "prototype": {
          "name": "prototype",
          "shortDesc": "",
          "type": "LuaEquipmentPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "burner": {
          "name": "burner",
          "shortDesc": "The burner energy source for this equipment or `nil` if there isn't one.",
          "desc": "The burner energy source for this equipment or `nil` if there isn't one.",
          "type": "LuaBurner",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaEquipmentCategoryPrototype": {
      "name": "LuaEquipmentCategoryPrototype",
      "desc": "Prototype of a equipment category.",
      "url": "LuaEquipmentCategoryPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaEquipmentGrid": {
      "name": "LuaEquipmentGrid",
      "desc": "An equipment grid is for example the inside of a power armor.",
      "url": "LuaEquipmentGrid.html",
      "attributes": {
        "take": {
          "name": "take",
          "shortDesc": "Remove an equipment from the grid.",
          "desc": "Remove an equipment from the grid.",
          "parameters": {
            "luaEquipmentGridtake_param": {
              "name": "luaEquipmentGridtake_param",
              "desc": "Table with the following fields",
              "type": "LuaEquipmentGridtake_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The removed equipment, or `nil` if no equipment was removed.",
            "type": "SimpleItemStack",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaEquipmentGridtake_param",
              "attributes": {
                "position": {
                  "name": "position",
                  "desc": "Take the equipment that contains this position in the grid.",
                  "type": "Position",
                  "optional": false
                },
                "equipment": {
                  "name": "equipment",
                  "desc": "Take this exact equipment.",
                  "type": "LuaEquipment",
                  "optional": false
                },
                "by_player": {
                  "name": "by_player",
                  "desc": "If provided the action is done 'as' this player and on_player_removed_equipment is triggered.",
                  "type": "PlayerSpecification",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "take_all": {
          "name": "take_all",
          "shortDesc": "Remove all equipment from the grid.",
          "desc": "Remove all equipment from the grid.",
          "parameters": {
            "by_player": {
              "name": "by_player",
              "desc": "If provided, the action is done 'as' this player and on_player_removed_equipment is triggered.",
              "type": "PlayerSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Count of each removed equipment, indexed by their prototype names.",
            "type": {
              "value": [
                "string",
                "uint"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "clear": {
          "name": "clear",
          "shortDesc": "Clear all equipment from the grid, i.",
          "desc": "Clear all equipment from the grid, i.e. remove it without actually returning it.",
          "parameters": {
            "by_player": {
              "name": "by_player",
              "desc": "If provided, the action is done 'as' this player and on_player_removed_equipment is triggered.",
              "type": "PlayerSpecification",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "put": {
          "name": "put",
          "shortDesc": "Insert an equipment into the grid.",
          "desc": "Insert an equipment into the grid.",
          "parameters": {
            "luaEquipmentGridput_param": {
              "name": "luaEquipmentGridput_param",
              "desc": "Table with the following fields",
              "type": "LuaEquipmentGridput_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The newly-added equipment, or `nil` if the equipment could not be added.",
            "type": "LuaEquipment",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaEquipmentGridput_param",
              "attributes": {
                "name": {
                  "name": "name",
                  "desc": "Equipment prototype name",
                  "type": "string",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Grid position to put the equipment in.",
                  "type": "Position",
                  "optional": false
                },
                "by_player": {
                  "name": "by_player",
                  "desc": "If provided the action is done 'as' this player and on_player_placed_equipment is triggered.",
                  "type": "PlayerSpecification",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "can_move": {
          "name": "can_move",
          "shortDesc": "Check whether moving an equipment would succeed.",
          "desc": "Check whether moving an equipment would succeed.",
          "parameters": {
            "luaEquipmentGridcan_move_param": {
              "name": "luaEquipmentGridcan_move_param",
              "desc": "Table with the following fields",
              "type": "LuaEquipmentGridcan_move_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaEquipmentGridcan_move_param",
              "attributes": {
                "equipment": {
                  "name": "equipment",
                  "desc": "The equipment to move",
                  "type": "LuaEquipment",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Where to put it",
                  "type": "Position",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "move": {
          "name": "move",
          "shortDesc": "Move an equipment within this grid.",
          "desc": "Move an equipment within this grid.",
          "parameters": {
            "luaEquipmentGridmove_param": {
              "name": "luaEquipmentGridmove_param",
              "desc": "Table with the following fields",
              "type": "LuaEquipmentGridmove_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "`true` if the equipment was successfully moved.",
            "type": "boolean",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaEquipmentGridmove_param",
              "attributes": {
                "equipment": {
                  "name": "equipment",
                  "desc": "The equipment to move",
                  "type": "LuaEquipment",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Where to put it",
                  "type": "Position",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "get": {
          "name": "get",
          "shortDesc": "Find equipment in the Equipment Grid based off a position.",
          "desc": "Find equipment in the Equipment Grid based off a position.",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "The position",
              "type": "Position",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The found equipment, or `nil` if equipment could not be found at the given position.",
            "type": "LuaEquipment",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_contents": {
          "name": "get_contents",
          "shortDesc": "Get counts of all equipment in this grid.",
          "desc": "Get counts of all equipment in this grid.",
          "returnObject": {
            "desc": "The counts, indexed by equipment names.",
            "type": {
              "value": [
                "string",
                "uint"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "prototype": {
          "name": "prototype",
          "shortDesc": "",
          "type": "LuaEquipmentGridPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "width": {
          "name": "width",
          "shortDesc": "Width of the equipment grid.",
          "desc": "Width of the equipment grid.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "height": {
          "name": "height",
          "shortDesc": "Height of the equipment grid.",
          "desc": "Height of the equipment grid.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "equipment": {
          "name": "equipment",
          "shortDesc": "All the equipment in this grid.",
          "desc": "All the equipment in this grid.",
          "type": {
            "value": [
              "LuaEquipment"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "generator_energy": {
          "name": "generator_energy",
          "shortDesc": "Total energy per tick generated by the equipment inside this grid.",
          "desc": "Total energy per tick generated by the equipment inside this grid.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_solar_energy": {
          "name": "max_solar_energy",
          "shortDesc": "Maximum energy per tick that can be created by any solar panels in the equipment grid.",
          "desc": "Maximum energy per tick that can be created by any solar panels in the equipment grid. Actual generated\n energy varies depending on the daylight levels.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "available_in_batteries": {
          "name": "available_in_batteries",
          "shortDesc": "The total energy stored in all batteries in the equipment grid.",
          "desc": "The total energy stored in all batteries in the equipment grid.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "battery_capacity": {
          "name": "battery_capacity",
          "shortDesc": "Total energy storage capacity of all batteries in the equipment grid.",
          "desc": "Total energy storage capacity of all batteries in the equipment grid.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "shield": {
          "name": "shield",
          "shortDesc": "The amount of shields this equipment grid has.",
          "desc": "The amount of shields this equipment grid has.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_shield": {
          "name": "max_shield",
          "shortDesc": "The maximum amount of shields this equipment grid has.",
          "desc": "The maximum amount of shields this equipment grid has.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "inhibit_movement_bonus": {
          "name": "inhibit_movement_bonus",
          "shortDesc": "True if this movement bonus equipment is turned off, otherwise false.",
          "desc": "True if this movement bonus equipment is turned off, otherwise false.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaEquipmentGridPrototype": {
      "name": "LuaEquipmentGridPrototype",
      "desc": "Prototype of an equipment grid.",
      "url": "LuaEquipmentGridPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "equipment_categories": {
          "name": "equipment_categories",
          "shortDesc": "Equipment category names for the categories that may be inserted into this equipment grid.",
          "desc": "Equipment category names for the categories that may be inserted into this equipment grid. The grid will accept\n any equipment that has at least one category in this list. See also * [LuaEquipmentPrototype::equipment_categories](https://lua-api.factorio.com/latest/LuaEquipmentPrototype.html#LuaEquipmentPrototype.equipment_categories)",
          "type": {
            "value": [
              "string"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "width": {
          "name": "width",
          "shortDesc": "",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "height": {
          "name": "height",
          "shortDesc": "",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "locked": {
          "name": "locked",
          "shortDesc": "If the player can move equipment into or out of this grid.",
          "desc": "If the player can move equipment into or out of this grid.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaEquipmentPrototype": {
      "name": "LuaEquipmentPrototype",
      "desc": "Prototype of a modular equipment.",
      "url": "LuaEquipmentPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "type": {
          "name": "type",
          "shortDesc": "Type of this equipment prototype.",
          "desc": "Type of this equipment prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "shape": {
          "name": "shape",
          "shortDesc": "Shape of this equipment prototype.",
          "desc": "Shape of this equipment prototype. It is a table: * width :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)\n  * height :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)\n  * points :: array of point (optional) :  A point is a table with x and y values. Only set when the shape is \"manual\"",
          "type": "table",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "take_result": {
          "name": "take_result",
          "shortDesc": "The result item when taking this equipment out of an equipment grid.",
          "desc": "The result item when taking this equipment out of an equipment grid. `nil` if there is no result item.",
          "type": "LuaItemPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "energy_production": {
          "name": "energy_production",
          "shortDesc": "The max power generated by this equipment.",
          "desc": "The max power generated by this equipment.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "shield": {
          "name": "shield",
          "shortDesc": "The shield value of this equipment.",
          "desc": "The shield value of this equipment. 0 for non-shield equipment.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "energy_per_shield": {
          "name": "energy_per_shield",
          "shortDesc": "The energy per shield point restored.",
          "desc": "The energy per shield point restored. 0 for non-shield equipment.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "logistic_parameters": {
          "name": "logistic_parameters",
          "shortDesc": "The logistic parameters for roboport equipment.",
          "desc": "The logistic parameters for roboport equipment. Table with the following fields: * spawn_and_station_height :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * charge_approach_distance :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * logistic_radius :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * construction_radius :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * charging_station_count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)\n  * charging_distance :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * charging_station_shift :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)\n  * charging_energy :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)\n  * charging_threshold_distance :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * robot_vertical_acceleration :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)\n  * stationing_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)\n  * robot_limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)\n  * logistics_connection_distance :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)",
          "type": "table",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "energy_consumption": {
          "name": "energy_consumption",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "movement_bonus": {
          "name": "movement_bonus",
          "shortDesc": "",
          "desc": "_Can only be used if this is MovementBonusEquipmentPrototype_",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "energy_source": {
          "name": "energy_source",
          "shortDesc": "The energy source prototype for the equipment.",
          "desc": "The energy source prototype for the equipment.",
          "type": "LuaElectricEnergySourcePrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "equipment_categories": {
          "name": "equipment_categories",
          "shortDesc": "Category names for this equipment.",
          "desc": "Category names for this equipment. These categories will be used to determine whether this equipment is allowed\n in a particular equipment grid. See also * [LuaEquipmentGridPrototype::equipment_categories](https://lua-api.factorio.com/latest/LuaEquipmentGridPrototype.html#LuaEquipmentGridPrototype.equipment_categories)",
          "type": {
            "value": [
              "string"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "burner_prototype": {
          "name": "burner_prototype",
          "shortDesc": "The burner energy source prototype this equipment uses or `nil` .",
          "desc": "The burner energy source prototype this equipment uses or `nil` .",
          "type": "LuaBurnerPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "electric_energy_source_prototype": {
          "name": "electric_energy_source_prototype",
          "shortDesc": "The electric energy source prototype this equipment uses or `nil` .",
          "desc": "The electric energy source prototype this equipment uses or `nil` .",
          "type": "LuaElectricEnergySourcePrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "background_color": {
          "name": "background_color",
          "shortDesc": "The background color of this equipment prototype.",
          "desc": "The background color of this equipment prototype.",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "attack_parameters": {
          "name": "attack_parameters",
          "shortDesc": "The equipment attack parameters or `nil` .",
          "desc": "The equipment attack parameters or `nil` .",
          "type": "AttackParameters",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "automatic": {
          "name": "automatic",
          "shortDesc": "Is this active defense equipment automatic.",
          "desc": "Is this active defense equipment automatic.\n Returns false if not active defense equipment.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaFlowStatistics": {
      "name": "LuaFlowStatistics",
      "desc": "Encapsulates statistic data for different parts of the game.\n In the context of flow statistics, `input` and `output` describe on which side of the associated GUI the values are shown. Input values are shown on the left side, output values on the right side.\nExamples:\n* The item production GUI shows \"consumption\" on the right, thus `output` describes the item consumption numbers. The same goes for fluid consumption.\n* The kills gui shows \"losses\" on the right, so `output` describes how many of the force's entities were killed by enemies.\n* The electric network GUI shows \"power consumption\" on the left side, so in this case `input` describes the power consumption numbers.\n",
      "url": "LuaFlowStatistics.html",
      "attributes": {
        "get_input_count": {
          "name": "get_input_count",
          "shortDesc": "Gets the total input count for a given prototype.",
          "desc": "Gets the total input count for a given prototype.",
          "parameters": {
            "string": {
              "name": "string",
              "desc": "The prototype name.",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "uint64",
                "double"
              ],
              "type": "Union"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_input_count": {
          "name": "set_input_count",
          "shortDesc": "Sets the total input count for a given prototype.",
          "desc": "Sets the total input count for a given prototype.",
          "parameters": {
            "string": {
              "name": "string",
              "desc": "The prototype name.",
              "type": "any",
              "optional": false
            },
            "count": {
              "name": "count",
              "desc": "The new count. The type depends on the instance of the statistics.",
              "type": {
                "value": [
                  "uint64",
                  "double"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_output_count": {
          "name": "get_output_count",
          "shortDesc": "Gets the total output count for a given prototype.",
          "desc": "Gets the total output count for a given prototype.",
          "parameters": {
            "string": {
              "name": "string",
              "desc": "The prototype name.",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "uint64",
                "double"
              ],
              "type": "Union"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_output_count": {
          "name": "set_output_count",
          "shortDesc": "Sets the total output count for a given prototype.",
          "desc": "Sets the total output count for a given prototype.",
          "parameters": {
            "string": {
              "name": "string",
              "desc": "The prototype name.",
              "type": "any",
              "optional": false
            },
            "count": {
              "name": "count",
              "desc": "The new count. The type depends on the instance of the statistics.",
              "type": {
                "value": [
                  "uint64",
                  "double"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_flow_count": {
          "name": "get_flow_count",
          "shortDesc": "Gets the flow count value for the given time frame.",
          "desc": "Gets the flow count value for the given time frame.",
          "parameters": {
            "luaFlowStatisticsget_flow_count_param": {
              "name": "luaFlowStatisticsget_flow_count_param",
              "desc": "Table with the following fields",
              "type": "LuaFlowStatisticsget_flow_count_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaFlowStatisticsget_flow_count_param",
              "attributes": {
                "name": {
                  "name": "name",
                  "desc": "The prototype name.",
                  "type": "string",
                  "optional": false
                },
                "input": {
                  "name": "input",
                  "desc": "Read the input values or the output values",
                  "type": "boolean",
                  "optional": false
                },
                "precision_index": {
                  "name": "precision_index",
                  "desc": "The precision to read.",
                  "type": "defines.flow_precision_index",
                  "optional": false
                },
                "count": {
                  "name": "count",
                  "desc": "If true, the count is returned instead of the per-time-frame value.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "on_flow": {
          "name": "on_flow",
          "shortDesc": "Adds a value to this flow statistics.",
          "desc": "Adds a value to this flow statistics.",
          "parameters": {
            "string": {
              "name": "string",
              "desc": "The prototype name.",
              "type": "any",
              "optional": false
            },
            "count": {
              "name": "count",
              "desc": "The count: positive or negative determines if the value goes in the input or output statistics.",
              "type": "float",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "clear": {
          "name": "clear",
          "shortDesc": "Reset all the statistics data to 0.",
          "desc": "Reset all the statistics data to 0.",
          "attribute_type": "function"
        },
        "input_counts": {
          "name": "input_counts",
          "shortDesc": "List of input counts indexed by name <> value.",
          "desc": "List of input counts indexed by name <> value.\n Represents the data that is shown on the left side of the GUI for the given statistics.",
          "type": {
            "value": [
              "string",
              {
                "value": [
                  {
                    "value": [
                      "uint64",
                      "double"
                    ],
                    "type": "Union"
                  }
                ],
                "type": "Array"
              }
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "output_counts": {
          "name": "output_counts",
          "shortDesc": "List of output counts indexed by name <> value.",
          "desc": "List of output counts indexed by name <> value.\n Represents the data that is shown on the right side of the GUI for the given statistics.",
          "type": {
            "value": [
              "string",
              {
                "value": [
                  {
                    "value": [
                      "uint64",
                      "double"
                    ],
                    "type": "Union"
                  }
                ],
                "type": "Array"
              }
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "force": {
          "name": "force",
          "shortDesc": "The force these statistics belong to or `nil` for pollution statistics.",
          "desc": "The force these statistics belong to or `nil` for pollution statistics.",
          "type": "LuaForce",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaFluidBox": {
      "name": "LuaFluidBox",
      "desc": "An array of fluid boxes of an entity. Entities may contain more than one fluid box, and some can change the number\n of fluid boxes -- for instance, an assembling machine will change its number of fluid boxes depending\n on its active recipe.\nSee [Fluid](https://lua-api.factorio.com/latest/Concepts.html#Fluid)\nDo note that reading from a [LuaFluidBox](https://lua-api.factorio.com/latest/LuaFluidBox.html) creates a new table and writing will copy the given\n fields from the table into the engine's own fluid box structure. Therefore, the correct way to update\n a fluidbox of an entity is to read it first, modify the table, then write the modified table back.\n Directly accessing the returned table's attributes won't have the desired effect.\nExample Double the temperature of the fluid in `entity` 's first fluid box. `fluid\u00a0=\u00a0entity.fluidbox[1] fluid.temperature\u00a0=\u00a0fluid.temperature\u00a0*\u00a02 entity.fluidbox[1]\u00a0=\u00a0fluid`",
      "url": "LuaFluidBox.html",
      "attributes": {
        "get_prototype": {
          "name": "get_prototype",
          "shortDesc": "The prototype of this fluidbox index.",
          "desc": "The prototype of this fluidbox index.",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaFluidBoxPrototype",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_capacity": {
          "name": "get_capacity",
          "shortDesc": "The capacity of the given fluidbox index.",
          "desc": "The capacity of the given fluidbox index.",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_connections": {
          "name": "get_connections",
          "shortDesc": "The fluidbox connections for the given fluidbox index.",
          "desc": "The fluidbox connections for the given fluidbox index.",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaFluidBox"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_filter": {
          "name": "get_filter",
          "shortDesc": "The filter of the given fluidbox index, 'nil' if none.",
          "desc": "The filter of the given fluidbox index, 'nil' if none.",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "* name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Fluid prototype name of the filtered fluid.\n  * minimum_temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The minimum temperature allowed into the fluidbox\n  * maximum_temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The maximum temperature allowed into the fluidbox or 'nil'.",
            "type": "table",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_filter": {
          "name": "set_filter",
          "shortDesc": "Set the filter of the given fluidbox index, 'nil' to clear.",
          "desc": "Set the filter of the given fluidbox index, 'nil' to clear.\n Some entities cannot have their fluidbox filter set, notably fluid wagons and crafting machines.",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            },
            "table": {
              "name": "table",
              "desc": "Table with the following fields",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the filter was set successfully.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_flow": {
          "name": "get_flow",
          "shortDesc": "Flow through the fluidbox in the last tick.",
          "desc": "Flow through the fluidbox in the last tick. It is the larger of in-flow and out-flow.",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_locked_fluid": {
          "name": "get_locked_fluid",
          "shortDesc": "Returns the fluid the fluidbox is locked onto\n Returns 'nil' for no lock",
          "desc": "Returns the fluid the fluidbox is locked onto\n Returns 'nil' for no lock",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "flush": {
          "name": "flush",
          "shortDesc": "Flushes all fluid from this fluidbox and its fluid system.",
          "desc": "Flushes all fluid from this fluidbox and its fluid system.",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            },
            "fluid": {
              "name": "fluid",
              "desc": "If provided, only this fluid is flushed.",
              "type": "FluidSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The fluid removed.",
            "type": {
              "value": [
                "string",
                "float"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "operator #": {
          "name": "operator #",
          "shortDesc": "Number of fluid boxes.",
          "desc": "Number of fluid boxes.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "owner": {
          "name": "owner",
          "shortDesc": "The entity that owns this fluidbox.",
          "desc": "The entity that owns this fluidbox.",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "operator []": {
          "name": "operator []",
          "shortDesc": "Access, set or clear a fluid box.",
          "desc": "Access, set or clear a fluid box. The index must always be in bounds (see [LuaFluidBox::operator #](https://lua-api.factorio.com/latest/LuaFluidBox.html#LuaFluidBox.operator #) );\n new fluidboxes may not be added or removed using this operator. If the given fluid box doesn't contain any\n fluid, `nil` is returned. Similarly, `nil` can be written to a fluid box to remove all fluid from it.",
          "type": {
            "value": [
              "Fluid",
              "nil"
            ],
            "type": "Union"
          },
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaFluidBoxPrototype": {
      "name": "LuaFluidBoxPrototype",
      "desc": "A prototype of a fluidbox owned by some [LuaEntityPrototype](https://lua-api.factorio.com/latest/LuaEntityPrototype.html) .",
      "url": "LuaFluidBoxPrototype.html",
      "attributes": {
        "entity": {
          "name": "entity",
          "shortDesc": "The entity that this belongs to.",
          "desc": "The entity that this belongs to.",
          "type": "LuaEntityPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "index": {
          "name": "index",
          "shortDesc": "The index of this fluidbox prototype in the owning entity.",
          "desc": "The index of this fluidbox prototype in the owning entity.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "pipe_connections": {
          "name": "pipe_connections",
          "shortDesc": "The pipe connection points.",
          "desc": "The pipe connection points.",
          "type": {
            "value": [
              "FluidBoxConnection"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "production_type": {
          "name": "production_type",
          "shortDesc": "The production type.",
          "desc": "The production type. \"input\", \"output\", \"input-output\", or \"none\".",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "base_area": {
          "name": "base_area",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "base_level": {
          "name": "base_level",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "height": {
          "name": "height",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "volume": {
          "name": "volume",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "filter": {
          "name": "filter",
          "shortDesc": "The filter or `nil` if no filter is set.",
          "desc": "The filter or `nil` if no filter is set.",
          "type": "LuaFluidPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "minimum_temperature": {
          "name": "minimum_temperature",
          "shortDesc": "The minimum temperature or `nil` if none is set.",
          "desc": "The minimum temperature or `nil` if none is set.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "maximum_temperature": {
          "name": "maximum_temperature",
          "shortDesc": "The maximum temperature or `nil` if none is set.",
          "desc": "The maximum temperature or `nil` if none is set.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "secondary_draw_orders": {
          "name": "secondary_draw_orders",
          "shortDesc": "The secondary draw orders for the 4 possible connection directions.",
          "desc": "The secondary draw orders for the 4 possible connection directions.",
          "type": {
            "value": [
              "int"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_layer": {
          "name": "render_layer",
          "shortDesc": "The render layer.",
          "desc": "The render layer.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaFluidEnergySourcePrototype": {
      "name": "LuaFluidEnergySourcePrototype",
      "desc": "Prototype of a fluid energy source.",
      "url": "LuaFluidEnergySourcePrototype.html",
      "attributes": {
        "emissions": {
          "name": "emissions",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_no_network_icon": {
          "name": "render_no_network_icon",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_no_power_icon": {
          "name": "render_no_power_icon",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "effectivity": {
          "name": "effectivity",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "burns_fluid": {
          "name": "burns_fluid",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "scale_fluid_usage": {
          "name": "scale_fluid_usage",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fluid_usage_per_tick": {
          "name": "fluid_usage_per_tick",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "smoke": {
          "name": "smoke",
          "shortDesc": "The smoke sources for this prototype if any.",
          "desc": "The smoke sources for this prototype if any.",
          "type": {
            "value": [
              "SmokeSource"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "maximum_temperature": {
          "name": "maximum_temperature",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fluid_box": {
          "name": "fluid_box",
          "shortDesc": "The fluid box for this energy source.",
          "desc": "The fluid box for this energy source.",
          "type": "any",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaFluidPrototype": {
      "name": "LuaFluidPrototype",
      "desc": "Prototype of a fluid.",
      "url": "LuaFluidPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "default_temperature": {
          "name": "default_temperature",
          "shortDesc": "Default temperature of the fluid.",
          "desc": "Default temperature of the fluid.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_temperature": {
          "name": "max_temperature",
          "shortDesc": "Maximum temperature the fluid can reach.",
          "desc": "Maximum temperature the fluid can reach.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "heat_capacity": {
          "name": "heat_capacity",
          "shortDesc": "How much energy the fluid will generate at max temperature assuming 100% efficiency steam engine.",
          "desc": "How much energy the fluid will generate at max temperature assuming 100% efficiency steam engine.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string for this prototype.",
          "desc": "Order string for this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "group": {
          "name": "group",
          "shortDesc": "Group of this prototype.",
          "desc": "Group of this prototype.",
          "type": "LuaGroup",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "subgroup": {
          "name": "subgroup",
          "shortDesc": "Subgroup of this prototype.",
          "desc": "Subgroup of this prototype.",
          "type": "LuaGroup",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "base_color": {
          "name": "base_color",
          "shortDesc": "",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "flow_color": {
          "name": "flow_color",
          "shortDesc": "",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "gas_temperature": {
          "name": "gas_temperature",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "emissions_multiplier": {
          "name": "emissions_multiplier",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fuel_value": {
          "name": "fuel_value",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "hidden": {
          "name": "hidden",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaFontPrototype": {
      "name": "LuaFontPrototype",
      "desc": "Prototype of a font.",
      "url": "LuaFontPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "from": {
          "name": "from",
          "shortDesc": "",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "size": {
          "name": "size",
          "shortDesc": "",
          "type": "int",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "spacing": {
          "name": "spacing",
          "shortDesc": "",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "border": {
          "name": "border",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "filtered": {
          "name": "filtered",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "border_color": {
          "name": "border_color",
          "shortDesc": "The border color or `nil` if not set.",
          "desc": "The border color or `nil` if not set.",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaForce": {
      "name": "LuaForce",
      "desc": "`LuaForce` encapsulates data local to each \"force\" or \"faction\" of the game.\n Default forces are player, enemy and neutral. Players and mods can create\n additional forces (up to 64 total).",
      "url": "LuaForce.html",
      "attributes": {
        "get_entity_count": {
          "name": "get_entity_count",
          "shortDesc": "Count entities of given type.",
          "desc": "Count entities of given type.",
          "parameters": {
            "name": {
              "name": "name",
              "desc": "Prototype name of the entity.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Number of entities of given prototype belonging to this force.",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "disable_research": {
          "name": "disable_research",
          "shortDesc": "Disable research for this force.",
          "desc": "Disable research for this force.",
          "attribute_type": "function"
        },
        "enable_research": {
          "name": "enable_research",
          "shortDesc": "Enable research for this force.",
          "desc": "Enable research for this force.",
          "attribute_type": "function"
        },
        "disable_all_prototypes": {
          "name": "disable_all_prototypes",
          "shortDesc": "Disable all recipes and technologies.",
          "desc": "Disable all recipes and technologies. Only recipes and technologies enabled explicitly will\n be useable from this point.",
          "attribute_type": "function"
        },
        "enable_all_prototypes": {
          "name": "enable_all_prototypes",
          "shortDesc": "Enables all recipes and technologies.",
          "desc": "Enables all recipes and technologies.\n The opposite of [LuaForce::disable_all_prototypes](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.disable_all_prototypes)",
          "attribute_type": "function"
        },
        "reset_recipes": {
          "name": "reset_recipes",
          "shortDesc": "Load the original version of all recipes from the prototypes.",
          "desc": "Load the original version of all recipes from the prototypes.",
          "attribute_type": "function"
        },
        "enable_all_recipes": {
          "name": "enable_all_recipes",
          "shortDesc": "Unlock all recipes.",
          "desc": "Unlock all recipes.",
          "attribute_type": "function"
        },
        "enable_all_technologies": {
          "name": "enable_all_technologies",
          "shortDesc": "Unlock all technologies.",
          "desc": "Unlock all technologies.",
          "attribute_type": "function"
        },
        "research_all_technologies": {
          "name": "research_all_technologies",
          "shortDesc": "Research all technologies.",
          "desc": "Research all technologies.",
          "parameters": {
            "include_disabled_prototypes": {
              "name": "include_disabled_prototypes",
              "desc": "If technologies that are explicitly disabled in the prototype are also researched. This defaults to false.",
              "type": "any",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "reset_technologies": {
          "name": "reset_technologies",
          "shortDesc": "Load the original versions of technologies from prototypes.",
          "desc": "Load the original versions of technologies from prototypes. Preserves research state of technologies.",
          "attribute_type": "function"
        },
        "reset": {
          "name": "reset",
          "shortDesc": "Reset everything.",
          "desc": "Reset everything. All technologies are set to not researched, all modifiers are set to default values.",
          "attribute_type": "function"
        },
        "reset_technology_effects": {
          "name": "reset_technology_effects",
          "shortDesc": "Reapplies all possible research effects, including unlocked recipes.",
          "desc": "Reapplies all possible research effects, including unlocked recipes. Any custom changes are lost. Preserves research state of technologies.",
          "attribute_type": "function"
        },
        "chart": {
          "name": "chart",
          "shortDesc": "Chart a portion of the map.",
          "desc": "Chart a portion of the map. The chart for the given area is refreshed; it creates chart for\n any parts of the given area that haven't been charted yet.",
          "parameters": {
            "surface": {
              "name": "surface",
              "type": "SurfaceSpecification",
              "optional": false
            },
            "area": {
              "name": "area",
              "desc": "The area on the given surface to chart.",
              "type": "BoundingBox",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "clear_chart": {
          "name": "clear_chart",
          "shortDesc": "Erases chart data for this force.",
          "desc": "Erases chart data for this force.",
          "parameters": {
            "surface": {
              "name": "surface",
              "desc": "Which surface to erase chart data for or if not provided all surfaces charts are erased.",
              "type": "SurfaceSpecification",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "rechart": {
          "name": "rechart",
          "shortDesc": "Force a rechart of the whole chart.",
          "desc": "Force a rechart of the whole chart.",
          "attribute_type": "function"
        },
        "chart_all": {
          "name": "chart_all",
          "shortDesc": "Chart all generated chunks.",
          "desc": "Chart all generated chunks.",
          "parameters": {
            "surface": {
              "name": "surface",
              "desc": "Which surface to chart or all if not given.",
              "type": "SurfaceSpecification",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "is_chunk_charted": {
          "name": "is_chunk_charted",
          "shortDesc": "Has a chunk been charted?",
          "desc": "Has a chunk been charted?",
          "parameters": {
            "surface": {
              "name": "surface",
              "type": "SurfaceSpecification",
              "optional": false
            },
            "position": {
              "name": "position",
              "desc": "Position of the chunk.",
              "type": "ChunkPosition",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_chunk_visible": {
          "name": "is_chunk_visible",
          "shortDesc": "Is the given chunk currently charted and visible (not covered by fog of war) on the map.",
          "desc": "Is the given chunk currently charted and visible (not covered by fog of war) on the map.",
          "parameters": {
            "surface": {
              "name": "surface",
              "type": "SurfaceSpecification",
              "optional": false
            },
            "position": {
              "name": "position",
              "type": "ChunkPosition",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "cancel_charting": {
          "name": "cancel_charting",
          "shortDesc": "Cancels pending chart requests for the given surface or all surfaces.",
          "desc": "Cancels pending chart requests for the given surface or all surfaces.",
          "parameters": {
            "surface": {
              "name": "surface",
              "type": "SurfaceSpecification",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_ammo_damage_modifier": {
          "name": "get_ammo_damage_modifier",
          "shortDesc": "",
          "parameters": {
            "ammo": {
              "name": "ammo",
              "desc": "Ammo category",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_ammo_damage_modifier": {
          "name": "set_ammo_damage_modifier",
          "shortDesc": "",
          "parameters": {
            "ammo": {
              "name": "ammo",
              "desc": "Ammo category",
              "type": "string",
              "optional": false
            },
            "modifier": {
              "name": "modifier",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_gun_speed_modifier": {
          "name": "get_gun_speed_modifier",
          "shortDesc": "",
          "parameters": {
            "ammo": {
              "name": "ammo",
              "desc": "Ammo category",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_gun_speed_modifier": {
          "name": "set_gun_speed_modifier",
          "shortDesc": "",
          "parameters": {
            "ammo": {
              "name": "ammo",
              "desc": "Ammo category",
              "type": "string",
              "optional": false
            },
            "modifier": {
              "name": "modifier",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_turret_attack_modifier": {
          "name": "get_turret_attack_modifier",
          "shortDesc": "",
          "parameters": {
            "turret": {
              "name": "turret",
              "desc": "Turret prototype name",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_turret_attack_modifier": {
          "name": "set_turret_attack_modifier",
          "shortDesc": "",
          "parameters": {
            "turret": {
              "name": "turret",
              "desc": "Turret prototype name",
              "type": "string",
              "optional": false
            },
            "modifier": {
              "name": "modifier",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "set_cease_fire": {
          "name": "set_cease_fire",
          "shortDesc": "Stop attacking members of a given force.",
          "desc": "Stop attacking members of a given force.",
          "parameters": {
            "other": {
              "name": "other",
              "type": "ForceSpecification",
              "optional": false
            },
            "cease_fire": {
              "name": "cease_fire",
              "desc": "When true , this force won't attack other ; otherwise it will.",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_cease_fire": {
          "name": "get_cease_fire",
          "shortDesc": "Will this force attack members of another force?",
          "desc": "Will this force attack members of another force?",
          "parameters": {
            "other": {
              "name": "other",
              "type": "ForceSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_friend": {
          "name": "set_friend",
          "shortDesc": "Friends have unrestricted access to buildings and turrets won't fire at them.",
          "desc": "Friends have unrestricted access to buildings and turrets won't fire at them.",
          "parameters": {
            "other": {
              "name": "other",
              "type": "ForceSpecification",
              "optional": false
            },
            "friend": {
              "name": "friend",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_friend": {
          "name": "get_friend",
          "shortDesc": "Is this force a friend?",
          "desc": "Is this force a friend?",
          "parameters": {
            "other": {
              "name": "other",
              "type": "ForceSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_pathfinder_busy": {
          "name": "is_pathfinder_busy",
          "shortDesc": "Is pathfinder busy?",
          "desc": "Is pathfinder busy? When the pathfinder is busy, it won't accept any more pathfinding requests.",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "kill_all_units": {
          "name": "kill_all_units",
          "shortDesc": "Kill all units and flush the pathfinder.",
          "desc": "Kill all units and flush the pathfinder.",
          "attribute_type": "function"
        },
        "find_logistic_network_by_position": {
          "name": "find_logistic_network_by_position",
          "shortDesc": "",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "Position to find a network for",
              "type": "Position",
              "optional": false
            },
            "surface": {
              "name": "surface",
              "desc": "Surface to search on",
              "type": "SurfaceSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The found network or `nil` .",
            "type": "LuaLogisticNetwork",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_spawn_position": {
          "name": "set_spawn_position",
          "shortDesc": "",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "The new position on the given surface.",
              "type": "Position",
              "optional": false
            },
            "surface": {
              "name": "surface",
              "desc": "Surface to set the spawn position for.",
              "type": "SurfaceSpecification",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_spawn_position": {
          "name": "get_spawn_position",
          "shortDesc": "",
          "parameters": {
            "surface": {
              "name": "surface",
              "type": "SurfaceSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "type": "Position",
            "optional": false
          },
          "attribute_type": "function"
        },
        "unchart_chunk": {
          "name": "unchart_chunk",
          "shortDesc": "",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "The chunk position to unchart.",
              "type": "ChunkPosition",
              "optional": false
            },
            "surface": {
              "name": "surface",
              "desc": "Surface to unchart on.",
              "type": "SurfaceSpecification",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_item_launched": {
          "name": "get_item_launched",
          "shortDesc": "Gets the count of a given item launched in rockets.",
          "desc": "Gets the count of a given item launched in rockets.",
          "parameters": {
            "item": {
              "name": "item",
              "desc": "The item to get",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The count of the item that has been launched.",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_item_launched": {
          "name": "set_item_launched",
          "shortDesc": "Sets the count of a given item launched in rockets.",
          "desc": "Sets the count of a given item launched in rockets.",
          "parameters": {
            "item": {
              "name": "item",
              "desc": "The item to set",
              "type": "string",
              "optional": false
            },
            "count": {
              "name": "count",
              "desc": "The count to set",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "print": {
          "name": "print",
          "shortDesc": "Print text to the chat console of all players on this force.",
          "desc": "Print text to the chat console of all players on this force.",
          "parameters": {
            "message": {
              "name": "message",
              "type": "LocalisedString",
              "optional": false
            },
            "color": {
              "name": "color",
              "type": "Color",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_trains": {
          "name": "get_trains",
          "shortDesc": "",
          "parameters": {
            "surface": {
              "name": "surface",
              "desc": "If given only trains on the surface are returned.",
              "type": "SurfaceSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaTrain"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "add_chart_tag": {
          "name": "add_chart_tag",
          "shortDesc": "Adds a custom chart tag to the given surface and returns the new tag or `nil` if the given position isn't valid for a chart tag.",
          "desc": "Adds a custom chart tag to the given surface and returns the new tag or `nil` if the given position isn't valid for a chart tag.",
          "parameters": {
            "surface": {
              "name": "surface",
              "desc": "Which surface to add the tag to.",
              "type": "SurfaceSpecification",
              "optional": false
            },
            "tag": {
              "name": "tag",
              "desc": "Table with the following fields",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaCustomChartTag",
            "optional": false
          },
          "attribute_type": "function"
        },
        "find_chart_tags": {
          "name": "find_chart_tags",
          "shortDesc": "Finds all custom chart tags within the given bounding box on the given surface.",
          "desc": "Finds all custom chart tags within the given bounding box on the given surface.",
          "parameters": {
            "surface": {
              "name": "surface",
              "type": "SurfaceSpecification",
              "optional": false
            },
            "area": {
              "name": "area",
              "type": "BoundingBox",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaCustomChartTag"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_saved_technology_progress": {
          "name": "get_saved_technology_progress",
          "shortDesc": "Gets the saved progress for the given technology or `nil` if there is no saved progress.",
          "desc": "Gets the saved progress for the given technology or `nil` if there is no saved progress.",
          "parameters": {
            "technology": {
              "name": "technology",
              "desc": "The technology",
              "type": "TechnologySpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The progress as a percent.",
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_saved_technology_progress": {
          "name": "set_saved_technology_progress",
          "shortDesc": "Sets the saved progress for the given technology.",
          "desc": "Sets the saved progress for the given technology.\n The technology must not be in progress, must not be completed, and the new progress must be < 100%.",
          "parameters": {
            "technology": {
              "name": "technology",
              "desc": "The technology",
              "type": "TechnologySpecification",
              "optional": false
            },
            "double": {
              "name": "double",
              "desc": "Progress as a percent. Set to nil to remove the saved progress.",
              "type": "any",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "reset_evolution": {
          "name": "reset_evolution",
          "shortDesc": "Resets evolution for this force to zero.",
          "desc": "Resets evolution for this force to zero.",
          "attribute_type": "function"
        },
        "play_sound": {
          "name": "play_sound",
          "shortDesc": "Plays a sound for every player on this force",
          "desc": "Plays a sound for every player on this force",
          "parameters": {
            "luaForceplay_sound_param": {
              "name": "luaForceplay_sound_param",
              "desc": "Table with the following fields",
              "type": "LuaForceplay_sound_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaForceplay_sound_param",
              "attributes": {
                "path": {
                  "name": "path",
                  "desc": "The sound to play",
                  "type": "SoundPath",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Where the sound should be played. If not given it's played 'everywhere'.",
                  "type": "Position",
                  "optional": false
                },
                "volume_modifier": {
                  "name": "volume_modifier",
                  "desc": "Must be between 0 and 1 inclusive.",
                  "type": "double",
                  "optional": false
                },
                "override_sound_type": {
                  "name": "override_sound_type",
                  "desc": "Which volume mixer to play the sound through. Uses the default mixer for the sound type if not specified.",
                  "type": "SoundType",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "get_train_stops": {
          "name": "get_train_stops",
          "shortDesc": "Gets train stops matching the given filters.",
          "desc": "Gets train stops matching the given filters.",
          "parameters": {
            "opts": {
              "name": "opts",
              "desc": "Table with the following fields",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_hand_crafting_disabled_for_recipe": {
          "name": "get_hand_crafting_disabled_for_recipe",
          "shortDesc": "Gets if the given recipe is explicitly disabled from being hand crafted.",
          "desc": "Gets if the given recipe is explicitly disabled from being hand crafted.",
          "parameters": {
            "recipe": {
              "name": "recipe",
              "type": {
                "value": [
                  "string",
                  "LuaRecipe"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_hand_crafting_disabled_for_recipe": {
          "name": "set_hand_crafting_disabled_for_recipe",
          "shortDesc": "Sets if the given recipe can be hand-crafted.",
          "desc": "Sets if the given recipe can be hand-crafted. This is used to explicitly disable hand crafting a recipe - it won't allow hand-crafting otherwise not hand-craftable recipes.",
          "parameters": {
            "recipe": {
              "name": "recipe",
              "type": {
                "value": [
                  "string",
                  "LuaRecipe"
                ],
                "type": "Union"
              },
              "optional": false
            },
            "hand_crafting_disabled": {
              "name": "hand_crafting_disabled",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "add_research": {
          "name": "add_research",
          "shortDesc": "Add this technology to the back of the research queue if the queue is enabled.",
          "desc": "Add this technology to the back of the research queue if the queue is enabled.\n Otherwise, set this technology to be researched now.",
          "parameters": {
            "technology": {
              "name": "technology",
              "type": "TechnologySpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the technology was added.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "cancel_current_research": {
          "name": "cancel_current_research",
          "shortDesc": "Stop the research currently in progress.",
          "desc": "Stop the research currently in progress.\n This will remove any dependent technologies from the research queue.",
          "attribute_type": "function"
        },
        "get_linked_inventory": {
          "name": "get_linked_inventory",
          "shortDesc": "Gets the linked inventory for the given prototype and link ID if it exists or `nil` .",
          "desc": "Gets the linked inventory for the given prototype and link ID if it exists or `nil` .",
          "parameters": {
            "prototype": {
              "name": "prototype",
              "type": "EntityPrototypeSpecification",
              "optional": false
            },
            "link_id": {
              "name": "link_id",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaInventory",
            "optional": false
          },
          "attribute_type": "function"
        },
        "name": {
          "name": "name",
          "shortDesc": "Name of the force.",
          "desc": "Name of the force. Example Prints \" `player` \" `game.player.print(game.player.force.name)`",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "technologies": {
          "name": "technologies",
          "shortDesc": "Technologies owned by this force, indexed by their name.",
          "desc": "Technologies owned by this force, indexed by their name. Example Researches the technology for the player's force `game.player.force.technologies[\"steel-processing\"].researched\u00a0=\u00a0true`",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaTechnology"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "recipes": {
          "name": "recipes",
          "shortDesc": "Recipes available to this force, indexed by their name.",
          "desc": "Recipes available to this force, indexed by their name. Example Prints the category of the given recipe `game.player.print(game.player.force.recipes[\"transport-belt\"].category)`",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaRecipe"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "manual_mining_speed_modifier": {
          "name": "manual_mining_speed_modifier",
          "shortDesc": "Multiplier of the manual mining speed.",
          "desc": "Multiplier of the manual mining speed. Default value is `0` .\n The actual mining speed will be multiplied by `1 + manual_mining_speed_modifier` . Example Double the player's mining speed `game.player.force.manual_mining_speed_modifier\u00a0=\u00a01`",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "manual_crafting_speed_modifier": {
          "name": "manual_crafting_speed_modifier",
          "shortDesc": "Multiplier of the manual crafting speed.",
          "desc": "Multiplier of the manual crafting speed. Default value is `0` .\n The actual crafting speed will be multiplied by `1 + manual_crafting_speed_modifier` . Example Double the player's crafting speed `game.player.force.manual_crafting_speed_modifier\u00a0=\u00a01`",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "laboratory_speed_modifier": {
          "name": "laboratory_speed_modifier",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "laboratory_productivity_bonus": {
          "name": "laboratory_productivity_bonus",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "worker_robots_speed_modifier": {
          "name": "worker_robots_speed_modifier",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "worker_robots_battery_modifier": {
          "name": "worker_robots_battery_modifier",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "worker_robots_storage_bonus": {
          "name": "worker_robots_storage_bonus",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "current_research": {
          "name": "current_research",
          "shortDesc": "The current technology in research, or `nil` if no research is currently ongoing.",
          "desc": "The current technology in research, or `nil` if no research is currently ongoing.",
          "type": "LuaTechnology",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "research_progress": {
          "name": "research_progress",
          "shortDesc": "Progress of current research, as a number in range [0, 1].",
          "desc": "Progress of current research, as a number in range [0, 1].",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "previous_research": {
          "name": "previous_research",
          "shortDesc": "The previous research if any.",
          "desc": "The previous research if any.",
          "type": "LuaTechnology",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "inserter_stack_size_bonus": {
          "name": "inserter_stack_size_bonus",
          "shortDesc": "The inserter stack size bonus for non stack inserters",
          "desc": "The inserter stack size bonus for non stack inserters",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "stack_inserter_capacity_bonus": {
          "name": "stack_inserter_capacity_bonus",
          "shortDesc": "Number of items that can be transferred by stack inserters.",
          "desc": "Number of items that can be transferred by stack inserters. When writing to this value, it must be >= 0 and <= 254.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_trash_slot_count": {
          "name": "character_trash_slot_count",
          "shortDesc": "Number of character trash slots.",
          "desc": "Number of character trash slots.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "maximum_following_robot_count": {
          "name": "maximum_following_robot_count",
          "shortDesc": "Maximum number of follower robots.",
          "desc": "Maximum number of follower robots.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "following_robots_lifetime_modifier": {
          "name": "following_robots_lifetime_modifier",
          "shortDesc": "Additional lifetime for following robots.",
          "desc": "Additional lifetime for following robots.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "ghost_time_to_live": {
          "name": "ghost_time_to_live",
          "shortDesc": "The time, in ticks, before a placed ghost disappears.",
          "desc": "The time, in ticks, before a placed ghost disappears.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "players": {
          "name": "players",
          "shortDesc": "Players belonging to this force.",
          "desc": "Players belonging to this force.",
          "type": {
            "value": [
              "LuaPlayer"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ai_controllable": {
          "name": "ai_controllable",
          "shortDesc": "Enables some higher-level AI behaviour for this force.",
          "desc": "Enables some higher-level AI behaviour for this force. When set to `true` , biters belonging to\n this force will automatically expand into new territories, build new spawners, and form unit\n groups. By default, this value is `true` for the enemy force and `false` for all others. **Note:** Setting this to `false` does not turn off biters' AI. They will still move around and attack\n       players who come close. **Note:** It is necessary for a force to be AI controllable in order to be able to create unit groups\n       or build bases from scripts.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "logistic_networks": {
          "name": "logistic_networks",
          "shortDesc": "List of logistic networks, grouped by surface.",
          "desc": "List of logistic networks, grouped by surface.",
          "type": {
            "value": [
              "string",
              {
                "value": [
                  "LuaLogisticNetwork"
                ],
                "type": "Array"
              }
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "item_production_statistics": {
          "name": "item_production_statistics",
          "shortDesc": "The item production statistics for this force.",
          "desc": "The item production statistics for this force.",
          "type": "LuaFlowStatistics",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fluid_production_statistics": {
          "name": "fluid_production_statistics",
          "shortDesc": "The fluid production statistics for this force.",
          "desc": "The fluid production statistics for this force.",
          "type": "LuaFlowStatistics",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "kill_count_statistics": {
          "name": "kill_count_statistics",
          "shortDesc": "The kill counter statistics for this force.",
          "desc": "The kill counter statistics for this force.",
          "type": "LuaFlowStatistics",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "entity_build_count_statistics": {
          "name": "entity_build_count_statistics",
          "shortDesc": "The entity build statistics for this force (built and mined)",
          "desc": "The entity build statistics for this force (built and mined)",
          "type": "LuaFlowStatistics",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "character_running_speed_modifier": {
          "name": "character_running_speed_modifier",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "artillery_range_modifier": {
          "name": "artillery_range_modifier",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_build_distance_bonus": {
          "name": "character_build_distance_bonus",
          "shortDesc": "",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_item_drop_distance_bonus": {
          "name": "character_item_drop_distance_bonus",
          "shortDesc": "",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_reach_distance_bonus": {
          "name": "character_reach_distance_bonus",
          "shortDesc": "",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_resource_reach_distance_bonus": {
          "name": "character_resource_reach_distance_bonus",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_item_pickup_distance_bonus": {
          "name": "character_item_pickup_distance_bonus",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_loot_pickup_distance_bonus": {
          "name": "character_loot_pickup_distance_bonus",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_inventory_slots_bonus": {
          "name": "character_inventory_slots_bonus",
          "shortDesc": "the number of additional inventory slots the character main inventory has.",
          "desc": "the number of additional inventory slots the character main inventory has.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "deconstruction_time_to_live": {
          "name": "deconstruction_time_to_live",
          "shortDesc": "The time, in ticks, before a deconstruction order is removed.",
          "desc": "The time, in ticks, before a deconstruction order is removed.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_health_bonus": {
          "name": "character_health_bonus",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "max_successful_attempts_per_tick_per_construction_queue": {
          "name": "max_successful_attempts_per_tick_per_construction_queue",
          "shortDesc": "",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "max_failed_attempts_per_tick_per_construction_queue": {
          "name": "max_failed_attempts_per_tick_per_construction_queue",
          "shortDesc": "",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "zoom_to_world_enabled": {
          "name": "zoom_to_world_enabled",
          "shortDesc": "Ability to use zoom-to-world on map.",
          "desc": "Ability to use zoom-to-world on map.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "zoom_to_world_ghost_building_enabled": {
          "name": "zoom_to_world_ghost_building_enabled",
          "shortDesc": "Ability to build ghosts through blueprint or direct ghost placement, or \"mine\" ghosts when using zoom-to-world.",
          "desc": "Ability to build ghosts through blueprint or direct ghost placement, or \"mine\" ghosts when using zoom-to-world.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "zoom_to_world_blueprint_enabled": {
          "name": "zoom_to_world_blueprint_enabled",
          "shortDesc": "Ability to create new blueprints using empty blueprint item when using zoom-to-world.",
          "desc": "Ability to create new blueprints using empty blueprint item when using zoom-to-world.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "zoom_to_world_deconstruction_planner_enabled": {
          "name": "zoom_to_world_deconstruction_planner_enabled",
          "shortDesc": "Ability to use deconstruction planner when using zoom-to-world.",
          "desc": "Ability to use deconstruction planner when using zoom-to-world.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "zoom_to_world_selection_tool_enabled": {
          "name": "zoom_to_world_selection_tool_enabled",
          "shortDesc": "Ability to use custom selection tools when using zoom-to-world.",
          "desc": "Ability to use custom selection tools when using zoom-to-world.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "character_logistic_requests": {
          "name": "character_logistic_requests",
          "shortDesc": "`true` if character requester logistics is enabled.",
          "desc": "`true` if character requester logistics is enabled.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "rockets_launched": {
          "name": "rockets_launched",
          "shortDesc": "The number of rockets launched.",
          "desc": "The number of rockets launched.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "items_launched": {
          "name": "items_launched",
          "shortDesc": "All of the items that have been launched in rockets.",
          "desc": "All of the items that have been launched in rockets.",
          "type": {
            "value": [
              "string",
              "uint"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "connected_players": {
          "name": "connected_players",
          "shortDesc": "The connected players belonging to this force.",
          "desc": "The connected players belonging to this force. This is primarily useful when you want to do some action against all online players of this force. **Note:** This does *not* index using player index. See [LuaPlayer::index](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.index) on each player instance for the player index.",
          "type": {
            "value": [
              "LuaPlayer"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mining_drill_productivity_bonus": {
          "name": "mining_drill_productivity_bonus",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "train_braking_force_bonus": {
          "name": "train_braking_force_bonus",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "evolution_factor": {
          "name": "evolution_factor",
          "shortDesc": "Evolution factor of this force.",
          "desc": "Evolution factor of this force.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "evolution_factor_by_pollution": {
          "name": "evolution_factor_by_pollution",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "evolution_factor_by_time": {
          "name": "evolution_factor_by_time",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "evolution_factor_by_killing_spawners": {
          "name": "evolution_factor_by_killing_spawners",
          "shortDesc": "",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "friendly_fire": {
          "name": "friendly_fire",
          "shortDesc": "If friendly fire is enabled for this force.",
          "desc": "If friendly fire is enabled for this force.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "share_chart": {
          "name": "share_chart",
          "shortDesc": "If sharing chart data is enabled for this force.",
          "desc": "If sharing chart data is enabled for this force.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "research_queue_enabled": {
          "name": "research_queue_enabled",
          "shortDesc": "Whether the research queue is available for this force.",
          "desc": "Whether the research queue is available for this force.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "index": {
          "name": "index",
          "shortDesc": "Unique ID associated with this force.",
          "desc": "Unique ID associated with this force.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "research_queue": {
          "name": "research_queue",
          "shortDesc": "The research queue of this force.",
          "desc": "The research queue of this force.\n Reading this attribute gives an array of [LuaTechnology](https://lua-api.factorio.com/latest/LuaTechnology.html) . To write to this, the entire table must be written. Providing an empty table or `nil` will empty the research queue and cancel the current research.\n Writing to this when the research queue is disabled will simply set the last research in the table as the current research. **Note:** The first research in the queue is the current research.",
          "type": {
            "value": [
              "TechnologySpecification"
            ],
            "type": "Array"
          },
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "research_enabled": {
          "name": "research_enabled",
          "shortDesc": "Whether research is enabled for this force, see [LuaForce::enable_research](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.enable_research) and [LuaForce::disable_research](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.disable_research)",
          "desc": "Whether research is enabled for this force, see [LuaForce::enable_research](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.enable_research) and [LuaForce::disable_research](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.disable_research)",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaFuelCategoryPrototype": {
      "name": "LuaFuelCategoryPrototype",
      "desc": "Prototype of a fuel category.",
      "url": "LuaFuelCategoryPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaGameScript": {
      "name": "LuaGameScript",
      "desc": "Main toplevel type, provides access to most of the API though its members. An instance\n of LuaGameScript is available as the global object named `game` .",
      "url": "LuaGameScript.html",
      "attributes": {
        "set_game_state": {
          "name": "set_game_state",
          "shortDesc": "Set scenario state.",
          "desc": "Set scenario state.",
          "parameters": {
            "luaGameScriptset_game_state_param": {
              "name": "luaGameScriptset_game_state_param",
              "desc": "Table with the following fields",
              "type": "LuaGameScriptset_game_state_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaGameScriptset_game_state_param",
              "attributes": {
                "game_finished": {
                  "name": "game_finished",
                  "type": "boolean",
                  "optional": false
                },
                "player_won": {
                  "name": "player_won",
                  "type": "boolean",
                  "optional": false
                },
                "next_level": {
                  "name": "next_level",
                  "type": "string",
                  "optional": false
                },
                "can_continue": {
                  "name": "can_continue",
                  "type": "boolean",
                  "optional": false
                },
                "victorious_force": {
                  "name": "victorious_force",
                  "type": "ForceSpecification",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "get_entity_by_tag": {
          "name": "get_entity_by_tag",
          "shortDesc": "",
          "parameters": {
            "tag": {
              "name": "tag",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaEntity",
            "optional": false
          },
          "attribute_type": "function"
        },
        "show_message_dialog": {
          "name": "show_message_dialog",
          "shortDesc": "Show an in-game message dialog.",
          "desc": "Show an in-game message dialog.",
          "parameters": {
            "luaGameScriptshow_message_dialog_param": {
              "name": "luaGameScriptshow_message_dialog_param",
              "desc": "Table with the following fields",
              "type": "LuaGameScriptshow_message_dialog_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaGameScriptshow_message_dialog_param",
              "attributes": {
                "text": {
                  "name": "text",
                  "desc": "What the dialog should say",
                  "type": "LocalisedString",
                  "optional": false
                },
                "image": {
                  "name": "image",
                  "desc": "Path to an image to show on the dialog",
                  "type": "string",
                  "optional": false
                },
                "point_to": {
                  "name": "point_to",
                  "desc": "If specified, dialog will show an arrow pointing to this place. When not specified, the arrow will point to the player's position.  (Use point_to={type=\"nowhere\"} to remove the arrow entirely.) The dialog itself will be placed near the arrow's target.",
                  "type": "GuiArrowSpecification",
                  "optional": false
                },
                "style": {
                  "name": "style",
                  "desc": "The gui style to use for this speech bubble. Must be of type speech_bubble.",
                  "type": "string",
                  "optional": false
                },
                "wrapper_frame_style": {
                  "name": "wrapper_frame_style",
                  "desc": "Must be of type flow_style.",
                  "type": "string",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "is_demo": {
          "name": "is_demo",
          "shortDesc": "Is this the demo version of Factorio?",
          "desc": "Is this the demo version of Factorio?",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "reload_script": {
          "name": "reload_script",
          "shortDesc": "Forces a reload of the scenario script from the original scenario location.",
          "desc": "Forces a reload of the scenario script from the original scenario location.",
          "attribute_type": "function"
        },
        "reload_mods": {
          "name": "reload_mods",
          "shortDesc": "Forces a reload of all mods.",
          "desc": "Forces a reload of all mods.",
          "attribute_type": "function"
        },
        "save_atlas": {
          "name": "save_atlas",
          "shortDesc": "Saves the current configuration of Atlas to a file.",
          "desc": "Saves the current configuration of Atlas to a file. This will result in huge file containing all\n of the game graphics moved to as small space as possible.",
          "attribute_type": "function"
        },
        "check_consistency": {
          "name": "check_consistency",
          "shortDesc": "Run internal consistency checks.",
          "desc": "Run internal consistency checks. Allegedly prints any errors it finds.",
          "attribute_type": "function"
        },
        "regenerate_entity": {
          "name": "regenerate_entity",
          "shortDesc": "Regenerate autoplacement of some entities on all surfaces.",
          "desc": "Regenerate autoplacement of some entities on all surfaces. This can be used to autoplace newly-added entities.",
          "parameters": {
            "entities": {
              "name": "entities",
              "desc": "Prototype names of entity or entities to autoplace.",
              "type": {
                "value": [
                  "string",
                  {
                    "value": [
                      "string"
                    ],
                    "type": "Array"
                  }
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "take_screenshot": {
          "name": "take_screenshot",
          "shortDesc": "Take a screenshot and save it to a file.",
          "desc": "Take a screenshot and save it to a file.",
          "parameters": {
            "luaGameScripttake_screenshot_param": {
              "name": "luaGameScripttake_screenshot_param",
              "desc": "Table with the following fields",
              "type": "LuaGameScripttake_screenshot_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaGameScripttake_screenshot_param",
              "attributes": {
                "player": {
                  "name": "player",
                  "type": "PlayerSpecification",
                  "optional": false
                },
                "by_player": {
                  "name": "by_player",
                  "desc": "If defined, the screenshot will only be taken for this player.",
                  "type": "PlayerSpecification",
                  "optional": false
                },
                "surface": {
                  "name": "surface",
                  "desc": "If defined, the screenshot will be taken on this surface.",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "If defined, the screenshot will be centered on this position.",
                  "type": "Position",
                  "optional": false
                },
                "resolution": {
                  "name": "resolution",
                  "desc": "Maximum allowed resolution is 16384x16384 (resp. 8192x8192 when anti_alias is true), but maximum recommended resolution is 4096x4096 (resp. 2048x2048).",
                  "type": "Position",
                  "optional": false
                },
                "zoom": {
                  "name": "zoom",
                  "type": "double",
                  "optional": false
                },
                "path": {
                  "name": "path",
                  "desc": "Path to save the screenshot in",
                  "type": "string",
                  "optional": false
                },
                "show_gui": {
                  "name": "show_gui",
                  "desc": "Include game GUI in the screenshot?",
                  "type": "boolean",
                  "optional": false
                },
                "show_entity_info": {
                  "name": "show_entity_info",
                  "desc": "Include entity info (alt-mode)?",
                  "type": "boolean",
                  "optional": false
                },
                "show_cursor_building_preview": {
                  "name": "show_cursor_building_preview",
                  "desc": "When true, and player is specified, building preview for item in player's cursor will be rendered also.",
                  "type": "boolean",
                  "optional": false
                },
                "anti_alias": {
                  "name": "anti_alias",
                  "desc": "Render in double resolution and scale down (including GUI)?",
                  "type": "boolean",
                  "optional": false
                },
                "quality": {
                  "name": "quality",
                  "desc": "The render quality if using jpg format (0-100 inclusive).",
                  "type": "int",
                  "optional": false
                },
                "allow_in_replay": {
                  "name": "allow_in_replay",
                  "desc": "If true, the screenshot will be saved even during replay playback, otherwise this function call does nothing in replays.",
                  "type": "boolean",
                  "optional": false
                },
                "daytime": {
                  "name": "daytime",
                  "desc": "Overrides current surface daytime for duration of screenshot rendering.",
                  "type": "double",
                  "optional": false
                },
                "water_tick": {
                  "name": "water_tick",
                  "desc": "Overrides tick of water animation (if animated water is enabled).",
                  "type": "uint",
                  "optional": false
                },
                "force_render": {
                  "name": "force_render",
                  "desc": "Screenshot requests are processed in between update and render. The game may skip rendering (drop frames) if previous frame has not finished rendering or the game simulation  starts to fall under 60 updates per second. If force_render is set to true, the game won't drop frames and process the screenshot request at the end of the update  in which the request was created. This is not honored on multiplayer clients that are catching up to server.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "set_wait_for_screenshots_to_finish": {
          "name": "set_wait_for_screenshots_to_finish",
          "shortDesc": "Forces the screenshot saving system to wait until all queued screenshots have been written to disk.",
          "desc": "Forces the screenshot saving system to wait until all queued screenshots have been written to disk.",
          "attribute_type": "function"
        },
        "take_technology_screenshot": {
          "name": "take_technology_screenshot",
          "shortDesc": "",
          "parameters": {
            "luaGameScripttake_technology_screenshot_param": {
              "name": "luaGameScripttake_technology_screenshot_param",
              "desc": "Table with the following fields",
              "type": "LuaGameScripttake_technology_screenshot_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaGameScripttake_technology_screenshot_param",
              "attributes": {
                "force": {
                  "name": "force",
                  "desc": "The force to use. If not given the \"player \" force is used.",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "path": {
                  "name": "path",
                  "desc": "Path to save the screenshot in.",
                  "type": "string",
                  "optional": false
                },
                "by_player": {
                  "name": "by_player",
                  "desc": "If defined, the screenshot will only be taken for this player.",
                  "type": "PlayerSpecification",
                  "optional": false
                },
                "selected_technology": {
                  "name": "selected_technology",
                  "desc": "The technology to highlight.",
                  "type": "TechnologySpecification",
                  "optional": false
                },
                "skip_disabled": {
                  "name": "skip_disabled",
                  "desc": "If true , disabled technologies will be skipped. Their successors  will be attached to the disabled technology's parents. Defaults to false .",
                  "type": "boolean",
                  "optional": false
                },
                "quality": {
                  "name": "quality",
                  "desc": "The render quality if using jpg format (0-100 inclusive).",
                  "type": "int",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "table_to_json": {
          "name": "table_to_json",
          "shortDesc": "Convert a table to a JSON string",
          "desc": "Convert a table to a JSON string",
          "parameters": {
            "data": {
              "name": "data",
              "type": "table",
              "optional": false
            }
          },
          "returnObject": {
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "json_to_table": {
          "name": "json_to_table",
          "shortDesc": "Convert a JSON string to a table",
          "desc": "Convert a JSON string to a table",
          "parameters": {
            "json": {
              "name": "json",
              "desc": "The string to convert",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The returned object, or `nil` if the json was invalid.",
            "type": "Any",
            "optional": false
          },
          "attribute_type": "function"
        },
        "write_file": {
          "name": "write_file",
          "shortDesc": "Write a string to a file.",
          "desc": "Write a string to a file.",
          "parameters": {
            "filename": {
              "name": "filename",
              "desc": "Path to the file to write to.",
              "type": "string",
              "optional": false
            },
            "data": {
              "name": "data",
              "desc": "File content",
              "type": "LocalisedString",
              "optional": false
            },
            "append": {
              "name": "append",
              "desc": "When true , this will append to the end of the file. Defaults to false , which will overwrite any pre-existing file with the new data.",
              "type": "boolean",
              "optional": false
            },
            "for_player": {
              "name": "for_player",
              "desc": "If given, the file will only be written for this player_index. 0 means only the server if one exists.",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "remove_path": {
          "name": "remove_path",
          "shortDesc": "Remove file or directory.",
          "desc": "Remove file or directory. Given path is taken relative to the script output directory. Can be used\n to remove files created by [LuaGameScript::write_file](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.write_file) .",
          "parameters": {
            "path": {
              "name": "path",
              "desc": "Path to remove, relative to the script output directory",
              "type": "string",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "remove_offline_players": {
          "name": "remove_offline_players",
          "shortDesc": "Remove players who are currently not connected from the map.",
          "desc": "Remove players who are currently not connected from the map.",
          "parameters": {
            "players": {
              "name": "players",
              "desc": "List of players to remove. If not specified,  remove all offline players.",
              "type": {
                "value": [
                  {
                    "value": [
                      "LuaPlayer",
                      "string"
                    ],
                    "type": "Union"
                  }
                ],
                "type": "Array"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "force_crc": {
          "name": "force_crc",
          "shortDesc": "Force a CRC check.",
          "desc": "Force a CRC check. Tells all peers to calculate their current map CRC; these CRC are then compared\n against each other. If a mismatch is detected, the game is desynced and some peers are forced to\n reconnect.",
          "attribute_type": "function"
        },
        "create_force": {
          "name": "create_force",
          "shortDesc": "Create a new force.",
          "desc": "Create a new force.",
          "parameters": {
            "force": {
              "name": "force",
              "desc": "Name of the new force",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The force that was just created",
            "type": "LuaForce",
            "optional": false
          },
          "attribute_type": "function"
        },
        "merge_forces": {
          "name": "merge_forces",
          "shortDesc": "Marks two forces to be merge together.",
          "desc": "Marks two forces to be merge together. All entities in the source force will be reassigned to the target force.\n The source force will then be destroyed.",
          "parameters": {
            "source": {
              "name": "source",
              "desc": "The force to remove",
              "type": "ForceSpecification",
              "optional": false
            },
            "destination": {
              "name": "destination",
              "desc": "The force to reassign all entities to",
              "type": "ForceSpecification",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "create_surface": {
          "name": "create_surface",
          "shortDesc": "Create a new surface",
          "desc": "Create a new surface",
          "parameters": {
            "name": {
              "name": "name",
              "desc": "Name of the new surface",
              "type": "string",
              "optional": false
            },
            "settings": {
              "name": "settings",
              "desc": "Map generation settings",
              "type": "MapGenSettings",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The surface that was just created",
            "type": "LuaSurface",
            "optional": false
          },
          "attribute_type": "function"
        },
        "server_save": {
          "name": "server_save",
          "shortDesc": "Instruct the server to save the map.",
          "desc": "Instruct the server to save the map.",
          "parameters": {
            "name": {
              "name": "name",
              "desc": "Save name. If not specified, writes into the currently-running save.",
              "type": "string",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "auto_save": {
          "name": "auto_save",
          "shortDesc": "Instruct the game to perform an auto-save.",
          "desc": "Instruct the game to perform an auto-save.",
          "parameters": {
            "name": {
              "name": "name",
              "desc": "The autosave name if any. Saves will be named _autosave-*name* when provided.",
              "type": "string",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "delete_surface": {
          "name": "delete_surface",
          "shortDesc": "Deletes the given surface and all entities on it.",
          "desc": "Deletes the given surface and all entities on it.",
          "parameters": {
            "surface": {
              "name": "surface",
              "desc": "The surface to be deleted. Currently the primary surface (1, 'nauvis') cannot be deleted.",
              "type": {
                "value": [
                  "string",
                  "LuaSurface"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "disable_replay": {
          "name": "disable_replay",
          "shortDesc": "Disables replay saving for the current save file.",
          "desc": "Disables replay saving for the current save file. Once done there's no way to re-enable replay saving for the save file without loading an old save.",
          "attribute_type": "function"
        },
        "disable_tutorial_triggers": {
          "name": "disable_tutorial_triggers",
          "shortDesc": "Disables tutorial triggers, that unlock new tutorials and show notices about unlocked tutorials.",
          "desc": "Disables tutorial triggers, that unlock new tutorials and show notices about unlocked tutorials.",
          "attribute_type": "function"
        },
        "direction_to_string": {
          "name": "direction_to_string",
          "shortDesc": "Converts the given direction into the string version of the direction.",
          "desc": "Converts the given direction into the string version of the direction.",
          "parameters": {
            "direction": {
              "name": "direction",
              "type": "defines.direction",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "print": {
          "name": "print",
          "shortDesc": "Print text to the chat console all players.",
          "desc": "Print text to the chat console all players.",
          "parameters": {
            "message": {
              "name": "message",
              "type": "LocalisedString",
              "optional": false
            },
            "color": {
              "name": "color",
              "type": "Color",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "create_random_generator": {
          "name": "create_random_generator",
          "shortDesc": "Creates a deterministic standalone random generator with the given seed or if a seed is not provided the initial map seed is used.",
          "desc": "Creates a deterministic standalone random generator with the given seed or if a seed is not provided the initial map seed is used.",
          "parameters": {
            "seed": {
              "name": "seed",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaRandomGenerator",
            "optional": false
          },
          "attribute_type": "function"
        },
        "check_prototype_translations": {
          "name": "check_prototype_translations",
          "shortDesc": "Goes over all items, entities, tiles, recipes, technologies among other things and logs if the locale is incorrect.",
          "desc": "Goes over all items, entities, tiles, recipes, technologies among other things and logs if the locale is incorrect.",
          "attribute_type": "function"
        },
        "play_sound": {
          "name": "play_sound",
          "shortDesc": "Plays a sound for every player in the game on every surface.",
          "desc": "Plays a sound for every player in the game on every surface.",
          "parameters": {
            "luaGameScriptplay_sound_param": {
              "name": "luaGameScriptplay_sound_param",
              "desc": "Table with the following fields",
              "type": "LuaGameScriptplay_sound_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaGameScriptplay_sound_param",
              "attributes": {
                "path": {
                  "name": "path",
                  "desc": "The sound to play",
                  "type": "SoundPath",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Where the sound should be played. If not given it's played 'everywhere'.",
                  "type": "Position",
                  "optional": false
                },
                "volume_modifier": {
                  "name": "volume_modifier",
                  "desc": "Must be between 0 and 1 inclusive.",
                  "type": "double",
                  "optional": false
                },
                "override_sound_type": {
                  "name": "override_sound_type",
                  "desc": "Which volume mixer to play the sound through. Uses the default mixer for the sound type if not specified.",
                  "type": "SoundType",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "is_valid_sound_path": {
          "name": "is_valid_sound_path",
          "shortDesc": "Checks if the given sound path is valid.",
          "desc": "Checks if the given sound path is valid.",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_valid_sprite_path": {
          "name": "is_valid_sprite_path",
          "shortDesc": "Returns `true` if sprite_path is valid and contains loaded sprite, otherwise `false` .",
          "desc": "Returns `true` if sprite_path is valid and contains loaded sprite, otherwise `false` . Sprite path of type `file` doesn't validate if file exists.",
          "parameters": {
            "sprite_path": {
              "name": "sprite_path",
              "desc": "Path to a image.",
              "type": "SpritePath",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "kick_player": {
          "name": "kick_player",
          "shortDesc": "Kicks the given player from this multiplayer game.",
          "desc": "Kicks the given player from this multiplayer game. Does nothing if this is a single player game or if the player running this isn't an admin.",
          "parameters": {
            "PlayerSpecification": {
              "name": "PlayerSpecification",
              "desc": "The player to kick.",
              "type": "any",
              "optional": false
            },
            "reason": {
              "name": "reason",
              "desc": "The reason given if any.",
              "type": "LocalisedString",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "ban_player": {
          "name": "ban_player",
          "shortDesc": "Bans the given player from this multiplayer game.",
          "desc": "Bans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admin.",
          "parameters": {
            "PlayerSpecification": {
              "name": "PlayerSpecification",
              "desc": "The player to ban.",
              "type": "any",
              "optional": false
            },
            "reason": {
              "name": "reason",
              "desc": "The reason given if any.",
              "type": "LocalisedString",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "unban_player": {
          "name": "unban_player",
          "shortDesc": "Unbans the given player from this multiplayer game.",
          "desc": "Unbans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admin.",
          "parameters": {
            "PlayerSpecification": {
              "name": "PlayerSpecification",
              "desc": "The player to unban.",
              "type": "any",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "purge_player": {
          "name": "purge_player",
          "shortDesc": "Purges the given players messages from the game.",
          "desc": "Purges the given players messages from the game. Does nothing if the player running this isn't an admin.",
          "parameters": {
            "PlayerSpecification": {
              "name": "PlayerSpecification",
              "desc": "The player to purge.",
              "type": "any",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "mute_player": {
          "name": "mute_player",
          "shortDesc": "Mutes the given player.",
          "desc": "Mutes the given player. Does nothing if the player running this isn't an admin.",
          "parameters": {
            "PlayerSpecification": {
              "name": "PlayerSpecification",
              "desc": "The player to mute.",
              "type": "any",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "unmute_player": {
          "name": "unmute_player",
          "shortDesc": "Unmutes the given player.",
          "desc": "Unmutes the given player. Does nothing if the player running this isn't an admin.",
          "parameters": {
            "PlayerSpecification": {
              "name": "PlayerSpecification",
              "desc": "The player to unmute.",
              "type": "any",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "count_pipe_groups": {
          "name": "count_pipe_groups",
          "shortDesc": "Counts how many distinct groups of pipes exist in the world.",
          "desc": "Counts how many distinct groups of pipes exist in the world.",
          "attribute_type": "function"
        },
        "is_multiplayer": {
          "name": "is_multiplayer",
          "shortDesc": "Is the map loaded is multiplayer?",
          "desc": "Is the map loaded is multiplayer?",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_active_entities_count": {
          "name": "get_active_entities_count",
          "shortDesc": "Gets the number of entities that are active (updated each tick).",
          "desc": "Gets the number of entities that are active (updated each tick).",
          "parameters": {
            "surface": {
              "name": "surface",
              "desc": "If give, only the entities active on this surface are counted.",
              "type": "SurfaceSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_map_exchange_string": {
          "name": "get_map_exchange_string",
          "shortDesc": "Gets the map exchange string for the map generation settings that were used to create this map.",
          "desc": "Gets the map exchange string for the map generation settings that were used to create this map.",
          "returnObject": {
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "parse_map_exchange_string": {
          "name": "parse_map_exchange_string",
          "shortDesc": "Convert a map exchange string to map gen settings and map settings.",
          "desc": "Convert a map exchange string to map gen settings and map settings.",
          "parameters": {
            "map_exchange_string": {
              "name": "map_exchange_string",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "MapExchangeStringData",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_train_stops": {
          "name": "get_train_stops",
          "shortDesc": "Gets train stops matching the given filters.",
          "desc": "Gets train stops matching the given filters.",
          "parameters": {
            "opts": {
              "name": "opts",
              "desc": "Table with the following fields",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_player": {
          "name": "get_player",
          "shortDesc": "Gets the given player or returns `nil` if no player is found.",
          "desc": "Gets the given player or returns `nil` if no player is found.",
          "parameters": {
            "player": {
              "name": "player",
              "desc": "The player index or name.",
              "type": {
                "value": [
                  "uint",
                  "string"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaPlayer",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_surface": {
          "name": "get_surface",
          "shortDesc": "Gets the given surface or returns `nil` if no surface is found.",
          "desc": "Gets the given surface or returns `nil` if no surface is found.",
          "parameters": {
            "surface": {
              "name": "surface",
              "desc": "The surface index or name.",
              "type": {
                "value": [
                  "uint",
                  "string"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaSurface",
            "optional": false
          },
          "attribute_type": "function"
        },
        "create_profiler": {
          "name": "create_profiler",
          "shortDesc": "Creates a [LuaProfiler](https://lua-api.factorio.com/latest/LuaProfiler.html) , which is used for measuring script performance.",
          "desc": "Creates a [LuaProfiler](https://lua-api.factorio.com/latest/LuaProfiler.html) , which is used for measuring script performance.",
          "parameters": {
            "stopped": {
              "name": "stopped",
              "desc": "Create the timer stopped",
              "type": "boolean",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaProfiler",
            "optional": false
          },
          "attribute_type": "function"
        },
        "evaluate_expression": {
          "name": "evaluate_expression",
          "shortDesc": "Evaluate an expression, substituting variables as provided.",
          "desc": "Evaluate an expression, substituting variables as provided.\n For details on the formula, see the relevant page on the [Factorio wiki](https://lua-api.factorio.com/latest/https://wiki.factorio.com/Prototype/Technology#unit) .",
          "parameters": {
            "expression": {
              "name": "expression",
              "desc": "The expression to evaluate.",
              "type": "string",
              "optional": false
            },
            "variables": {
              "name": "variables",
              "desc": "Variables to be substituted.",
              "type": {
                "value": [
                  "string",
                  "double"
                ],
                "type": "Table"
              },
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_filtered_entity_prototypes": {
          "name": "get_filtered_entity_prototypes",
          "shortDesc": "Returns a dictionary of all LuaEntityPrototypes that fit the given filters.",
          "desc": "Returns a dictionary of all LuaEntityPrototypes that fit the given filters. The prototypes are indexed by `name` .",
          "parameters": {
            "filters": {
              "name": "filters",
              "type": "EntityPrototypeFilters",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "CustomDictionary",
                "string",
                "LuaEntityPrototype"
              ]
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_filtered_item_prototypes": {
          "name": "get_filtered_item_prototypes",
          "shortDesc": "Returns a dictionary of all LuaItemPrototypes that fit the given filters.",
          "desc": "Returns a dictionary of all LuaItemPrototypes that fit the given filters. The prototypes are indexed by `name` .",
          "parameters": {
            "filters": {
              "name": "filters",
              "type": "ItemPrototypeFilters",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "CustomDictionary",
                "string",
                "LuaItemPrototype"
              ]
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_filtered_equipment_prototypes": {
          "name": "get_filtered_equipment_prototypes",
          "shortDesc": "Returns a dictionary of all LuaEquipmentPrototypes that fit the given filters.",
          "desc": "Returns a dictionary of all LuaEquipmentPrototypes that fit the given filters. The prototypes are indexed by `name` .",
          "parameters": {
            "filters": {
              "name": "filters",
              "type": "EquipmentPrototypeFilters",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "CustomDictionary",
                "string",
                "LuaEquipmentPrototype"
              ]
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_filtered_mod_setting_prototypes": {
          "name": "get_filtered_mod_setting_prototypes",
          "shortDesc": "Returns a dictionary of all LuaModSettingPrototypes that fit the given filters.",
          "desc": "Returns a dictionary of all LuaModSettingPrototypes that fit the given filters. The prototypes are indexed by `name` .",
          "parameters": {
            "filters": {
              "name": "filters",
              "type": "ModSettingPrototypeFilters",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "CustomDictionary",
                "string",
                "LuaModSettingPrototype"
              ]
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_filtered_achievement_prototypes": {
          "name": "get_filtered_achievement_prototypes",
          "shortDesc": "Returns a dictionary of all LuaAchievementPrototypes that fit the given filters.",
          "desc": "Returns a dictionary of all LuaAchievementPrototypes that fit the given filters. The prototypes are indexed by `name` .",
          "parameters": {
            "filters": {
              "name": "filters",
              "type": "AchievementPrototypeFilters",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "CustomDictionary",
                "string",
                "LuaAchievementPrototype"
              ]
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_filtered_tile_prototypes": {
          "name": "get_filtered_tile_prototypes",
          "shortDesc": "Returns a dictionary of all LuaTilePrototypes that fit the given filters.",
          "desc": "Returns a dictionary of all LuaTilePrototypes that fit the given filters. The prototypes are indexed by `name` .",
          "parameters": {
            "filters": {
              "name": "filters",
              "type": "TilePrototypeFilters",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "CustomDictionary",
                "string",
                "LuaTilePrototype"
              ]
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_filtered_decorative_prototypes": {
          "name": "get_filtered_decorative_prototypes",
          "shortDesc": "Returns a dictionary of all LuaDecorativePrototypes that fit the given filters.",
          "desc": "Returns a dictionary of all LuaDecorativePrototypes that fit the given filters. The prototypes are indexed by `name` .",
          "parameters": {
            "filters": {
              "name": "filters",
              "type": "DecorativePrototypeFilters",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "CustomDictionary",
                "string",
                "LuaDecorativePrototype"
              ]
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_filtered_fluid_prototypes": {
          "name": "get_filtered_fluid_prototypes",
          "shortDesc": "Returns a dictionary of all LuaFluidPrototypes that fit the given filters.",
          "desc": "Returns a dictionary of all LuaFluidPrototypes that fit the given filters. The prototypes are indexed by `name` .",
          "parameters": {
            "filters": {
              "name": "filters",
              "type": "FluidPrototypeFilters",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "CustomDictionary",
                "string",
                "LuaFluidPrototype"
              ]
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_filtered_recipe_prototypes": {
          "name": "get_filtered_recipe_prototypes",
          "shortDesc": "Returns a dictionary of all LuaRecipePrototypes that fit the given filters.",
          "desc": "Returns a dictionary of all LuaRecipePrototypes that fit the given filters. The prototypes are indexed by `name` .",
          "parameters": {
            "filters": {
              "name": "filters",
              "type": "RecipePrototypeFilters",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "CustomDictionary",
                "string",
                "LuaRecipePrototype"
              ]
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_filtered_technology_prototypes": {
          "name": "get_filtered_technology_prototypes",
          "shortDesc": "Returns a dictionary of all LuaTechnologyPrototypes that fit the given filters.",
          "desc": "Returns a dictionary of all LuaTechnologyPrototypes that fit the given filters. The prototypes are indexed by `name` .",
          "parameters": {
            "filters": {
              "name": "filters",
              "type": "TechnologyPrototypeFilters",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "CustomDictionary",
                "string",
                "LuaTechnologyPrototype"
              ]
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "create_inventory": {
          "name": "create_inventory",
          "shortDesc": "Creates an inventory that is not owned by any game object.",
          "desc": "Creates an inventory that is not owned by any game object.\n It can be resized later with [LuaInventory::resize](https://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.resize) .",
          "parameters": {
            "size": {
              "name": "size",
              "desc": "The number of slots the inventory initially has.",
              "type": "uint16",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaInventory",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_script_inventories": {
          "name": "get_script_inventories",
          "shortDesc": "Gets the inventories created through [LuaGameScript::create_inventory](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.create_inventory)",
          "desc": "Gets the inventories created through [LuaGameScript::create_inventory](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.create_inventory)",
          "parameters": {
            "mod": {
              "name": "mod",
              "desc": "The mod who's inventories to get. If not provided all inventories are returned.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "A mapping of mod name to array of inventories owned by that mod.",
            "type": {
              "value": [
                "string",
                {
                  "value": [
                    "LuaInventory"
                  ],
                  "type": "Array"
                }
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "reset_time_played": {
          "name": "reset_time_played",
          "shortDesc": "Resets the amount of time played for this map.",
          "desc": "Resets the amount of time played for this map.",
          "attribute_type": "function"
        },
        "encode_string": {
          "name": "encode_string",
          "shortDesc": "Deflates and base64 encodes the given string.",
          "desc": "Deflates and base64 encodes the given string.",
          "parameters": {
            "string": {
              "name": "string",
              "desc": "The string to encode.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The encoded string or `nil` if the encode failed.",
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "decode_string": {
          "name": "decode_string",
          "shortDesc": "Base64 decodes and inflates the given string.",
          "desc": "Base64 decodes and inflates the given string.",
          "parameters": {
            "string": {
              "name": "string",
              "desc": "The string to decode.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The decoded string or `nil` if the decode failed.",
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "object_name": {
          "name": "object_name",
          "shortDesc": "This object's name.",
          "desc": "This object's name.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "player": {
          "name": "player",
          "shortDesc": "The player typing at the console - `nil` in all other instances.",
          "desc": "The player typing at the console - `nil` in all other instances. See [LuaGameScript::players](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players) for accessing all players.",
          "type": "LuaPlayer",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "players": {
          "name": "players",
          "shortDesc": "",
          "desc": "**Note:** This is a sparse table so pairs(), a known player index, or player name should be used to access elements.",
          "type": {
            "value": [
              "CustomDictionary",
              {
                "value": [
                  "uint",
                  "string"
                ],
                "type": "Union"
              },
              "LuaPlayer"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "map_settings": {
          "name": "map_settings",
          "shortDesc": "",
          "type": "MapSettings",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "difficulty_settings": {
          "name": "difficulty_settings",
          "shortDesc": "The currently active set of difficulty settings.",
          "desc": "The currently active set of difficulty settings. Even though this property is marked as read-only, the members of the dictionary that is returned can be modified mid-game. This is however not recommended as different difficulties can have differing technology and recipe trees, which can cause problems for players. Example This will set the technology price multiplier to 12. `game.difficulty_settings.technology_price_multiplier\u00a0=\u00a012`",
          "type": "DifficultySettings",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "difficulty": {
          "name": "difficulty",
          "shortDesc": "Current scenario difficulty.",
          "desc": "Current scenario difficulty.",
          "type": "defines.difficulty",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "forces": {
          "name": "forces",
          "shortDesc": "",
          "type": {
            "value": [
              "CustomDictionary",
              {
                "value": [
                  "uint",
                  "string"
                ],
                "type": "Union"
              },
              "LuaForce"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "entity_prototypes": {
          "name": "entity_prototypes",
          "shortDesc": "A dictionary containing every LuaEntityPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaEntityPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaEntityPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "item_prototypes": {
          "name": "item_prototypes",
          "shortDesc": "A dictionary containing every LuaItemPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaItemPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaItemPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fluid_prototypes": {
          "name": "fluid_prototypes",
          "shortDesc": "A dictionary containing every LuaFluidPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaFluidPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaFluidPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tile_prototypes": {
          "name": "tile_prototypes",
          "shortDesc": "A dictionary containing every LuaTilePrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaTilePrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaTilePrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "equipment_prototypes": {
          "name": "equipment_prototypes",
          "shortDesc": "A dictionary containing every LuaEquipmentPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaEquipmentPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaEquipmentPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "damage_prototypes": {
          "name": "damage_prototypes",
          "shortDesc": "A dictionary containing every LuaDamagePrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaDamagePrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaDamagePrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "virtual_signal_prototypes": {
          "name": "virtual_signal_prototypes",
          "shortDesc": "A dictionary containing every LuaVirtualSignalPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaVirtualSignalPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaVirtualSignalPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "equipment_grid_prototypes": {
          "name": "equipment_grid_prototypes",
          "shortDesc": "A dictionary containing every LuaEquipmentGridPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaEquipmentGridPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaEquipmentGridPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "recipe_prototypes": {
          "name": "recipe_prototypes",
          "shortDesc": "A dictionary containing every LuaRecipePrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaRecipePrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaRecipePrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "technology_prototypes": {
          "name": "technology_prototypes",
          "shortDesc": "A dictionary containing every [LuaTechnologyPrototype](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html) indexed by `name` .",
          "desc": "A dictionary containing every [LuaTechnologyPrototype](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html) indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaTechnologyPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "decorative_prototypes": {
          "name": "decorative_prototypes",
          "shortDesc": "A dictionary containing every LuaDecorativePrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaDecorativePrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaDecorativePrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "particle_prototypes": {
          "name": "particle_prototypes",
          "shortDesc": "A dictionary containing every LuaParticlePrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaParticlePrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaParticlePrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "autoplace_control_prototypes": {
          "name": "autoplace_control_prototypes",
          "shortDesc": "A dictionary containing every LuaAutoplaceControlPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaAutoplaceControlPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaAutoplaceControlPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "noise_layer_prototypes": {
          "name": "noise_layer_prototypes",
          "shortDesc": "A dictionary containing every LuaNoiseLayerPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaNoiseLayerPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaNoiseLayerPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mod_setting_prototypes": {
          "name": "mod_setting_prototypes",
          "shortDesc": "A dictionary containing every LuaModSettingPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaModSettingPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaModSettingPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "custom_input_prototypes": {
          "name": "custom_input_prototypes",
          "shortDesc": "A dictionary containing every LuaCustomInputPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaCustomInputPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaCustomInputPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ammo_category_prototypes": {
          "name": "ammo_category_prototypes",
          "shortDesc": "A dictionary containing every LuaAmmoCategoryPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaAmmoCategoryPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaAmmoCategoryPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "named_noise_expressions": {
          "name": "named_noise_expressions",
          "shortDesc": "A dictionary containing every LuaNamedNoiseExpression indexed by `name` .",
          "desc": "A dictionary containing every LuaNamedNoiseExpression indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaNamedNoiseExpression"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "item_subgroup_prototypes": {
          "name": "item_subgroup_prototypes",
          "shortDesc": "A dictionary containing every ItemSubgroup indexed by `name` .",
          "desc": "A dictionary containing every ItemSubgroup indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaGroup"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "item_group_prototypes": {
          "name": "item_group_prototypes",
          "shortDesc": "A dictionary containing every ItemGroup indexed by `name` .",
          "desc": "A dictionary containing every ItemGroup indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaGroup"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fuel_category_prototypes": {
          "name": "fuel_category_prototypes",
          "shortDesc": "A dictionary containing every LuaFuelCategoryPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaFuelCategoryPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaFuelCategoryPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "resource_category_prototypes": {
          "name": "resource_category_prototypes",
          "shortDesc": "A dictionary containing every LuaResourceCategoryPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaResourceCategoryPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaResourceCategoryPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "achievement_prototypes": {
          "name": "achievement_prototypes",
          "shortDesc": "A dictionary containing every LuaAchievementPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaAchievementPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaAchievementPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "module_category_prototypes": {
          "name": "module_category_prototypes",
          "shortDesc": "A dictionary containing every LuaModuleCategoryPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaModuleCategoryPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaModuleCategoryPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "equipment_category_prototypes": {
          "name": "equipment_category_prototypes",
          "shortDesc": "A dictionary containing every LuaEquipmentCategoryPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaEquipmentCategoryPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaEquipmentCategoryPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "trivial_smoke_prototypes": {
          "name": "trivial_smoke_prototypes",
          "shortDesc": "A dictionary containing every LuaTrivialSmokePrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaTrivialSmokePrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaTrivialSmokePrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "shortcut_prototypes": {
          "name": "shortcut_prototypes",
          "shortDesc": "A dictionary containing every LuaShortcutPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaShortcutPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaShortcutPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "recipe_category_prototypes": {
          "name": "recipe_category_prototypes",
          "shortDesc": "A dictionary containing every LuaRecipeCategoryPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaRecipeCategoryPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaRecipeCategoryPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "font_prototypes": {
          "name": "font_prototypes",
          "shortDesc": "A dictionary containing every LuaFontPrototype indexed by `name` .",
          "desc": "A dictionary containing every LuaFontPrototype indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "LuaFontPrototype"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "map_gen_presets": {
          "name": "map_gen_presets",
          "shortDesc": "A MapGenPreset is an exact copy of the prototype table provided from the data stage.",
          "desc": "A MapGenPreset is an exact copy of the prototype table provided from the data stage.",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "MapGenPreset"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "styles": {
          "name": "styles",
          "shortDesc": "The styles that [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) can use, indexed by `name` .",
          "desc": "The styles that [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) can use, indexed by `name` .",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "string"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tick": {
          "name": "tick",
          "shortDesc": "Current map tick.",
          "desc": "Current map tick.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ticks_played": {
          "name": "ticks_played",
          "shortDesc": "The number of ticks since this game was 'created'.",
          "desc": "The number of ticks since this game was 'created'.\n A game is 'created' either by using \"new game\" or \"new game from scenario\". **Note:** This differs over [LuaGameScript::tick](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.tick) in that making a game from a scenario always starts with ticks_played value at 0 even if the scenario has its own level data where the [LuaGameScript::tick](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.tick) is > 0. **Note:** This value has no relation with [LuaGameScript::tick](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.tick) and can be completely different values.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tick_paused": {
          "name": "tick_paused",
          "shortDesc": "If the tick has been paused.",
          "desc": "If the tick has been paused. This means that entity update has been paused.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "ticks_to_run": {
          "name": "ticks_to_run",
          "shortDesc": "The number of ticks to be run while the tick is paused.",
          "desc": "The number of ticks to be run while the tick is paused.\n When [LuaGameScript::tick_paused](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.tick_paused) is true, ticks_to_run behaves the following way:\n While this is > 0, the entity update is running normally and this value is decremented every tick. When this reaches 0, the game will pause again.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "finished": {
          "name": "finished",
          "shortDesc": "Is the scenario finished?",
          "desc": "Is the scenario finished?",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "speed": {
          "name": "speed",
          "shortDesc": "Speed to update the map at.",
          "desc": "Speed to update the map at. 1.0 is normal speed -- 60 UPS. **Note:** Minimum value is 0.01.",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "surfaces": {
          "name": "surfaces",
          "shortDesc": "",
          "type": {
            "value": [
              "CustomDictionary",
              {
                "value": [
                  "uint",
                  "string"
                ],
                "type": "Union"
              },
              "LuaSurface"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "active_mods": {
          "name": "active_mods",
          "shortDesc": "The active mods versions.",
          "desc": "The active mods versions. The keys are mod names, the values are the versions. Example This will print the names and versions of active mods to player p's console. `for\u00a0name,\u00a0version\u00a0in\u00a0pairs(game.active_mods)\u00a0do p.print(name\u00a0..\u00a0\"\u00a0version\u00a0\"\u00a0..\u00a0version) end`",
          "type": {
            "value": [
              "string",
              "string"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "connected_players": {
          "name": "connected_players",
          "shortDesc": "The online players\n   This is primarily useful when you want to do some action against all online players.",
          "desc": "The online players This is primarily useful when you want to do some action against all online players. **Note:** This does *not* index using player index. See [LuaPlayer::index](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.index) on each player instance for the player index.",
          "type": {
            "value": [
              "LuaPlayer"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "permissions": {
          "name": "permissions",
          "shortDesc": "",
          "type": "LuaPermissionGroups",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "backer_names": {
          "name": "backer_names",
          "shortDesc": "",
          "type": {
            "value": [
              "CustomDictionary",
              "uint",
              "string"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "default_map_gen_settings": {
          "name": "default_map_gen_settings",
          "shortDesc": "The default map gen settings for this save.",
          "desc": "The default map gen settings for this save.",
          "type": "MapGenSettings",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "enemy_has_vision_on_land_mines": {
          "name": "enemy_has_vision_on_land_mines",
          "shortDesc": "Determines if enemy land mines are completely invisible or not.",
          "desc": "Determines if enemy land mines are completely invisible or not.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "autosave_enabled": {
          "name": "autosave_enabled",
          "shortDesc": "True by default.",
          "desc": "True by default. Can be used to disable autosaving.\n Make sure to turn it back on soon after.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "draw_resource_selection": {
          "name": "draw_resource_selection",
          "shortDesc": "True by default.",
          "desc": "True by default. Can be used to disable the highlighting of resource patches when they are hovered on the map.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "pollution_statistics": {
          "name": "pollution_statistics",
          "shortDesc": "The pollution statistics for this map.",
          "desc": "The pollution statistics for this map.",
          "type": "LuaFlowStatistics",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_force_distraction_distance": {
          "name": "max_force_distraction_distance",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_force_distraction_chunk_distance": {
          "name": "max_force_distraction_chunk_distance",
          "shortDesc": "",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_electric_pole_supply_area_distance": {
          "name": "max_electric_pole_supply_area_distance",
          "shortDesc": "",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_electric_pole_connection_distance": {
          "name": "max_electric_pole_connection_distance",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_beacon_supply_area_distance": {
          "name": "max_beacon_supply_area_distance",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_gate_activation_distance": {
          "name": "max_gate_activation_distance",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_inserter_reach_distance": {
          "name": "max_inserter_reach_distance",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_pipe_to_ground_distance": {
          "name": "max_pipe_to_ground_distance",
          "shortDesc": "",
          "type": "uint8",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_underground_belt_distance": {
          "name": "max_underground_belt_distance",
          "shortDesc": "",
          "type": "uint8",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObject"
      ]
    },
    "LuaGenericOnOffControlBehavior": {
      "name": "LuaGenericOnOffControlBehavior",
      "desc": "An abstract base class for behaviors that support switching the entity on or off based on some condition.\n\n\n\n\n\n",
      "url": "LuaControlBehavior.html#LuaGenericOnOffControlBehavior.brief",
      "attributes": {
        "disabled": {
          "name": "disabled",
          "shortDesc": "If the entity is currently disabled because of the control behavior.",
          "desc": "If the entity is currently disabled because of the control behavior.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "circuit_condition": {
          "name": "circuit_condition",
          "shortDesc": "The circuit condition.",
          "desc": "The circuit condition. **Note:** `condition` may be `nil` in order to clear the circuit condition. Example Tell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 chain\n   signals. `a_behavior.circuit_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}`",
          "type": "CircuitConditionSpecification",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "logistic_condition": {
          "name": "logistic_condition",
          "shortDesc": "The logistic condition.",
          "desc": "The logistic condition. **Note:** `condition` may be `nil` in order to clear the logistic condition. Example Tell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more than\n   4 chain signals. `a_behavior.logistic_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}`",
          "type": "CircuitConditionSpecification",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "connect_to_logistic_network": {
          "name": "connect_to_logistic_network",
          "shortDesc": "`true` if this should connect to the logistic network.",
          "desc": "`true` if this should connect to the logistic network.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaGroup": {
      "name": "LuaGroup",
      "desc": "Item group or subgroup.",
      "url": "LuaGroup.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "Localised name of the group.",
          "desc": "Localised name of the group.",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "type": {
          "name": "type",
          "shortDesc": "",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "group": {
          "name": "group",
          "shortDesc": "The parent group if any; `nil` if none.",
          "desc": "The parent group if any; `nil` if none.",
          "type": "LuaGroup",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "subgroups": {
          "name": "subgroups",
          "shortDesc": "Subgroups of this group.",
          "desc": "Subgroups of this group. **Note:** Can only be used on groups, not on subgroups.",
          "type": {
            "value": [
              "LuaGroup"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order_in_recipe": {
          "name": "order_in_recipe",
          "shortDesc": "The additional order value used in recipe ordering.",
          "desc": "The additional order value used in recipe ordering. **Note:** Can only be used on groups, not on subgroups.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaGui": {
      "name": "LuaGui",
      "desc": "The root of the GUI. This type houses the root elements, `top` , `left` , `center` , `goal` , and `screen` , to which\n other elements can be added to be displayed on screen.\n\n**Note:** Every player can have a different GUI state.",
      "url": "LuaGui.html",
      "attributes": {
        "is_valid_sprite_path": {
          "name": "is_valid_sprite_path",
          "shortDesc": "Returns `true` if sprite_path is valid and contains loaded sprite, otherwise `false` .",
          "desc": "Returns `true` if sprite_path is valid and contains loaded sprite, otherwise `false` . Sprite path of type `file` doesn't validate if file exists.",
          "parameters": {
            "sprite_path": {
              "name": "sprite_path",
              "desc": "Path to a image.",
              "type": "SpritePath",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "player": {
          "name": "player",
          "shortDesc": "The player who owns this gui.",
          "desc": "The player who owns this gui.",
          "type": "LuaPlayer",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "children": {
          "name": "children",
          "shortDesc": "The children GUI elements mapped by name <> element.",
          "desc": "The children GUI elements mapped by name <> element.",
          "type": {
            "value": [
              "string",
              "LuaGuiElement"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "top": {
          "name": "top",
          "shortDesc": "The top part of the GUI.",
          "desc": "The top part of the GUI. It is a flow element inside a scroll pane element.",
          "type": "LuaGuiElement",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "left": {
          "name": "left",
          "shortDesc": "The left part of the GUI.",
          "desc": "The left part of the GUI. It is a flow element inside a scroll pane element.",
          "type": "LuaGuiElement",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "center": {
          "name": "center",
          "shortDesc": "The center part of the GUI.",
          "desc": "The center part of the GUI. It is a flow element.",
          "type": "LuaGuiElement",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "goal": {
          "name": "goal",
          "shortDesc": "The flow used in the objectives window.",
          "desc": "The flow used in the objectives window. It is a flow element.\n   The objectives window is only visible when the flow is not empty or the objective text is set.",
          "type": "LuaGuiElement",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "screen": {
          "name": "screen",
          "shortDesc": "For showing a GUI somewhere on the entire screen.",
          "desc": "For showing a GUI somewhere on the entire screen. It is an empty-widget element.",
          "type": "LuaGuiElement",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "relative": {
          "name": "relative",
          "shortDesc": "For showing a GUI somewhere relative to one of the game GUIs.",
          "desc": "For showing a GUI somewhere relative to one of the game GUIs. It is an empty-widget element.",
          "type": "LuaGuiElement",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaGuiElement": {
      "name": "LuaGuiElement",
      "desc": "An element of a custom GUI. This type is used to represent any kind of a GUI element - labels, buttons\n and frames are all instances of this type. Just like [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) , different kinds\n of elements support different attributes; attempting to access an attribute on an element that doesn't support\n it (for instance, trying to access the `column_count` of a `textfield` ) will result in a runtime error.\nThe following types of GUI element are supported:\n* `\"button\"` : A clickable element. Relevant event: [on_gui_click](https://lua-api.factorio.com/latest/events.html#on_gui_click)\n* `\"sprite-button\"` : A `button` that displays a sprite rather than text. Relevant event: [on_gui_click](https://lua-api.factorio.com/latest/events.html#on_gui_click)\n* `\"checkbox\"` : A clickable element with a check mark that can be turned off or on. Relevant event: [on_gui_checked_state_changed](https://lua-api.factorio.com/latest/events.html#on_gui_checked_state_changed)\n* `\"flow\"` : An invisible container that lays out its children either horizontally or vertically. The root\n         GUI elements ( `top` , `left` , `center` and `screen` ; see [LuaGui](https://lua-api.factorio.com/latest/LuaGui.html) ) are flows.\n* `\"frame\"` : A non-transparent box that contains other elements. It can have a title (set via the `caption` attribute). Just like a `flow` , it lays out its children either horizontally or vertically. Relevant event: [on_gui_location_changed](https://lua-api.factorio.com/latest/events.html#on_gui_location_changed)\n* `\"label\"` : A piece of text.\n* `\"line\"` : A horizontal or vertical separation line.\n* `\"progressbar\"` : A partially filled bar that can be used to indicate progress.\n* `\"table\"` : An invisible container that lays out its children in a specific number of columns.\n         The width of each column is determined by the widest element it contains.\n* `\"textfield\"` : A single-line box the user can type into. Relevant events: [on_gui_text_changed](https://lua-api.factorio.com/latest/events.html#on_gui_text_changed) , [on_gui_confirmed](https://lua-api.factorio.com/latest/events.html#on_gui_confirmed)\n* `\"radiobutton\"` : A clickable element that is functionally identical to a `checkbox` , but has a circular appearance. Relevant event: [on_gui_checked_state_changed](https://lua-api.factorio.com/latest/events.html#on_gui_checked_state_changed)\n* `\"sprite\"` : An element that shows an image.\n* `\"scroll-pane\"` : An invisible element that is similar to a `flow` , but has the ability to show and use scroll bars.\n* `\"drop-down\"` : A drop-down containing strings of text. Relevant event: [on_gui_selection_state_changed](https://lua-api.factorio.com/latest/events.html#on_gui_selection_state_changed)\n* `\"list-box\"` : A list of strings, only one of which can be selected at a time. Relevant event: [on_gui_selection_state_changed](https://lua-api.factorio.com/latest/events.html#on_gui_selection_state_changed)\n* `\"camera\"` : A camera that shows the game at the given position on the given surface.\n* `\"choose-elem-button\"` : A button that lets the player pick from a certain kind of prototype, with optional filtering. Relevant event: [on_gui_elem_changed](https://lua-api.factorio.com/latest/events.html#on_gui_elem_changed)\n* `\"text-box\"` : A multi-line `textfield` . Relevant event: [on_gui_text_changed](https://lua-api.factorio.com/latest/events.html#on_gui_text_changed)\n* `\"slider\"` : A horizontal number line which can be used to choose a number. Relevant event: [on_gui_value_changed](https://lua-api.factorio.com/latest/events.html#on_gui_value_changed)\n* `\"minimap\"` : A minimap preview, similar to the normal player minimap.\n* `\"entity-preview\"` : A preview of an entity. The entity has to be set after the GUI element is created.\n* `\"empty-widget\"` : An empty element that just exists. The root GUI element `screen` is an `empty-widget` .\n* `\"tabbed-pane\"` : A collection of `tab` s and their contents. Relevant event: [on_gui_selected_tab_changed](https://lua-api.factorio.com/latest/events.html#on_gui_selected_tab_changed)\n* `\"tab\"` : A tab for use in a `tabbed-pane` .\n* `\"switch\"` : A switch with three possible states. Relevant event: [on_gui_switch_state_changed](https://lua-api.factorio.com/latest/events.html#on_gui_switch_state_changed)\nEach GUI element allows access to its children by having them as attributes. Thus, one can use the `parent.child` syntax to refer to children. Lua also supports the `parent[\"child\"]` syntax to refer to the\n same element. This can be used in cases where the child has a name that isn't a valid Lua identifier.\n\nExample This will add a label called `greeting` to the top flow. Immediately after, it will change its text\n   to illustrate accessing child elements. `game.player.gui.top.add{type=\"label\",\u00a0name=\"greeting\",\u00a0caption=\"Hi\"} game.player.gui.top.greeting.caption\u00a0=\u00a0\"Hello\u00a0there!\" game.player.gui.top[\"greeting\"].caption\u00a0=\u00a0\"Actually,\u00a0never\u00a0mind,\u00a0I\u00a0don't\u00a0like\u00a0your\u00a0face\"`\nExample This will add a tabbed-pane and 2 tabs with contents. `local\u00a0tabbed_pane\u00a0=\u00a0game.player.gui.top.add{type=\"tabbed-pane\"} local\u00a0tab1\u00a0=\u00a0tabbed_pane.add{type=\"tab\",\u00a0caption=\"Tab\u00a01\"} local\u00a0tab2\u00a0=\u00a0tabbed_pane.add{type=\"tab\",\u00a0caption=\"Tab\u00a02\"} local\u00a0label1\u00a0=\u00a0tabbed_pane.add{type=\"label\",\u00a0caption=\"Label\u00a01\"} local\u00a0label2\u00a0=\u00a0tabbed_pane.add{type=\"label\",\u00a0caption=\"Label\u00a02\"} tabbed_pane.add_tab(tab1,\u00a0label1) tabbed_pane.add_tab(tab2,\u00a0label2)`",
      "url": "LuaGuiElement.html",
      "attributes": {
        "add": {
          "name": "add",
          "shortDesc": "Add a new child element to this GuiElement.",
          "desc": "Add a new child element to this GuiElement.",
          "parameters": {
            "luaGuiElementadd_param": {
              "name": "luaGuiElementadd_param",
              "desc": "Table with the following fields",
              "type": "LuaGuiElementadd_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The added GUI element.",
            "type": "LuaGuiElement",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaGuiElementadd_param",
              "attributes": {
                "type": {
                  "name": "type",
                  "desc": "The kind of element to add. Has to be one of the GUI element types listed at the top of this page.",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "desc": "Name of the child element.",
                  "type": "string",
                  "optional": false
                },
                "caption": {
                  "name": "caption",
                  "desc": "Text displayed on the child element. For frames, this is their title. For other elements, like buttons or  labels, this is the content. Whilst this attribute may be used on all elements, it doesn't make sense for tables and flows as they won't display it.",
                  "type": "LocalisedString",
                  "optional": false
                },
                "tooltip": {
                  "name": "tooltip",
                  "desc": "Tooltip of the child element.",
                  "type": "LocalisedString",
                  "optional": false
                },
                "enabled": {
                  "name": "enabled",
                  "desc": "Whether the child element is enabled. Defaults to true .",
                  "type": "boolean",
                  "optional": false
                },
                "visible": {
                  "name": "visible",
                  "desc": "Whether the child element is visible. Defaults to true .",
                  "type": "boolean",
                  "optional": false
                },
                "ignored_by_interaction": {
                  "name": "ignored_by_interaction",
                  "desc": "Whether the child element is ignored by interaction. Defaults to false .",
                  "type": "boolean",
                  "optional": false
                },
                "style": {
                  "name": "style",
                  "desc": "Style of the child element.",
                  "type": "string",
                  "optional": false
                },
                "tags": {
                  "name": "tags",
                  "desc": "Tags associated with the child element.",
                  "type": "Tags",
                  "optional": false
                },
                "index": {
                  "name": "index",
                  "desc": "Location in its parent that the child element should slot into. By default, the child will be appended onto the end.",
                  "type": "uint",
                  "optional": false
                },
                "anchor": {
                  "name": "anchor",
                  "desc": "Where to position the child element when in the relative element.",
                  "type": "GuiAnchor",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "clear": {
          "name": "clear",
          "shortDesc": "Remove children of this element.",
          "desc": "Remove children of this element. Any [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) objects referring to the destroyed\n elements become invalid after this operation.",
          "attribute_type": "function"
        },
        "destroy": {
          "name": "destroy",
          "shortDesc": "Remove this element, along with its children.",
          "desc": "Remove this element, along with its children. Any [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) objects referring to the destroyed\n elements become invalid after this operation.",
          "attribute_type": "function"
        },
        "get_mod": {
          "name": "get_mod",
          "shortDesc": "The mod that owns this Gui element or `nil` if it's owned by the scenario script.",
          "desc": "The mod that owns this Gui element or `nil` if it's owned by the scenario script.",
          "returnObject": {
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_index_in_parent": {
          "name": "get_index_in_parent",
          "shortDesc": "Gets the index that this element has in its parent element.",
          "desc": "Gets the index that this element has in its parent element.",
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "clear_items": {
          "name": "clear_items",
          "shortDesc": "Removes the items in this dropdown or listbox.",
          "desc": "Removes the items in this dropdown or listbox.",
          "attribute_type": "function"
        },
        "get_item": {
          "name": "get_item",
          "shortDesc": "Gets the item at the given index from this dropdown or listbox.",
          "desc": "Gets the item at the given index from this dropdown or listbox.",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The index to get",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LocalisedString",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_item": {
          "name": "set_item",
          "shortDesc": "Sets the given item at the given index in this dropdown or listbox.",
          "desc": "Sets the given item at the given index in this dropdown or listbox.",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The index",
              "type": "uint",
              "optional": false
            },
            "LocalisedString": {
              "name": "LocalisedString",
              "desc": "The item",
              "type": "any",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "add_item": {
          "name": "add_item",
          "shortDesc": "Adds an item at the end or at the given index in this dropdown or listbox.",
          "desc": "Adds an item at the end or at the given index in this dropdown or listbox.",
          "parameters": {
            "LocalisedString": {
              "name": "LocalisedString",
              "desc": "The item",
              "type": "any",
              "optional": false
            },
            "index": {
              "name": "index",
              "desc": "The index",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "remove_item": {
          "name": "remove_item",
          "shortDesc": "Removes the item at the given index from this dropdown or listbox.",
          "desc": "Removes the item at the given index from this dropdown or listbox.",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The index",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_slider_minimum": {
          "name": "get_slider_minimum",
          "shortDesc": "Gets this sliders minimum value.",
          "desc": "Gets this sliders minimum value.",
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_slider_maximum": {
          "name": "get_slider_maximum",
          "shortDesc": "Gets this sliders maximum value.",
          "desc": "Gets this sliders maximum value.",
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_slider_minimum_maximum": {
          "name": "set_slider_minimum_maximum",
          "shortDesc": "Sets this sliders minimum and maximum values.",
          "desc": "Sets this sliders minimum and maximum values.",
          "parameters": {
            "minimum": {
              "name": "minimum",
              "type": "double",
              "optional": false
            },
            "maximum": {
              "name": "maximum",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_slider_value_step": {
          "name": "get_slider_value_step",
          "shortDesc": "Gets the minimum distance this slider can move.",
          "desc": "Gets the minimum distance this slider can move.",
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_slider_discrete_slider": {
          "name": "get_slider_discrete_slider",
          "shortDesc": "Returns whether this slider only allows being moved to discrete positions.",
          "desc": "Returns whether this slider only allows being moved to discrete positions.",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_slider_discrete_values": {
          "name": "get_slider_discrete_values",
          "shortDesc": "Returns whether this slider only allows discrete values.",
          "desc": "Returns whether this slider only allows discrete values.",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_slider_value_step": {
          "name": "set_slider_value_step",
          "shortDesc": "Sets the minimum distance this slider can move.",
          "desc": "Sets the minimum distance this slider can move.",
          "parameters": {
            "value": {
              "name": "value",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "set_slider_discrete_slider": {
          "name": "set_slider_discrete_slider",
          "shortDesc": "Sets whether this slider only allows being moved to discrete positions.",
          "desc": "Sets whether this slider only allows being moved to discrete positions.",
          "parameters": {
            "value": {
              "name": "value",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "set_slider_discrete_values": {
          "name": "set_slider_discrete_values",
          "shortDesc": "Sets whether this slider only allows discrete values.",
          "desc": "Sets whether this slider only allows discrete values.",
          "parameters": {
            "value": {
              "name": "value",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "focus": {
          "name": "focus",
          "shortDesc": "Focuses this GUI element if possible.",
          "desc": "Focuses this GUI element if possible.",
          "attribute_type": "function"
        },
        "scroll_to_top": {
          "name": "scroll_to_top",
          "shortDesc": "Scrolls this scroll bar to the top.",
          "desc": "Scrolls this scroll bar to the top. _Can only be used if this is scroll-pane or  text-box_",
          "attribute_type": "function"
        },
        "scroll_to_bottom": {
          "name": "scroll_to_bottom",
          "shortDesc": "Scrolls this scroll bar to the bottom.",
          "desc": "Scrolls this scroll bar to the bottom. _Can only be used if this is scroll-pane or  text-box_",
          "attribute_type": "function"
        },
        "scroll_to_left": {
          "name": "scroll_to_left",
          "shortDesc": "Scrolls this scroll bar to the left.",
          "desc": "Scrolls this scroll bar to the left. _Can only be used if this is scroll-pane or  text-box_",
          "attribute_type": "function"
        },
        "scroll_to_right": {
          "name": "scroll_to_right",
          "shortDesc": "Scrolls this scroll bar to the right.",
          "desc": "Scrolls this scroll bar to the right. _Can only be used if this is scroll-pane or  text-box_",
          "attribute_type": "function"
        },
        "scroll_to_element": {
          "name": "scroll_to_element",
          "shortDesc": "Scrolls this scroll bar such that the specified GUI element is visible to the player.",
          "desc": "Scrolls this scroll bar such that the specified GUI element is visible to the player. _Can only be used if this is scroll-pane_",
          "parameters": {
            "element": {
              "name": "element",
              "desc": "The element to scroll to.",
              "type": "LuaGuiElement",
              "optional": false
            },
            "scroll_mode": {
              "name": "scroll_mode",
              "desc": "Where the element should be positioned in the scroll-pane. Must be either \"in-view\" or \"top-third\" . Defaults to \"in-view\" .",
              "type": "string",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "select_all": {
          "name": "select_all",
          "shortDesc": "Selects all the text in this textbox.",
          "desc": "Selects all the text in this textbox. _Can only be used if this is textfield or  text-box_",
          "attribute_type": "function"
        },
        "select": {
          "name": "select",
          "shortDesc": "Selects a range of text in this textbox.",
          "desc": "Selects a range of text in this textbox. _Can only be used if this is textfield or  text-box_",
          "parameters": {
            "start": {
              "name": "start",
              "desc": "The index of the first character to select",
              "type": "int",
              "optional": false
            },
            "end": {
              "name": "end",
              "desc": "The index of the last character to select",
              "type": "int",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "add_tab": {
          "name": "add_tab",
          "shortDesc": "Adds the given tab and content widgets to this tabbed pane as a new tab.",
          "desc": "Adds the given tab and content widgets to this tabbed pane as a new tab. _Can only be used if this is tabbed-pane_",
          "parameters": {
            "tab": {
              "name": "tab",
              "desc": "The tab to add, must be a GUI element of type \"tab\".",
              "type": "LuaGuiElement",
              "optional": false
            },
            "content": {
              "name": "content",
              "desc": "The content to show when this tab is selected. Can be any type of GUI element.",
              "type": "LuaGuiElement",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "remove_tab": {
          "name": "remove_tab",
          "shortDesc": "Removes the given tab and its associated content from this tabbed pane.",
          "desc": "Removes the given tab and its associated content from this tabbed pane. _Can only be used if this is tabbed-pane_",
          "parameters": {
            "tab": {
              "name": "tab",
              "desc": "The tab to remove. If not given, it removes all tabs.",
              "type": "LuaGuiElement",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "force_auto_center": {
          "name": "force_auto_center",
          "shortDesc": "Forces this frame to re-auto-center.",
          "desc": "Forces this frame to re-auto-center. Only works on frames stored directly in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) . _Can only be used if this is frame_",
          "attribute_type": "function"
        },
        "scroll_to_item": {
          "name": "scroll_to_item",
          "shortDesc": "Scrolls the scroll bar such that the specified listbox item is visible to the player.",
          "desc": "Scrolls the scroll bar such that the specified listbox item is visible to the player. _Can only be used if this is list-box_",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The item index to scroll to.",
              "type": "int",
              "optional": false
            },
            "scroll_mode": {
              "name": "scroll_mode",
              "desc": "Where the item should be positioned in the scroll-pane. Must be either \"in-view\" or \"top-third\" . Defaults to \"in-view\" .",
              "type": "string",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "bring_to_front": {
          "name": "bring_to_front",
          "shortDesc": "Moves this GUI element to the \"front\" so it will draw over other elements.",
          "desc": "Moves this GUI element to the \"front\" so it will draw over other elements.",
          "attribute_type": "function"
        },
        "index": {
          "name": "index",
          "shortDesc": "The index of this GUI element (unique amongst the GUI elements of a LuaPlayer).",
          "desc": "The index of this GUI element (unique amongst the GUI elements of a LuaPlayer).",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "gui": {
          "name": "gui",
          "shortDesc": "The GUI this element is a child of.",
          "desc": "The GUI this element is a child of.",
          "type": "LuaGui",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "parent": {
          "name": "parent",
          "shortDesc": "The direct parent of this element; `nil` if this is a top-level element.",
          "desc": "The direct parent of this element; `nil` if this is a top-level element.",
          "type": "LuaGuiElement",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "name": {
          "name": "name",
          "shortDesc": "The name of this element.",
          "desc": "The name of this element. Example `game.player.gui.top.greeting.name\u00a0==\u00a0\"greeting\"`",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "caption": {
          "name": "caption",
          "shortDesc": "The text displayed on this element.",
          "desc": "The text displayed on this element. For frames, this is the \"heading\". For other elements, like buttons or\n labels, this is the content. **Note:** Whilst this attribute may be used on all elements without producing an error, it doesn't make sense\n       for tables and flows as they won't display it.",
          "type": "LocalisedString",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "value": {
          "name": "value",
          "shortDesc": "How much this progress bar is filled.",
          "desc": "How much this progress bar is filled. It is a value in the range [0, 1]. _Can only be used if this is progressbar_",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "direction": {
          "name": "direction",
          "shortDesc": "Direction of this element's layout.",
          "desc": "Direction of this element's layout. May be either `\"horizontal\"` or `\"vertical\"` . _Can only be used if this is frame,  flow, or  line_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "style": {
          "name": "style",
          "shortDesc": "The style of this element.",
          "desc": "The style of this element. When read, this evaluates to a [LuaStyle](https://lua-api.factorio.com/latest/LuaStyle.html) . For writing, it only accepts\n a string that specifies the textual identifier (prototype name) of the desired style.",
          "type": {
            "value": [
              "LuaStyle",
              "string"
            ],
            "type": "Union"
          },
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "visible": {
          "name": "visible",
          "shortDesc": "Sets whether this GUI element is visible or completely hidden, taking no space in the layout.",
          "desc": "Sets whether this GUI element is visible or completely hidden, taking no space in the layout.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "text": {
          "name": "text",
          "shortDesc": "The text contained in this textfield or text-box.",
          "desc": "The text contained in this textfield or text-box. _Can only be used if this is textfield or  text-box_",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "children_names": {
          "name": "children_names",
          "shortDesc": "Names of all the children of this element.",
          "desc": "Names of all the children of this element. These are the identifiers that can be used to access the child\n as an attribute of this element.",
          "type": {
            "value": [
              "string"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "state": {
          "name": "state",
          "shortDesc": "Is this checkbox or radiobutton checked?",
          "desc": "Is this checkbox or radiobutton checked? _Can only be used if this is CheckBox or  RadioButton_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "player_index": {
          "name": "player_index",
          "shortDesc": "Index into [LuaGameScript::players](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players) specifying the player who owns this element.",
          "desc": "Index into [LuaGameScript::players](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players) specifying the player who owns this element.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "sprite": {
          "name": "sprite",
          "shortDesc": "The image to display on this sprite-button or sprite in the default state.",
          "desc": "The image to display on this sprite-button or sprite in the default state.",
          "type": "SpritePath",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "resize_to_sprite": {
          "name": "resize_to_sprite",
          "shortDesc": "Whether the image widget should resize according to the sprite in it.",
          "desc": "Whether the image widget should resize according to the sprite in it. Defaults to `true` .",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "hovered_sprite": {
          "name": "hovered_sprite",
          "shortDesc": "The image to display on this sprite-button when it is hovered.",
          "desc": "The image to display on this sprite-button when it is hovered. _Can only be used if this is sprite-button_",
          "type": "SpritePath",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "clicked_sprite": {
          "name": "clicked_sprite",
          "shortDesc": "The image to display on this sprite-button when it is clicked.",
          "desc": "The image to display on this sprite-button when it is clicked.",
          "type": "SpritePath",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tooltip": {
          "name": "tooltip",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "horizontal_scroll_policy": {
          "name": "horizontal_scroll_policy",
          "shortDesc": "Policy of the horizontal scroll bar.",
          "desc": "Policy of the horizontal scroll bar. Possible values are `\"auto\"` , `\"never\"` , `\"always\"` , `\"auto-and-reserve-space\"` , `\"dont-show-but-allow-scrolling\"` . _Can only be used if this is scroll-pane_",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "vertical_scroll_policy": {
          "name": "vertical_scroll_policy",
          "shortDesc": "Policy of the vertical scroll bar.",
          "desc": "Policy of the vertical scroll bar. Possible values are `\"auto\"` , `\"never\"` , `\"always\"` , `\"auto-and-reserve-space\"` , `\"dont-show-but-allow-scrolling\"` . _Can only be used if this is scroll-pane_",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "type": {
          "name": "type",
          "shortDesc": "The type of this GUI element.",
          "desc": "The type of this GUI element.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "children": {
          "name": "children",
          "shortDesc": "The child-elements of this GUI element.",
          "desc": "The child-elements of this GUI element.",
          "type": {
            "value": [
              "LuaGuiElement"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "items": {
          "name": "items",
          "shortDesc": "The items in this dropdown or listbox.",
          "desc": "The items in this dropdown or listbox.",
          "type": {
            "value": [
              "LocalisedString"
            ],
            "type": "Array"
          },
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "selected_index": {
          "name": "selected_index",
          "shortDesc": "The selected index for this dropdown or listbox.",
          "desc": "The selected index for this dropdown or listbox. Returns `0` if none is selected.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "number": {
          "name": "number",
          "shortDesc": "The number to be shown in the bottom right corner of this sprite-button.",
          "desc": "The number to be shown in the bottom right corner of this sprite-button. Set this to `nil` to show nothing.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "show_percent_for_small_numbers": {
          "name": "show_percent_for_small_numbers",
          "shortDesc": "Related to the number to be shown in the bottom right corner of this sprite-button.",
          "desc": "Related to the number to be shown in the bottom right corner of this sprite-button.\n When set to `true` , numbers that are non-zero and smaller than one are shown as a percentage rather than the value.\n For example, `0.5` will be shown as `50%` instead.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "location": {
          "name": "location",
          "shortDesc": "The location of this widget when stored in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) or `nil` if not not set or not in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) .",
          "desc": "The location of this widget when stored in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) or `nil` if not not set or not in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) .",
          "type": "GuiLocation",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "auto_center": {
          "name": "auto_center",
          "shortDesc": "Whether this frame auto-centers on window resize when stored in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) .",
          "desc": "Whether this frame auto-centers on window resize when stored in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) . _Can only be used if this is frame_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "badge_text": {
          "name": "badge_text",
          "shortDesc": "The text to display after the normal tab text (designed to work with numbers)",
          "desc": "The text to display after the normal tab text (designed to work with numbers) _Can only be used if this is tab_",
          "type": "LocalisedString",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "position": {
          "name": "position",
          "shortDesc": "The position this camera or minimap is focused on, if any.",
          "desc": "The position this camera or minimap is focused on, if any.",
          "type": "Position",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "surface_index": {
          "name": "surface_index",
          "shortDesc": "The surface index this camera or minimap is using.",
          "desc": "The surface index this camera or minimap is using.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "zoom": {
          "name": "zoom",
          "shortDesc": "The zoom this camera or minimap is using.",
          "desc": "The zoom this camera or minimap is using.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "minimap_player_index": {
          "name": "minimap_player_index",
          "shortDesc": "The player index this minimap is using.",
          "desc": "The player index this minimap is using. _Can only be used if this is minimap_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "force": {
          "name": "force",
          "shortDesc": "The force this minimap is using or `nil` if no force is set.",
          "desc": "The force this minimap is using or `nil` if no force is set.",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "elem_type": {
          "name": "elem_type",
          "shortDesc": "The elem type of this choose-elem-button.",
          "desc": "The elem type of this choose-elem-button. _Can only be used if this is choose-elem-button_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "elem_value": {
          "name": "elem_value",
          "shortDesc": "The elem value of this choose-elem-button or `nil` if there is no value.",
          "desc": "The elem value of this choose-elem-button or `nil` if there is no value. **Note:** The `\"signal\"` type operates with [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) , while all other types use strings. _Can only be used if this is choose-elem-button_",
          "type": {
            "value": [
              "string",
              "SignalID"
            ],
            "type": "Union"
          },
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "elem_filters": {
          "name": "elem_filters",
          "shortDesc": "The elem filters of this choose-elem-button or `nil` if there are no filters.",
          "desc": "The elem filters of this choose-elem-button or `nil` if there are no filters. Valid filters are determined by elem_type: * Type `\"item\"` - [ItemPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#ItemPrototypeFilters)\n  * Type `\"tile\"` - [TilePrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#TilePrototypeFilters)\n  * Type `\"entity\"` - [EntityPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeFilters)\n  * Type `\"signal\"` - Does not support filters\n  * Type `\"fluid\"` - [FluidPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#FluidPrototypeFilters)\n  * Type `\"recipe\"` - [RecipePrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#RecipePrototypeFilters)\n  * Type `\"decorative\"` - [DecorativePrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#DecorativePrototypeFilters)\n  * Type `\"item-group\"` - Does not support filters\n  * Type `\"achievement\"` - [AchievementPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#AchievementPrototypeFilters)\n  * Type `\"equipment\"` - [EquipmentPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#EquipmentPrototypeFilters)\n  * Type `\"technology\"` - [TechnologyPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#TechnologyPrototypeFilters) **Note:** Writing to this field does not change or clear the currently selected element. Example This will configure a choose-elem-button of type `\"entity\"` to only show items of type `\"furnace\"` . `button.elem_filters\u00a0=\u00a0{{filter\u00a0=\u00a0\"type\",\u00a0type\u00a0=\u00a0\"furnace\"}}` Example Then, there are some types of filters that work on a specific kind of attribute. The following will configure a choose-elem-button of type `\"entity\"` to only show entities that have their `\"hidden\"` [flags](https://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeFlags) set. `button.elem_filters\u00a0=\u00a0{{filter\u00a0=\u00a0\"hidden\"}}` Example Lastly, these filters can be combined at will, taking care to specify how they should be combined (either `\"and\"` or `\"or\"` ). The following will filter for any `\"entities\"` that are `\"furnaces\"` and that are not `\"hidden\"` . `button.elem_filters\u00a0=\u00a0{{filter\u00a0=\u00a0\"type\",\u00a0type\u00a0=\u00a0\"furnace\"},\u00a0{filter\u00a0=\u00a0\"hidden\",\u00a0invert\u00a0=\u00a0true,\u00a0mode\u00a0=\u00a0\"and\"}}` _Can only be used if this is choose-elem-button_",
          "type": "PrototypeFilters",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "selectable": {
          "name": "selectable",
          "shortDesc": "Whether the contents of this text-box are selectable.",
          "desc": "Whether the contents of this text-box are selectable. Defaults to `true` . _Can only be used if this is text-box_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "word_wrap": {
          "name": "word_wrap",
          "shortDesc": "Whether this text-box will word-wrap automatically.",
          "desc": "Whether this text-box will word-wrap automatically. Defaults to `false` . _Can only be used if this is text-box_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "read_only": {
          "name": "read_only",
          "shortDesc": "Whether this text-box is read-only.",
          "desc": "Whether this text-box is read-only. Defaults to `false` . _Can only be used if this is text-box_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "enabled": {
          "name": "enabled",
          "shortDesc": "Whether this GUI element is enabled.",
          "desc": "Whether this GUI element is enabled. Disabled GUI elements don't trigger events when clicked.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "ignored_by_interaction": {
          "name": "ignored_by_interaction",
          "shortDesc": "Whether this GUI element is ignored by interaction.",
          "desc": "Whether this GUI element is ignored by interaction.\n This makes clicks on this element 'go through' to the GUI element or even the game surface below it.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "locked": {
          "name": "locked",
          "shortDesc": "Whether this choose-elem-button can be changed by the player.",
          "desc": "Whether this choose-elem-button can be changed by the player. _Can only be used if this is choose-elem-button_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "draw_vertical_lines": {
          "name": "draw_vertical_lines",
          "shortDesc": "Whether this table should draw vertical grid lines.",
          "desc": "Whether this table should draw vertical grid lines. _Can only be used if this is table_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "draw_horizontal_lines": {
          "name": "draw_horizontal_lines",
          "shortDesc": "Whether this table should draw horizontal grid lines.",
          "desc": "Whether this table should draw horizontal grid lines. _Can only be used if this is table_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "draw_horizontal_line_after_headers": {
          "name": "draw_horizontal_line_after_headers",
          "shortDesc": "Whether this table should draw a horizontal grid line below the first table row.",
          "desc": "Whether this table should draw a horizontal grid line below the first table row. _Can only be used if this is table_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "column_count": {
          "name": "column_count",
          "shortDesc": "The number of columns in this table.",
          "desc": "The number of columns in this table. _Can only be used if this is table_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "vertical_centering": {
          "name": "vertical_centering",
          "shortDesc": "Whether the content of this table should be vertically centered.",
          "desc": "Whether the content of this table should be vertically centered. Overrides [LuaStyle::column_alignments](https://lua-api.factorio.com/latest/LuaStyle.html#LuaStyle.column_alignments) . Defaults to `true` . _Can only be used if this is table_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "slider_value": {
          "name": "slider_value",
          "shortDesc": "The value of this slider element.",
          "desc": "The value of this slider element. _Can only be used if this is slider_",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "mouse_button_filter": {
          "name": "mouse_button_filter",
          "shortDesc": "The mouse button filters for this button or sprite-button.",
          "desc": "The mouse button filters for this button or sprite-button.",
          "type": "MouseButtonFlags",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "numeric": {
          "name": "numeric",
          "shortDesc": "Whether this textfield is limited to only numberic characters.",
          "desc": "Whether this textfield is limited to only numberic characters. _Can only be used if this is textfield_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "allow_decimal": {
          "name": "allow_decimal",
          "shortDesc": "Whether this textfield (when in numeric mode) allows decimal numbers.",
          "desc": "Whether this textfield (when in numeric mode) allows decimal numbers. _Can only be used if this is textfield_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "allow_negative": {
          "name": "allow_negative",
          "shortDesc": "Whether this textfield (when in numeric mode) allows negative numbers.",
          "desc": "Whether this textfield (when in numeric mode) allows negative numbers. _Can only be used if this is textfield_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "is_password": {
          "name": "is_password",
          "shortDesc": "Whether this textfield displays as a password field, which renders all characters as `*` .",
          "desc": "Whether this textfield displays as a password field, which renders all characters as `*` . _Can only be used if this is textfield_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "lose_focus_on_confirm": {
          "name": "lose_focus_on_confirm",
          "shortDesc": "Whether this textfield loses focus after [defines.events.on_gui_confirmed](https://lua-api.factorio.com/latest/defines.html#defines.events.on_gui_confirmed) is fired.",
          "desc": "Whether this textfield loses focus after [defines.events.on_gui_confirmed](https://lua-api.factorio.com/latest/defines.html#defines.events.on_gui_confirmed) is fired. _Can only be used if this is textfield_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "clear_and_focus_on_right_click": {
          "name": "clear_and_focus_on_right_click",
          "shortDesc": "Makes it so right-clicking on this textfield clears and focuses it.",
          "desc": "Makes it so right-clicking on this textfield clears and focuses it. _Can only be used if this is textfield or  text-box_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "drag_target": {
          "name": "drag_target",
          "shortDesc": "The frame drag target for this flow, frame, label, table, or empty-widget.",
          "desc": "The frame drag target for this flow, frame, label, table, or empty-widget. **Note:** drag_target can only be set to a frame stored directly in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) or `nil` . **Note:** drag_target can only be set on child elements in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) . **Note:** drag_target can only be set to a higher level parent element (this element must be owned at some nested level by the drag_target).",
          "type": "LuaGuiElement",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "selected_tab_index": {
          "name": "selected_tab_index",
          "shortDesc": "The selected tab index for this tabbed pane or `nil` if no tab is selected.",
          "desc": "The selected tab index for this tabbed pane or `nil` if no tab is selected. _Can only be used if this is tabbed-pane_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tabs": {
          "name": "tabs",
          "shortDesc": "The tabs and contents being shown in this tabbed-pane.",
          "desc": "The tabs and contents being shown in this tabbed-pane. Each TabAndContent is a table: * tab :: [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html)\n  * content :: [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html)",
          "type": {
            "value": [
              "TabAndContent"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "entity": {
          "name": "entity",
          "shortDesc": "The entity associated with this entity-preview, camera, minimap or `nil` if no entity is associated.",
          "desc": "The entity associated with this entity-preview, camera, minimap or `nil` if no entity is associated.",
          "type": "LuaEntity",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "anchor": {
          "name": "anchor",
          "shortDesc": "Sets the anchor for this relative widget.",
          "desc": "Sets the anchor for this relative widget. Setting `nil` clears the anchor.",
          "type": "GuiAnchor",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tags": {
          "name": "tags",
          "shortDesc": "The tags associated with this LuaGuiElement.",
          "desc": "The tags associated with this LuaGuiElement.",
          "type": "Tags",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "switch_state": {
          "name": "switch_state",
          "shortDesc": "The switch state (left, none, right) for this switch.",
          "desc": "The switch state (left, none, right) for this switch. **Note:** If [LuaGuiElement::allow_none_state](https://lua-api.factorio.com/latest/LuaGuiElement.html#LuaGuiElement.allow_none_state) is false this can't be set to `\"none\"` . _Can only be used if this is switch_",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "allow_none_state": {
          "name": "allow_none_state",
          "shortDesc": "Whether the `\"none\"` state is allowed for this switch.",
          "desc": "Whether the `\"none\"` state is allowed for this switch. **Note:** This can't be set to false if the current switch_state is 'none'. _Can only be used if this is switch_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "left_label_caption": {
          "name": "left_label_caption",
          "shortDesc": "The text shown for the left switch label.",
          "desc": "The text shown for the left switch label. _Can only be used if this is switch_",
          "type": "LocalisedString",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "left_label_tooltip": {
          "name": "left_label_tooltip",
          "shortDesc": "The tooltip shown on the left switch label.",
          "desc": "The tooltip shown on the left switch label. _Can only be used if this is switch_",
          "type": "LocalisedString",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "right_label_caption": {
          "name": "right_label_caption",
          "shortDesc": "The text shown for the right switch label.",
          "desc": "The text shown for the right switch label. _Can only be used if this is switch_",
          "type": "LocalisedString",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "right_label_tooltip": {
          "name": "right_label_tooltip",
          "shortDesc": "The tooltip shown on the right switch label.",
          "desc": "The tooltip shown on the right switch label. _Can only be used if this is switch_",
          "type": "LocalisedString",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "operator []": {
          "name": "operator []",
          "shortDesc": "The indexing operator.",
          "desc": "The indexing operator. Gets children by name.",
          "type": "LuaGuiElement",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaHeatEnergySourcePrototype": {
      "name": "LuaHeatEnergySourcePrototype",
      "desc": "Prototype of a heat energy source.",
      "url": "LuaHeatEnergySourcePrototype.html",
      "attributes": {
        "emissions": {
          "name": "emissions",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_no_network_icon": {
          "name": "render_no_network_icon",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_no_power_icon": {
          "name": "render_no_power_icon",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_temperature": {
          "name": "max_temperature",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "default_temperature": {
          "name": "default_temperature",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "specific_heat": {
          "name": "specific_heat",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_transfer": {
          "name": "max_transfer",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "min_temperature_gradient": {
          "name": "min_temperature_gradient",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "min_working_temperature": {
          "name": "min_working_temperature",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "minimum_glow_temperature": {
          "name": "minimum_glow_temperature",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "connections": {
          "name": "connections",
          "shortDesc": "",
          "type": {
            "value": [
              "Connection"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaInserterControlBehavior": {
      "name": "LuaInserterControlBehavior",
      "desc": "Control behavior for inserters.\n\n\n\n\n\n\n\n",
      "url": "LuaControlBehavior.html#LuaInserterControlBehavior.brief",
      "attributes": {
        "circuit_read_hand_contents": {
          "name": "circuit_read_hand_contents",
          "shortDesc": "`true` if the contents of the inserter hand should be sent to the circuit network",
          "desc": "`true` if the contents of the inserter hand should be sent to the circuit network",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "circuit_mode_of_operation": {
          "name": "circuit_mode_of_operation",
          "shortDesc": "The circuit mode of operations for the inserter.",
          "desc": "The circuit mode of operations for the inserter.",
          "type": "defines.control_behavior.inserter.circuit_mode_of_operation",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "circuit_hand_read_mode": {
          "name": "circuit_hand_read_mode",
          "shortDesc": "The hand read mode for the inserter.",
          "desc": "The hand read mode for the inserter.",
          "type": "defines.control_behavior.inserter.hand_read_mode",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "circuit_set_stack_size": {
          "name": "circuit_set_stack_size",
          "shortDesc": "If the stack size of the inserter is set through the circuit network or not.",
          "desc": "If the stack size of the inserter is set through the circuit network or not.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "circuit_stack_control_signal": {
          "name": "circuit_stack_control_signal",
          "shortDesc": "The signal used to set the stack size of the inserter.",
          "desc": "The signal used to set the stack size of the inserter.",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaGenericOnOffControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaInventory": {
      "name": "LuaInventory",
      "desc": "A storage of item stacks.",
      "url": "LuaInventory.html",
      "attributes": {
        "clear": {
          "name": "clear",
          "shortDesc": "Make this inventory empty.",
          "desc": "Make this inventory empty.",
          "attribute_type": "function"
        },
        "can_insert": {
          "name": "can_insert",
          "shortDesc": "Can at least some items be inserted?",
          "desc": "Can at least some items be inserted?",
          "parameters": {
            "items": {
              "name": "items",
              "desc": "Items that would be inserted.",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "`true` if at least a part of the given items could be inserted into this inventory.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "insert": {
          "name": "insert",
          "shortDesc": "Insert items into this inventory.",
          "desc": "Insert items into this inventory.",
          "parameters": {
            "items": {
              "name": "items",
              "desc": "Items to insert.",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Number of items actually inserted.",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "remove": {
          "name": "remove",
          "shortDesc": "Remove items from this inventory.",
          "desc": "Remove items from this inventory.",
          "parameters": {
            "items": {
              "name": "items",
              "desc": "Items to remove.",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Number of items actually removed.",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_item_count": {
          "name": "get_item_count",
          "shortDesc": "Get the number of all or some items in this inventory.",
          "desc": "Get the number of all or some items in this inventory.",
          "parameters": {
            "item": {
              "name": "item",
              "desc": "Prototype name of the item to count. If not specified, count all items.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_empty": {
          "name": "is_empty",
          "shortDesc": "Does this inventory contain nothing?",
          "desc": "Does this inventory contain nothing?",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_contents": {
          "name": "get_contents",
          "shortDesc": "Get counts of all items in this inventory.",
          "desc": "Get counts of all items in this inventory.",
          "returnObject": {
            "desc": "The counts, indexed by item names.",
            "type": {
              "value": [
                "string",
                "uint"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "supports_bar": {
          "name": "supports_bar",
          "shortDesc": "Does this inventory support a bar?",
          "desc": "Does this inventory support a bar? Bar is the draggable red thing, found for example on chests,\n that limits the portion of the inventory that may be manipulated by machines.",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_bar": {
          "name": "get_bar",
          "shortDesc": "Get the current bar.",
          "desc": "Get the current bar. This is the index at which the red area starts.",
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_bar": {
          "name": "set_bar",
          "shortDesc": "Set the current bar.",
          "desc": "Set the current bar.",
          "parameters": {
            "bar": {
              "name": "bar",
              "desc": "The new limit. Omitting this parameter will clear the limit.",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "supports_filters": {
          "name": "supports_filters",
          "shortDesc": "If this inventory supports filters.",
          "desc": "If this inventory supports filters.",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_filtered": {
          "name": "is_filtered",
          "shortDesc": "If this inventory supports filters and has at least 1 filter set.",
          "desc": "If this inventory supports filters and has at least 1 filter set.",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "can_set_filter": {
          "name": "can_set_filter",
          "shortDesc": "If the given inventory slot filter can be set to the given filter.",
          "desc": "If the given inventory slot filter can be set to the given filter.",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The item stack index",
              "type": "uint",
              "optional": false
            },
            "filter": {
              "name": "filter",
              "desc": "The item name of the filter",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_filter": {
          "name": "get_filter",
          "shortDesc": "Gets the filter for the given item stack index.",
          "desc": "Gets the filter for the given item stack index.",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The item stack index",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The current filter or nil if none.",
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_filter": {
          "name": "set_filter",
          "shortDesc": "Sets the filter for the given item stack index.",
          "desc": "Sets the filter for the given item stack index.",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The item stack index",
              "type": "uint",
              "optional": false
            },
            "filter": {
              "name": "filter",
              "desc": "The new filter or nil to erase the filter",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the filter was allowed to be set.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "find_item_stack": {
          "name": "find_item_stack",
          "shortDesc": "Gets the first LuaItemStack in the inventory that matches the given item name.",
          "desc": "Gets the first LuaItemStack in the inventory that matches the given item name.",
          "parameters": {
            "item": {
              "name": "item",
              "desc": "The item name to find",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "or `nil` .",
            "type": "LuaItemStack",
            "optional": false
          },
          "attribute_type": "function"
        },
        "find_empty_stack": {
          "name": "find_empty_stack",
          "shortDesc": "Finds the first empty stack.",
          "desc": "Finds the first empty stack. Filtered slots are excluded unless a filter item is given.",
          "parameters": {
            "item": {
              "name": "item",
              "desc": "If given, empty stacks that are filtered for this item will be included.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "or `nil` .",
            "type": "LuaItemStack",
            "optional": false
          },
          "attribute_type": "function"
        },
        "count_empty_stacks": {
          "name": "count_empty_stacks",
          "shortDesc": "Counts the number of empty stacks.",
          "desc": "Counts the number of empty stacks.",
          "parameters": {
            "include_filtered": {
              "name": "include_filtered",
              "desc": "If true, filtered slots will be included. Defaults to false.",
              "type": "boolean",
              "optional": false
            }
          },
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_insertable_count": {
          "name": "get_insertable_count",
          "shortDesc": "Gets the number of the given item that can be inserted into this inventory.",
          "desc": "Gets the number of the given item that can be inserted into this inventory.",
          "parameters": {
            "item": {
              "name": "item",
              "desc": "The item to check.",
              "type": "string",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "sort_and_merge": {
          "name": "sort_and_merge",
          "shortDesc": "Sorts and merges the items in this inventory.",
          "desc": "Sorts and merges the items in this inventory.",
          "attribute_type": "function"
        },
        "resize": {
          "name": "resize",
          "shortDesc": "Resizes the inventory.",
          "desc": "Resizes the inventory.",
          "parameters": {
            "size": {
              "name": "size",
              "desc": "New size of a inventory",
              "type": "uint16",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "destroy": {
          "name": "destroy",
          "shortDesc": "Destroys this inventory.",
          "desc": "Destroys this inventory.",
          "attribute_type": "function"
        },
        "operator #": {
          "name": "operator #",
          "shortDesc": "Get the number of slots in this inventory.",
          "desc": "Get the number of slots in this inventory. Example Will print the number of slots in the player's main inventory. `game.player.print(#game.player.get_main_inventory())`",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "index": {
          "name": "index",
          "shortDesc": "The inventory index this inventory uses, or `nil` if the inventory doesn't have an index.",
          "desc": "The inventory index this inventory uses, or `nil` if the inventory doesn't have an index.",
          "type": "defines.inventory",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "entity_owner": {
          "name": "entity_owner",
          "shortDesc": "The entity that owns this inventory or `nil` if this isn't owned by an entity.",
          "desc": "The entity that owns this inventory or `nil` if this isn't owned by an entity.",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "player_owner": {
          "name": "player_owner",
          "shortDesc": "The player that owns this inventory or `nil` if this isn't owned by a player.",
          "desc": "The player that owns this inventory or `nil` if this isn't owned by a player.",
          "type": "LuaPlayer",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "equipment_owner": {
          "name": "equipment_owner",
          "shortDesc": "The equipment that owns this inventory or `nil` if this isn't owned by an equipment.",
          "desc": "The equipment that owns this inventory or `nil` if this isn't owned by an equipment.",
          "type": "LuaEquipment",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mod_owner": {
          "name": "mod_owner",
          "shortDesc": "The mod that owns this inventory or `nil` if this isn't owned by a mod.",
          "desc": "The mod that owns this inventory or `nil` if this isn't owned by a mod.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "operator []": {
          "name": "operator []",
          "shortDesc": "The indexing operator.",
          "desc": "The indexing operator. Example Will get the first item in the player's inventory. `game.player.get_main_inventory()[1]`",
          "type": "LuaItemStack",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaItemPrototype": {
      "name": "LuaItemPrototype",
      "desc": "Prototype of an item.\nExample `game.item_prototypes[\"iron-plate\"]`",
      "url": "LuaItemPrototype.html",
      "attributes": {
        "has_flag": {
          "name": "has_flag",
          "shortDesc": "Does this prototype have a flag enabled?",
          "desc": "Does this prototype have a flag enabled? Any other value will cause an error.",
          "parameters": {
            "flag": {
              "name": "flag",
              "desc": "The flag to check. Can be one of ItemPrototypeFlags",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_ammo_type": {
          "name": "get_ammo_type",
          "shortDesc": "Type of this ammo prototype or `nil` if this is not an ammo prototype.",
          "desc": "Type of this ammo prototype or `nil` if this is not an ammo prototype.",
          "parameters": {
            "ammo_source_type": {
              "name": "ammo_source_type",
              "desc": "\"default\", \"player\", \"turret\", or \"vehicle\"",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "AmmoType",
            "optional": false
          },
          "attribute_type": "function"
        },
        "type": {
          "name": "type",
          "shortDesc": "Type of this prototype.",
          "desc": "Type of this prototype. E.g. `\"gun\"` or `\"mining-tool\"` .",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string.",
          "desc": "Order string.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "place_result": {
          "name": "place_result",
          "shortDesc": "Prototype of the entity that will be created by placing this item, or `nil` if there is no such\n entity.",
          "desc": "Prototype of the entity that will be created by placing this item, or `nil` if there is no such\n entity.",
          "type": "LuaEntityPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "place_as_equipment_result": {
          "name": "place_as_equipment_result",
          "shortDesc": "Prototype of the equipment that will be created by placing this item in an equipment grid or `nil` if there is no equipment defined.",
          "desc": "Prototype of the equipment that will be created by placing this item in an equipment grid or `nil` if there is no equipment defined.",
          "type": "LuaEquipmentPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "place_as_tile_result": {
          "name": "place_as_tile_result",
          "shortDesc": "The place as tile result if one is defined else `nil` .",
          "desc": "The place as tile result if one is defined else `nil` .",
          "type": "PlaceAsTileResult",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "stackable": {
          "name": "stackable",
          "shortDesc": "Is this item allowed to stack at all?",
          "desc": "Is this item allowed to stack at all?",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "default_request_amount": {
          "name": "default_request_amount",
          "shortDesc": "The default request value.",
          "desc": "The default request value.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "stack_size": {
          "name": "stack_size",
          "shortDesc": "Maximum stack size of the item specified by this prototype.",
          "desc": "Maximum stack size of the item specified by this prototype.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "wire_count": {
          "name": "wire_count",
          "shortDesc": "The number of items needed to connect 2 entities with this as wire.",
          "desc": "The number of items needed to connect 2 entities with this as wire.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fuel_category": {
          "name": "fuel_category",
          "shortDesc": "The fuel category or `nil` .",
          "desc": "The fuel category or `nil` .",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "burnt_result": {
          "name": "burnt_result",
          "shortDesc": "The result of burning this item as fuel or `nil` .",
          "desc": "The result of burning this item as fuel or `nil` .",
          "type": "LuaItemPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fuel_value": {
          "name": "fuel_value",
          "shortDesc": "Fuel value when burned.",
          "desc": "Fuel value when burned.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fuel_acceleration_multiplier": {
          "name": "fuel_acceleration_multiplier",
          "shortDesc": "The acceleration multiplier when this item is used as fuel in a vehicle.",
          "desc": "The acceleration multiplier when this item is used as fuel in a vehicle.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fuel_top_speed_multiplier": {
          "name": "fuel_top_speed_multiplier",
          "shortDesc": "The fuel top speed multiplier when this item is used as fuel in a vehicle.",
          "desc": "The fuel top speed multiplier when this item is used as fuel in a vehicle.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fuel_emissions_multiplier": {
          "name": "fuel_emissions_multiplier",
          "shortDesc": "The emissions multiplier if this is used as fuel.",
          "desc": "The emissions multiplier if this is used as fuel.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "subgroup": {
          "name": "subgroup",
          "shortDesc": "The subgroup this prototype belongs to.",
          "desc": "The subgroup this prototype belongs to.",
          "type": "LuaGroup",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "group": {
          "name": "group",
          "shortDesc": "The group this prototype belongs to.",
          "desc": "The group this prototype belongs to.",
          "type": "LuaGroup",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "flags": {
          "name": "flags",
          "shortDesc": "The item prototype flags for this item prototype.",
          "desc": "The item prototype flags for this item prototype.",
          "type": "ItemPrototypeFlags",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "rocket_launch_products": {
          "name": "rocket_launch_products",
          "shortDesc": "The results from launching this item in a rocket.",
          "desc": "The results from launching this item in a rocket.",
          "type": {
            "value": [
              "Product"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "can_be_mod_opened": {
          "name": "can_be_mod_opened",
          "shortDesc": "If this item can be mod-opened.",
          "desc": "If this item can be mod-opened.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "magazine_size": {
          "name": "magazine_size",
          "shortDesc": "Size of full magazine; `nil` if this is not an ammo item.",
          "desc": "Size of full magazine; `nil` if this is not an ammo item.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "reload_time": {
          "name": "reload_time",
          "shortDesc": "Amount of extra time (in ticks) it takes to reload the weapon after depleting the magazine or `nil` if this is not an ammo item.",
          "desc": "Amount of extra time (in ticks) it takes to reload the weapon after depleting the magazine or `nil` if this is not an ammo item.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "equipment_grid": {
          "name": "equipment_grid",
          "shortDesc": "The prototype of this armor equipment grid or `nil` if none or this is not an armor item.",
          "desc": "The prototype of this armor equipment grid or `nil` if none or this is not an armor item.",
          "type": "LuaEquipmentGridPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "resistances": {
          "name": "resistances",
          "shortDesc": "Resistances of this armour item; `nil` if not an armor or the armor has no resistances.",
          "desc": "Resistances of this armour item; `nil` if not an armor or the armor has no resistances.",
          "type": "Resistances",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "inventory_size_bonus": {
          "name": "inventory_size_bonus",
          "shortDesc": "The inventory size bonus for this armor prototype.",
          "desc": "The inventory size bonus for this armor prototype. `nil` if this isn't an armor prototype. _Can only be used if this is ArmorPrototype_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "capsule_action": {
          "name": "capsule_action",
          "shortDesc": "The capsule action for this capsule item prototype or `nil` if this isn't a capsule item prototype.",
          "desc": "The capsule action for this capsule item prototype or `nil` if this isn't a capsule item prototype.",
          "type": "CapsuleAction",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "attack_parameters": {
          "name": "attack_parameters",
          "shortDesc": "The gun attack parameters or `nil` if not a gun item prototype.",
          "desc": "The gun attack parameters or `nil` if not a gun item prototype.",
          "type": "AttackParameters",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "inventory_size": {
          "name": "inventory_size",
          "shortDesc": "The main inventory size for item-with-inventory-prototype.",
          "desc": "The main inventory size for item-with-inventory-prototype. `nil` if not an item-with-inventory-prototype. _Can only be used if this is ItemWithInventoryPrototype_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "item_filters": {
          "name": "item_filters",
          "shortDesc": "",
          "desc": "_Can only be used if this is ItemWithInventory_",
          "type": {
            "value": [
              "string",
              "LuaItemPrototype"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "item_group_filters": {
          "name": "item_group_filters",
          "shortDesc": "",
          "desc": "_Can only be used if this is ItemWithInventory_",
          "type": {
            "value": [
              "string",
              "LuaGroup"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "item_subgroup_filters": {
          "name": "item_subgroup_filters",
          "shortDesc": "",
          "desc": "_Can only be used if this is ItemWithInventory_",
          "type": {
            "value": [
              "string",
              "LuaGroup"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "filter_mode": {
          "name": "filter_mode",
          "shortDesc": "The filter mode used by this item with inventory.",
          "desc": "The filter mode used by this item with inventory. _Can only be used if this is ItemWithInventory_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "insertion_priority_mode": {
          "name": "insertion_priority_mode",
          "shortDesc": "The insertion priority mode used by this item with inventory.",
          "desc": "The insertion priority mode used by this item with inventory. _Can only be used if this is ItemWithInventory_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_filter_message": {
          "name": "localised_filter_message",
          "shortDesc": "The localised string used when the player attempts to put items into this item with inventory that aren't allowed.",
          "desc": "The localised string used when the player attempts to put items into this item with inventory that aren't allowed. _Can only be used if this is ItemWithInventory_",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "extend_inventory_by_default": {
          "name": "extend_inventory_by_default",
          "shortDesc": "If this item with inventory extends the inventory it resides in by default.",
          "desc": "If this item with inventory extends the inventory it resides in by default. _Can only be used if this is ItemWithInventory_",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "default_label_color": {
          "name": "default_label_color",
          "shortDesc": "The default label color used for this item with label.",
          "desc": "The default label color used for this item with label. `nil` if not defined or if this isn't an item with label. _Can only be used if this is ItemWithLabel_",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "draw_label_for_cursor_render": {
          "name": "draw_label_for_cursor_render",
          "shortDesc": "If true, and this item with label has a label it is drawn in place of the normal number when held in the cursor.",
          "desc": "If true, and this item with label has a label it is drawn in place of the normal number when held in the cursor. _Can only be used if this is ItemWithLabel_",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "speed": {
          "name": "speed",
          "shortDesc": "The repairing speed if this is a repairing tool; otherwise `nil` .",
          "desc": "The repairing speed if this is a repairing tool; otherwise `nil` .",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "module_effects": {
          "name": "module_effects",
          "shortDesc": "Effects of this module; `nil` if this is not a module.",
          "desc": "Effects of this module; `nil` if this is not a module. It is a dictionary indexed by the effect type. _Can only be used if this is ModuleItem_",
          "type": "Effects",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "category": {
          "name": "category",
          "shortDesc": "The name of a [LuaModuleCategoryPrototype](https://lua-api.factorio.com/latest/LuaModuleCategoryPrototype.html) .",
          "desc": "The name of a [LuaModuleCategoryPrototype](https://lua-api.factorio.com/latest/LuaModuleCategoryPrototype.html) . Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules of the same category with higher tier modules. _Can only be used if this is ModuleItem_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tier": {
          "name": "tier",
          "shortDesc": "Tier of the module inside its category.",
          "desc": "Tier of the module inside its category. Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules with higher tier modules if they have the same category. _Can only be used if this is ModuleItem_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "limitations": {
          "name": "limitations",
          "shortDesc": "An array of recipe names this module is allowed to work with.",
          "desc": "An array of recipe names this module is allowed to work with.\n Empty when all recipes are allowed. _Can only be used if this is ModuleItem_",
          "type": {
            "value": [
              "string"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "limitation_message_key": {
          "name": "limitation_message_key",
          "shortDesc": "The limitation message key used when the player attempts to use this modules in some place it's not allowed.",
          "desc": "The limitation message key used when the player attempts to use this modules in some place it's not allowed. _Can only be used if this is ModuleItem_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "straight_rail": {
          "name": "straight_rail",
          "shortDesc": "The straight rail prototype used for this rail planner prototype.",
          "desc": "The straight rail prototype used for this rail planner prototype. _Can only be used if this is RailPlanner_",
          "type": "LuaEntityPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "curved_rail": {
          "name": "curved_rail",
          "shortDesc": "The curved rail prototype used for this rail planner prototype.",
          "desc": "The curved rail prototype used for this rail planner prototype. _Can only be used if this is RailPlanner_",
          "type": "LuaEntityPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "repair_result": {
          "name": "repair_result",
          "shortDesc": "The repair result of this repair tool prototype or `nil` if this isn't a repair tool prototype.",
          "desc": "The repair result of this repair tool prototype or `nil` if this isn't a repair tool prototype. _Can only be used if this is RepairTool_",
          "type": "Trigger",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "selection_border_color": {
          "name": "selection_border_color",
          "shortDesc": "The color used when doing normal selection with this selection tool prototype.",
          "desc": "The color used when doing normal selection with this selection tool prototype. _Can only be used if this is SelectionTool_",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "alt_selection_border_color": {
          "name": "alt_selection_border_color",
          "shortDesc": "The color used when doing alt selection with this selection tool prototype.",
          "desc": "The color used when doing alt selection with this selection tool prototype. _Can only be used if this is SelectionTool_",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "selection_mode_flags": {
          "name": "selection_mode_flags",
          "shortDesc": "Flags that affect which entities will be selected.",
          "desc": "Flags that affect which entities will be selected. _Can only be used if this is SelectionTool_",
          "type": "SelectionModeFlags",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "alt_selection_mode_flags": {
          "name": "alt_selection_mode_flags",
          "shortDesc": "Flags that affect which entities will be selected during alternate selection.",
          "desc": "Flags that affect which entities will be selected during alternate selection. _Can only be used if this is SelectionTool_",
          "type": "SelectionModeFlags",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "selection_cursor_box_type": {
          "name": "selection_cursor_box_type",
          "shortDesc": "",
          "desc": "_Can only be used if this is SelectionTool_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "alt_selection_cursor_box_type": {
          "name": "alt_selection_cursor_box_type",
          "shortDesc": "",
          "desc": "_Can only be used if this is SelectionTool_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "always_include_tiles": {
          "name": "always_include_tiles",
          "shortDesc": "If tiles area always included when doing selection with this selection tool prototype.",
          "desc": "If tiles area always included when doing selection with this selection tool prototype. _Can only be used if this is SelectionTool_",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "entity_filter_mode": {
          "name": "entity_filter_mode",
          "shortDesc": "The entity filter mode used by this selection tool.",
          "desc": "The entity filter mode used by this selection tool. _Can only be used if this is SelectionTool_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "alt_entity_filter_mode": {
          "name": "alt_entity_filter_mode",
          "shortDesc": "The alt entity filter mode used by this selection tool.",
          "desc": "The alt entity filter mode used by this selection tool. _Can only be used if this is SelectionTool_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tile_filter_mode": {
          "name": "tile_filter_mode",
          "shortDesc": "The tile filter mode used by this selection tool.",
          "desc": "The tile filter mode used by this selection tool. _Can only be used if this is SelectionTool_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "alt_tile_filter_mode": {
          "name": "alt_tile_filter_mode",
          "shortDesc": "The alt tile filter mode used by this selection tool.",
          "desc": "The alt tile filter mode used by this selection tool. _Can only be used if this is SelectionTool_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "entity_filters": {
          "name": "entity_filters",
          "shortDesc": "The entity filters used by this selection tool indexed by entity name.",
          "desc": "The entity filters used by this selection tool indexed by entity name. _Can only be used if this is SelectionTool_",
          "type": {
            "value": [
              "string",
              "LuaEntityPrototype"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "alt_entity_filters": {
          "name": "alt_entity_filters",
          "shortDesc": "The alt entity filters used by this selection tool indexed by entity name.",
          "desc": "The alt entity filters used by this selection tool indexed by entity name. _Can only be used if this is SelectionTool_",
          "type": {
            "value": [
              "string",
              "LuaEntityPrototype"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "entity_type_filters": {
          "name": "entity_type_filters",
          "shortDesc": "The entity type filters used by this selection tool indexed by entity type.",
          "desc": "The entity type filters used by this selection tool indexed by entity type. **Note:** The boolean value is meaningless and is used to allow easy lookup if a type exists in the dictionary. _Can only be used if this is SelectionTool_",
          "type": {
            "value": [
              "string",
              "boolean"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "alt_entity_type_filters": {
          "name": "alt_entity_type_filters",
          "shortDesc": "The alt entity type filters used by this selection tool indexed by entity type.",
          "desc": "The alt entity type filters used by this selection tool indexed by entity type. **Note:** The boolean value is meaningless and is used to allow easy lookup if a type exists in the dictionary. _Can only be used if this is SelectionTool_",
          "type": {
            "value": [
              "string",
              "boolean"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tile_filters": {
          "name": "tile_filters",
          "shortDesc": "The tile filters used by this selection tool indexed by tile name.",
          "desc": "The tile filters used by this selection tool indexed by tile name. _Can only be used if this is SelectionTool_",
          "type": {
            "value": [
              "string",
              "LuaTilePrototype"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "alt_tile_filters": {
          "name": "alt_tile_filters",
          "shortDesc": "The alt tile filters used by this selection tool indexed by tile name.",
          "desc": "The alt tile filters used by this selection tool indexed by tile name. _Can only be used if this is SelectionTool_",
          "type": {
            "value": [
              "string",
              "LuaTilePrototype"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "entity_filter_slots": {
          "name": "entity_filter_slots",
          "shortDesc": "The number of entity filters this deconstruction item has or `nil` if this isn't a deconstruction item prototype.",
          "desc": "The number of entity filters this deconstruction item has or `nil` if this isn't a deconstruction item prototype. _Can only be used if this is DeconstructionItem_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tile_filter_slots": {
          "name": "tile_filter_slots",
          "shortDesc": "The number of tile filters this deconstruction item has or `nil` if this isn't a deconstruction item prototype.",
          "desc": "The number of tile filters this deconstruction item has or `nil` if this isn't a deconstruction item prototype. _Can only be used if this is DeconstructionItem_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "durability_description_key": {
          "name": "durability_description_key",
          "shortDesc": "The durability message key used when displaying the durability of this tool.",
          "desc": "The durability message key used when displaying the durability of this tool. _Can only be used if this is ToolItem_",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "durability": {
          "name": "durability",
          "shortDesc": "The durability of this tool item or `nil` if not a tool item.",
          "desc": "The durability of this tool item or `nil` if not a tool item. _Can only be used if this is ToolItem_",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "infinite": {
          "name": "infinite",
          "shortDesc": "If this tool item has infinite durability.",
          "desc": "If this tool item has infinite durability. `nil` if not a tool type item. _Can only be used if this is ToolItem_",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mapper_count": {
          "name": "mapper_count",
          "shortDesc": "How many filters an upgrade item has.",
          "desc": "How many filters an upgrade item has. `nil` if not a upgrade item. _Can only be used if this is UpgradeItem_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaItemStack": {
      "name": "LuaItemStack",
      "desc": "A reference to an item and count owned by some external entity.\n\n**Note:** In most instances this is a simple reference as in: it points at a specific slot in an inventory and not the item in the slot. **Note:** In the instance this references an item on a [LuaTransportLine](https://lua-api.factorio.com/latest/LuaTransportLine.html) the reference is only guaranteed to stay valid (and refer to the same item) as long as nothing changes the transport line.",
      "url": "LuaItemStack.html",
      "attributes": {
        "is_blueprint_setup": {
          "name": "is_blueprint_setup",
          "shortDesc": "Is this blueprint item setup?",
          "desc": "Is this blueprint item setup? I.e. is it a non-empty blueprint?",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_blueprint_entities": {
          "name": "get_blueprint_entities",
          "shortDesc": "Entities in this blueprint.",
          "desc": "Entities in this blueprint. _Can only be used if this is BlueprintItem_",
          "returnObject": {
            "desc": "The fields of an entity table depend on the type of the entity. Every\n   entity has at least the following fields: * entity_number :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Entity's unique identifier in this blueprint\n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the entity\n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Position of the entity\n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  The direction the entity is facing. Only present for entities\n       that can face in different directions.\n  * other :  Entity-specific fields...",
            "type": {
              "value": [
                "blueprint entity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_blueprint_entities": {
          "name": "set_blueprint_entities",
          "shortDesc": "Set new entities to be a part of this blueprint.",
          "desc": "Set new entities to be a part of this blueprint. _Can only be used if this is BlueprintItem_",
          "parameters": {
            "entities": {
              "name": "entities",
              "desc": "New blueprint entities. The format is the same as in LuaItemStack::get_blueprint_entities .",
              "type": {
                "value": [
                  "blueprint entity"
                ],
                "type": "Array"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "add_ammo": {
          "name": "add_ammo",
          "shortDesc": "Add ammo to this ammo item.",
          "desc": "Add ammo to this ammo item. _Can only be used if this is AmmoItem_",
          "parameters": {
            "amount": {
              "name": "amount",
              "desc": "Amount of ammo to add.",
              "type": "float",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "drain_ammo": {
          "name": "drain_ammo",
          "shortDesc": "Remove ammo from this ammo item.",
          "desc": "Remove ammo from this ammo item. _Can only be used if this is AmmoItem_",
          "parameters": {
            "amount": {
              "name": "amount",
              "desc": "Amount of ammo to remove.",
              "type": "float",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "add_durability": {
          "name": "add_durability",
          "shortDesc": "Add durability to this tool item.",
          "desc": "Add durability to this tool item. _Can only be used if this is ToolItem_",
          "parameters": {
            "amount": {
              "name": "amount",
              "desc": "Amount of durability to add.",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "drain_durability": {
          "name": "drain_durability",
          "shortDesc": "Remove durability from this tool item.",
          "desc": "Remove durability from this tool item. _Can only be used if this is ToolItem_",
          "parameters": {
            "amount": {
              "name": "amount",
              "desc": "Amount of durability to remove.",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "can_set_stack": {
          "name": "can_set_stack",
          "shortDesc": "Would a call to [LuaItemStack::set_stack](https://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.set_stack) succeed?",
          "desc": "Would a call to [LuaItemStack::set_stack](https://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.set_stack) succeed?",
          "parameters": {
            "stack": {
              "name": "stack",
              "desc": "Stack that would be set, possibly nil .",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_stack": {
          "name": "set_stack",
          "shortDesc": "Set this item stack to another item stack.",
          "desc": "Set this item stack to another item stack.",
          "parameters": {
            "stack": {
              "name": "stack",
              "desc": "Item stack to set this one to. Omitting this parameter or passing nil will clear this item stack, as  if by calling LuaItemStack::clear .",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Was the stack set successfully?",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "transfer_stack": {
          "name": "transfer_stack",
          "shortDesc": "Transfers the given item stack into this item stack.",
          "desc": "Transfers the given item stack into this item stack.",
          "parameters": {
            "stack": {
              "name": "stack",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "True if the full stack was transferred.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "export_stack": {
          "name": "export_stack",
          "shortDesc": "Export a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) to a string",
          "desc": "Export a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) to a string",
          "returnObject": {
            "desc": "The exported string",
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "import_stack": {
          "name": "import_stack",
          "shortDesc": "Import a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) from a string",
          "desc": "Import a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) from a string",
          "parameters": {
            "data": {
              "name": "data",
              "desc": "The string to import",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "0 if the import succeeded with no errors. -1 if the import succeeded with errors. 1 if the import failed.",
            "type": "int",
            "optional": false
          },
          "attribute_type": "function"
        },
        "swap_stack": {
          "name": "swap_stack",
          "shortDesc": "Swaps this item stack with the given item stack if allowed.",
          "desc": "Swaps this item stack with the given item stack if allowed.",
          "parameters": {
            "stack": {
              "name": "stack",
              "type": "LuaItemStack",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "if the 2 stacks were swapped successfully.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "clear": {
          "name": "clear",
          "shortDesc": "Clear this item stack.",
          "desc": "Clear this item stack.",
          "attribute_type": "function"
        },
        "get_blueprint_tiles": {
          "name": "get_blueprint_tiles",
          "shortDesc": "Tiles in this blueprint",
          "desc": "Tiles in this blueprint _Can only be used if this is BlueprintItem_",
          "returnObject": {
            "desc": "A blueprint tile is a table: * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)\n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the tile.",
            "type": {
              "value": [
                "blueprint tile"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_blueprint_tiles": {
          "name": "set_blueprint_tiles",
          "shortDesc": "Set tiles in this blueprint",
          "desc": "Set tiles in this blueprint _Can only be used if this is BlueprintItem_",
          "parameters": {
            "tiles": {
              "name": "tiles",
              "desc": "Tiles to be a part of the blueprint; the format is the same as is  returned from the corresponding get function; see LuaItemStack::get_blueprint_tiles .",
              "type": {
                "value": [
                  "blueprint tile"
                ],
                "type": "Array"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_inventory": {
          "name": "get_inventory",
          "shortDesc": "Access the inner inventory of an item.",
          "desc": "Access the inner inventory of an item.",
          "parameters": {
            "inventory": {
              "name": "inventory",
              "desc": "Index of the inventory to access -- currently can only be defines.inventory.item_main .",
              "type": "defines.inventory",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "or `nil` if there is no inventory with the given index.",
            "type": "LuaInventory",
            "optional": false
          },
          "attribute_type": "function"
        },
        "build_blueprint": {
          "name": "build_blueprint",
          "shortDesc": "Build this blueprint",
          "desc": "Build this blueprint",
          "parameters": {
            "luaItemStackbuild_blueprint_param": {
              "name": "luaItemStackbuild_blueprint_param",
              "desc": "Table with the following fields",
              "type": "LuaItemStackbuild_blueprint_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Array of created ghosts",
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaItemStackbuild_blueprint_param",
              "attributes": {
                "surface": {
                  "name": "surface",
                  "desc": "Surface to build on",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "Force to use for the building",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "The position to build at",
                  "type": "Position",
                  "optional": false
                },
                "force_build": {
                  "name": "force_build",
                  "desc": "When true, anything that can be built is else nothing is built if any one thing can't be built",
                  "type": "boolean",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "desc": "The direction to use when building",
                  "type": "defines.direction",
                  "optional": false
                },
                "skip_fog_of_war": {
                  "name": "skip_fog_of_war",
                  "desc": "If chunks covered by fog-of-war are skipped.",
                  "type": "boolean",
                  "optional": false
                },
                "by_player": {
                  "name": "by_player",
                  "desc": "The player to use if any. If provided defines.events.on_built_entity will also be fired on successful entity creation.",
                  "type": "PlayerSpecification",
                  "optional": false
                },
                "raise_built": {
                  "name": "raise_built",
                  "desc": "If true; defines.events.script_raised_built will be fired on successful entity creation. Note: this is ignored if by_player is provided.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "deconstruct_area": {
          "name": "deconstruct_area",
          "shortDesc": "Deconstruct the given area with this deconstruction item.",
          "desc": "Deconstruct the given area with this deconstruction item.",
          "parameters": {
            "luaItemStackdeconstruct_area_param": {
              "name": "luaItemStackdeconstruct_area_param",
              "desc": "Table with the following fields",
              "type": "LuaItemStackdeconstruct_area_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaItemStackdeconstruct_area_param",
              "attributes": {
                "surface": {
                  "name": "surface",
                  "desc": "Surface to deconstruct on",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "Force to use for the deconstruction",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "area": {
                  "name": "area",
                  "desc": "The area to deconstruct",
                  "type": "BoundingBox",
                  "optional": false
                },
                "skip_fog_of_war": {
                  "name": "skip_fog_of_war",
                  "desc": "If chunks covered by fog-of-war are skipped.",
                  "type": "boolean",
                  "optional": false
                },
                "by_player": {
                  "name": "by_player",
                  "desc": "The player to use if any.",
                  "type": "PlayerSpecification",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "cancel_deconstruct_area": {
          "name": "cancel_deconstruct_area",
          "shortDesc": "Cancel deconstruct the given area with this deconstruction item.",
          "desc": "Cancel deconstruct the given area with this deconstruction item.",
          "parameters": {
            "luaItemStackcancel_deconstruct_area_param": {
              "name": "luaItemStackcancel_deconstruct_area_param",
              "desc": "Table with the following fields",
              "type": "LuaItemStackcancel_deconstruct_area_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaItemStackcancel_deconstruct_area_param",
              "attributes": {
                "surface": {
                  "name": "surface",
                  "desc": "Surface to cancel deconstruct on",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "Force to use for canceling deconstruction",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "area": {
                  "name": "area",
                  "desc": "The area to deconstruct",
                  "type": "BoundingBox",
                  "optional": false
                },
                "skip_fog_of_war": {
                  "name": "skip_fog_of_war",
                  "desc": "If chunks covered by fog-of-war are skipped.",
                  "type": "boolean",
                  "optional": false
                },
                "by_player": {
                  "name": "by_player",
                  "desc": "The player to use if any.",
                  "type": "PlayerSpecification",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "create_blueprint": {
          "name": "create_blueprint",
          "shortDesc": "Sets up this blueprint using the found blueprintable entities/tiles on the surface.",
          "desc": "Sets up this blueprint using the found blueprintable entities/tiles on the surface.",
          "parameters": {
            "luaItemStackcreate_blueprint_param": {
              "name": "luaItemStackcreate_blueprint_param",
              "desc": "Table with the following fields",
              "type": "LuaItemStackcreate_blueprint_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The blueprint entity index to source entity mapping.",
            "type": {
              "value": [
                "uint",
                "LuaEntity"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaItemStackcreate_blueprint_param",
              "attributes": {
                "surface": {
                  "name": "surface",
                  "desc": "Surface to create from",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "Force to use for the creation",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "area": {
                  "name": "area",
                  "desc": "The bounding box",
                  "type": "BoundingBox",
                  "optional": false
                },
                "always_include_tiles": {
                  "name": "always_include_tiles",
                  "desc": "When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area.",
                  "type": "boolean",
                  "optional": false
                },
                "include_entities": {
                  "name": "include_entities",
                  "desc": "When true, entities are included in the blueprint. Defaults to true.",
                  "type": "boolean",
                  "optional": false
                },
                "include_modules": {
                  "name": "include_modules",
                  "desc": "When true, modules are included in the blueprint. Defaults to true.",
                  "type": "boolean",
                  "optional": false
                },
                "include_station_names": {
                  "name": "include_station_names",
                  "desc": "When true, station names are included in the blueprint. Defaults to false.",
                  "type": "boolean",
                  "optional": false
                },
                "include_trains": {
                  "name": "include_trains",
                  "desc": "When true, trains are included in the blueprint. Defaults to false.",
                  "type": "boolean",
                  "optional": false
                },
                "include_fuel": {
                  "name": "include_fuel",
                  "desc": "When true, train fuel is included in the blueprint, Defaults to true.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "get_tag": {
          "name": "get_tag",
          "shortDesc": "Gets the tag with the given name or returns `nil` if it doesn't exist.",
          "desc": "Gets the tag with the given name or returns `nil` if it doesn't exist. _Can only be used if this is ItemWithTags_",
          "parameters": {
            "tag_name": {
              "name": "tag_name",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "Any",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_tag": {
          "name": "set_tag",
          "shortDesc": "Sets the tag with the given name and value.",
          "desc": "Sets the tag with the given name and value. _Can only be used if this is ItemWithTags_",
          "parameters": {
            "tag_name": {
              "name": "tag_name",
              "type": "string",
              "optional": false
            },
            "tag": {
              "name": "tag",
              "type": "Any",
              "optional": false
            }
          },
          "returnObject": {
            "type": "Any",
            "optional": false
          },
          "attribute_type": "function"
        },
        "remove_tag": {
          "name": "remove_tag",
          "shortDesc": "Removes a tag with the given name.",
          "desc": "Removes a tag with the given name. _Can only be used if this is ItemWithTags_",
          "parameters": {
            "tag": {
              "name": "tag",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the tag existed and was removed.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "clear_blueprint": {
          "name": "clear_blueprint",
          "shortDesc": "Clears this blueprint item.",
          "desc": "Clears this blueprint item. _Can only be used if this is BlueprintItem_",
          "attribute_type": "function"
        },
        "get_entity_filter": {
          "name": "get_entity_filter",
          "shortDesc": "Gets the entity filter at the given index for this deconstruction item.",
          "desc": "Gets the entity filter at the given index for this deconstruction item. _Can only be used if this is DeconstructionItem_",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_entity_filter": {
          "name": "set_entity_filter",
          "shortDesc": "Sets the entity filter at the given index for this deconstruction item.",
          "desc": "Sets the entity filter at the given index for this deconstruction item. _Can only be used if this is DeconstructionItem_",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            },
            "filter": {
              "name": "filter",
              "desc": "Setting to nil erases the filter.",
              "type": {
                "value": [
                  "string",
                  "LuaEntityPrototype",
                  "LuaEntity"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the new filter was set (was valid.)",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_tile_filter": {
          "name": "get_tile_filter",
          "shortDesc": "Gets the tile filter at the given index for this deconstruction item.",
          "desc": "Gets the tile filter at the given index for this deconstruction item. _Can only be used if this is DeconstructionItem_",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_tile_filter": {
          "name": "set_tile_filter",
          "shortDesc": "Sets the tile filter at the given index for this deconstruction item.",
          "desc": "Sets the tile filter at the given index for this deconstruction item. _Can only be used if this is DeconstructionItem_",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            },
            "filter": {
              "name": "filter",
              "desc": "Setting to nil erases the filter.",
              "type": {
                "value": [
                  "string",
                  "LuaTilePrototype",
                  "LuaTile"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the new filter was set (was valid.)",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "clear_deconstruction_item": {
          "name": "clear_deconstruction_item",
          "shortDesc": "Clears all settings/filters on this deconstruction item resetting it to default values.",
          "desc": "Clears all settings/filters on this deconstruction item resetting it to default values. _Can only be used if this is DeconstructionItem_",
          "attribute_type": "function"
        },
        "clear_upgrade_item": {
          "name": "clear_upgrade_item",
          "shortDesc": "Clears all settings/filters on this upgrade item resetting it to default values.",
          "desc": "Clears all settings/filters on this upgrade item resetting it to default values. _Can only be used if this is UpgradeItem_",
          "attribute_type": "function"
        },
        "get_mapper": {
          "name": "get_mapper",
          "shortDesc": "Gets the filter at the given index for this upgrade item.",
          "desc": "Gets the filter at the given index for this upgrade item. _Can only be used if this is UpgradeItem_",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The index of the mapper to read.",
              "type": "uint",
              "optional": false
            },
            "type": {
              "name": "type",
              "desc": "'from' or 'to'.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "UpgradeFilter",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_mapper": {
          "name": "set_mapper",
          "shortDesc": "Sets the module filter at the given index for this upgrade item.",
          "desc": "Sets the module filter at the given index for this upgrade item. _Can only be used if this is UpgradeItem_",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The index of the mapper to set.",
              "type": "uint",
              "optional": false
            },
            "type": {
              "name": "type",
              "desc": "from or to .",
              "type": "string",
              "optional": false
            },
            "filter": {
              "name": "filter",
              "desc": "The filter to set or nil",
              "type": "UpgradeFilter",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_blueprint_entity_count": {
          "name": "get_blueprint_entity_count",
          "shortDesc": "Gets the number of entities in this blueprint item.",
          "desc": "Gets the number of entities in this blueprint item. _Can only be used if this is BlueprintItem_",
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_blueprint_entity_tags": {
          "name": "get_blueprint_entity_tags",
          "shortDesc": "Gets the tags for the given blueprint entity index in this blueprint item.",
          "desc": "Gets the tags for the given blueprint entity index in this blueprint item. _Can only be used if this is BlueprintItem_",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "Tags",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_blueprint_entity_tags": {
          "name": "set_blueprint_entity_tags",
          "shortDesc": "Sets the tags on the given blueprint entity index in this blueprint item.",
          "desc": "Sets the tags on the given blueprint entity index in this blueprint item. _Can only be used if this is BlueprintItem_",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The entity index",
              "type": "uint",
              "optional": false
            },
            "tags": {
              "name": "tags",
              "type": "Tags",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_blueprint_entity_tag": {
          "name": "get_blueprint_entity_tag",
          "shortDesc": "Gets the given tag on the given blueprint entity index in this blueprint item.",
          "desc": "Gets the given tag on the given blueprint entity index in this blueprint item. _Can only be used if this is BlueprintItem_",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The entity index",
              "type": "uint",
              "optional": false
            },
            "tag": {
              "name": "tag",
              "desc": "The tag to get",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "Any",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_blueprint_entity_tag": {
          "name": "set_blueprint_entity_tag",
          "shortDesc": "Sets the given tag on the given blueprint entity index in this blueprint item.",
          "desc": "Sets the given tag on the given blueprint entity index in this blueprint item. _Can only be used if this is BlueprintItem_",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The entity index",
              "type": "uint",
              "optional": false
            },
            "tag": {
              "name": "tag",
              "desc": "The tag to set",
              "type": "string",
              "optional": false
            },
            "value": {
              "name": "value",
              "desc": "The tag value to set or nil to clear the tag",
              "type": "Any",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "create_grid": {
          "name": "create_grid",
          "shortDesc": "Creates the equipment grid for this item if it doesn't exist and this is an item-with-entity-data that supports equipment grids.",
          "desc": "Creates the equipment grid for this item if it doesn't exist and this is an item-with-entity-data that supports equipment grids. _Can only be used if this is ItemWithEntityData_",
          "returnObject": {
            "type": "LuaEquipmentGrid",
            "optional": false
          },
          "attribute_type": "function"
        },
        "valid_for_read": {
          "name": "valid_for_read",
          "shortDesc": "Is this valid for reading?",
          "desc": "Is this valid for reading? Differs from the usual `valid` in that `valid` will be `true` even if\n the item stack is blank but the entity that holds it is still valid.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "prototype": {
          "name": "prototype",
          "shortDesc": "Prototype of the item held in this stack.",
          "desc": "Prototype of the item held in this stack.",
          "type": "LuaItemPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "name": {
          "name": "name",
          "shortDesc": "Prototype name of the item held in this stack.",
          "desc": "Prototype name of the item held in this stack.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "type": {
          "name": "type",
          "shortDesc": "Type of the item prototype.",
          "desc": "Type of the item prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "count": {
          "name": "count",
          "shortDesc": "Number of items in this stack.",
          "desc": "Number of items in this stack.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "grid": {
          "name": "grid",
          "shortDesc": "The equipment grid of this item or `nil` if this item doesn't have a grid.",
          "desc": "The equipment grid of this item or `nil` if this item doesn't have a grid.",
          "type": "LuaEquipmentGrid",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "health": {
          "name": "health",
          "shortDesc": "How much health the item has, as a number in range [0, 1].",
          "desc": "How much health the item has, as a number in range [0, 1].",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "durability": {
          "name": "durability",
          "shortDesc": "Durability of the contained item.",
          "desc": "Durability of the contained item. Automatically capped at the item's maximum durability. **Note:** When used on a non-tool item, the value of this attribute is `nil` .",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "ammo": {
          "name": "ammo",
          "shortDesc": "Number of bullets left in the magazine.",
          "desc": "Number of bullets left in the magazine. _Can only be used if this is AmmoItem_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "blueprint_icons": {
          "name": "blueprint_icons",
          "shortDesc": "Icons of a blueprint item, blueprint book, deconstruction item or upgrade planner.",
          "desc": "Icons of a blueprint item, blueprint book, deconstruction item or upgrade planner.\n An item that doesn't have icons returns nil on read and throws error on write.\n Every entry of this array has the following fields: * signal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) :  Slot icon to use. The slot will have the icon of the specified signal. This allows\n                            the use of any item icon, as well as virtual signal icons.\n  * index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Index of the icon in the blueprint icons slots. Has to be in {1, 2, 3, 4}. _Can only be used if this is BlueprintItem_",
          "type": {
            "value": [
              "Icon"
            ],
            "type": "Array"
          },
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "blueprint_snap_to_grid": {
          "name": "blueprint_snap_to_grid",
          "shortDesc": "The snapping grid size in this blueprint item or nil if snapping is not enabled.",
          "desc": "The snapping grid size in this blueprint item or nil if snapping is not enabled. _Can only be used if this is BlueprintItem_",
          "type": "Position",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "blueprint_position_relative_to_grid": {
          "name": "blueprint_position_relative_to_grid",
          "shortDesc": "The offset from the absolute grid or nil if absolute snapping is not enabled.",
          "desc": "The offset from the absolute grid or nil if absolute snapping is not enabled. _Can only be used if this is BlueprintItem_",
          "type": "Position",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "blueprint_absolute_snapping": {
          "name": "blueprint_absolute_snapping",
          "shortDesc": "If absolute snapping is enabled on this blueprint item.",
          "desc": "If absolute snapping is enabled on this blueprint item. _Can only be used if this is BlueprintItem_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "label": {
          "name": "label",
          "shortDesc": "The current label for this item.",
          "desc": "The current label for this item. Nil when none. _Can only be used if this is ItemWithLabel_",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "label_color": {
          "name": "label_color",
          "shortDesc": "The current label color for this item.",
          "desc": "The current label color for this item. Nil when none. _Can only be used if this is ItemWithLabel_",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "allow_manual_label_change": {
          "name": "allow_manual_label_change",
          "shortDesc": "If the label for this item can be manually changed.",
          "desc": "If the label for this item can be manually changed. When false the label can only be changed through the API. _Can only be used if this is ItemWithLabel_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "cost_to_build": {
          "name": "cost_to_build",
          "shortDesc": "Raw materials required to build this blueprint.",
          "desc": "Raw materials required to build this blueprint. Result is a dictionary mapping each item prototype name\n to the required count. _Can only be used if this is BlueprintItem_",
          "type": {
            "value": [
              "string",
              "uint"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "extends_inventory": {
          "name": "extends_inventory",
          "shortDesc": "If this item extends the inventory it resides in (provides its contents for counts, crafting, insertion).",
          "desc": "If this item extends the inventory it resides in (provides its contents for counts, crafting, insertion). Only callable on items with inventories. _Can only be used if this is ItemWithInventory_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "prioritize_insertion_mode": {
          "name": "prioritize_insertion_mode",
          "shortDesc": "The insertion mode priority this ItemWithInventory uses when items are inserted into an inventory it resides in.",
          "desc": "The insertion mode priority this ItemWithInventory uses when items are inserted into an inventory it resides in. Only callable on items with inventories. _Can only be used if this is ItemWithInventory_",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "default_icons": {
          "name": "default_icons",
          "shortDesc": "The default icons for a blueprint item.",
          "desc": "The default icons for a blueprint item. Every entry of this array has the following fields : * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the item whose icon to use\n  * index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Index of the icon in the blueprint icons slots. Has to be in {1, 2, 3, 4}. _Can only be used if this is BlueprintItem_",
          "type": {
            "value": [
              "Icon"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tags": {
          "name": "tags",
          "shortDesc": "",
          "desc": "_Can only be used if this is ItemWithTags_",
          "type": "Tags",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "custom_description": {
          "name": "custom_description",
          "shortDesc": "The custom description this item-with-tags.",
          "desc": "The custom description this item-with-tags. This is shown over the normal item description if this is set to a non-empty value.",
          "type": "LocalisedString",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "entity_filters": {
          "name": "entity_filters",
          "shortDesc": "The entity filters for this deconstruction item.",
          "desc": "The entity filters for this deconstruction item.",
          "type": {
            "value": [
              "string"
            ],
            "type": "Array"
          },
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tile_filters": {
          "name": "tile_filters",
          "shortDesc": "The tile filters for this deconstruction item.",
          "desc": "The tile filters for this deconstruction item.",
          "type": {
            "value": [
              "string"
            ],
            "type": "Array"
          },
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "entity_filter_mode": {
          "name": "entity_filter_mode",
          "shortDesc": "The blacklist/whitelist entity filter mode for this deconstruction item.",
          "desc": "The blacklist/whitelist entity filter mode for this deconstruction item. _Can only be used if this is DeconstructionItem_",
          "type": "defines.deconstruction_item.entity_filter_mode",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tile_filter_mode": {
          "name": "tile_filter_mode",
          "shortDesc": "The blacklist/whitelist tile filter mode for this deconstruction item.",
          "desc": "The blacklist/whitelist tile filter mode for this deconstruction item. _Can only be used if this is DeconstructionItem_",
          "type": "defines.deconstruction_item.tile_filter_mode",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "tile_selection_mode": {
          "name": "tile_selection_mode",
          "shortDesc": "The tile selection mode for this deconstruction item.",
          "desc": "The tile selection mode for this deconstruction item. _Can only be used if this is DeconstructionItem_",
          "type": "defines.deconstruction_item.tile_selection_mode",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "trees_and_rocks_only": {
          "name": "trees_and_rocks_only",
          "shortDesc": "If this deconstruction item is set to allow trees and rocks only.",
          "desc": "If this deconstruction item is set to allow trees and rocks only. _Can only be used if this is DeconstructionItem_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "entity_filter_count": {
          "name": "entity_filter_count",
          "shortDesc": "The number of entity filters this deconstruction item supports.",
          "desc": "The number of entity filters this deconstruction item supports. _Can only be used if this is DeconstructionItem_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tile_filter_count": {
          "name": "tile_filter_count",
          "shortDesc": "The number of tile filters this deconstruction item supports.",
          "desc": "The number of tile filters this deconstruction item supports. _Can only be used if this is DeconstructionItem_",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "active_index": {
          "name": "active_index",
          "shortDesc": "The active blueprint index for this blueprint book.",
          "desc": "The active blueprint index for this blueprint book. May be `nil` . _Can only be used if this is BlueprintBookItem_",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "item_number": {
          "name": "item_number",
          "shortDesc": "The unique identifier for this item if it has one, `nil` otherwise.",
          "desc": "The unique identifier for this item if it has one, `nil` otherwise. Note that this ID stays the same no matter where the item is moved to. Only these types of items have unique IDs: * `\"armor\"`\n  * `\"spidertron-remote\"`\n  * `\"selection-tool\"`\n  * `\"copy-paste-tool\"`\n  * `\"upgrade-item\"`\n  * `\"deconstruction-item\"`\n  * `\"blueprint\"`\n  * `\"blueprint-book\"`\n  * `\"item-with-entity-data\"`\n  * `\"item-with-inventory\"`\n  * `\"item-with-tags\"`",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "connected_entity": {
          "name": "connected_entity",
          "shortDesc": "If this item is spidertron remote and has spidertron bound to it, the connected spider-vehicle entity is returned, otherwise `nil` .",
          "desc": "If this item is spidertron remote and has spidertron bound to it, the connected spider-vehicle entity is returned, otherwise `nil` .",
          "type": "any",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "is_blueprint": {
          "name": "is_blueprint",
          "shortDesc": "If this is a blueprint item.",
          "desc": "If this is a blueprint item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_blueprint_book": {
          "name": "is_blueprint_book",
          "shortDesc": "If this is a blueprint book item.",
          "desc": "If this is a blueprint book item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_module": {
          "name": "is_module",
          "shortDesc": "If this is a module item.",
          "desc": "If this is a module item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_tool": {
          "name": "is_tool",
          "shortDesc": "If this is a tool item.",
          "desc": "If this is a tool item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_mining_tool": {
          "name": "is_mining_tool",
          "shortDesc": "If this is a mining tool item.",
          "desc": "If this is a mining tool item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_armor": {
          "name": "is_armor",
          "shortDesc": "If this is an armor item.",
          "desc": "If this is an armor item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_repair_tool": {
          "name": "is_repair_tool",
          "shortDesc": "If this is a repair tool item.",
          "desc": "If this is a repair tool item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_item_with_label": {
          "name": "is_item_with_label",
          "shortDesc": "If this is an item with label item.",
          "desc": "If this is an item with label item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_item_with_inventory": {
          "name": "is_item_with_inventory",
          "shortDesc": "If this is an item with inventory item.",
          "desc": "If this is an item with inventory item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_item_with_entity_data": {
          "name": "is_item_with_entity_data",
          "shortDesc": "If this is an item with entity data item.",
          "desc": "If this is an item with entity data item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_selection_tool": {
          "name": "is_selection_tool",
          "shortDesc": "If this is a selection tool item.",
          "desc": "If this is a selection tool item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_item_with_tags": {
          "name": "is_item_with_tags",
          "shortDesc": "If this is an item with tags item.",
          "desc": "If this is an item with tags item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_deconstruction_item": {
          "name": "is_deconstruction_item",
          "shortDesc": "If this is a deconstruction tool item.",
          "desc": "If this is a deconstruction tool item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_upgrade_item": {
          "name": "is_upgrade_item",
          "shortDesc": "If this is a upgrade item.",
          "desc": "If this is a upgrade item.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaLampControlBehavior": {
      "name": "LuaLampControlBehavior",
      "desc": "Control behavior for lamps.\n\n",
      "url": "LuaControlBehavior.html#LuaLampControlBehavior.brief",
      "attributes": {
        "use_colors": {
          "name": "use_colors",
          "shortDesc": "`true` if the lamp should set the color from the circuit network signals.",
          "desc": "`true` if the lamp should set the color from the circuit network signals.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "color": {
          "name": "color",
          "shortDesc": "The color the lamp is showing or `nil` if not using any color.",
          "desc": "The color the lamp is showing or `nil` if not using any color.",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaGenericOnOffControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaLazyLoadedValue": {
      "name": "LuaLazyLoadedValue",
      "desc": "A lazily loaded value.\n For performance reasons, we sometimes return a custom lazily-loaded value type instead of the native Lua value. This custom\n type lazily constructs the necessary value when [LuaLazyLoadedValue::get](https://lua-api.factorio.com/latest/LuaLazyLoadedValue.html#LuaLazyLoadedValue.get) is called, therefore preventing its\n unnecessary construction in some cases.\nAn instance of LuaLazyLoadedValue is only valid during the event it was created from and cannot be saved.",
      "url": "LuaLazyLoadedValue.html",
      "attributes": {
        "get": {
          "name": "get",
          "shortDesc": "Gets the value of this lazy loaded value.",
          "desc": "Gets the value of this lazy loaded value.",
          "returnObject": {
            "type": "varies",
            "optional": false
          },
          "attribute_type": "function"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaLogisticCell": {
      "name": "LuaLogisticCell",
      "desc": "Logistic cell of a particular [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) . A \"Logistic Cell\" is the given name for\n settings and properties used by what would normally be seen as a \"Roboport\". A logistic\n cell however doesn't have to be attached to the roboport entity (the character has one for\n the personal roboport).",
      "url": "LuaLogisticCell.html",
      "attributes": {
        "is_in_logistic_range": {
          "name": "is_in_logistic_range",
          "shortDesc": "Is a given position within the logistic range of this cell?",
          "desc": "Is a given position within the logistic range of this cell?",
          "parameters": {
            "position": {
              "name": "position",
              "type": "Position",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_in_construction_range": {
          "name": "is_in_construction_range",
          "shortDesc": "Is a given position within the construction range of this cell?",
          "desc": "Is a given position within the construction range of this cell?",
          "parameters": {
            "position": {
              "name": "position",
              "type": "Position",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_neighbour_with": {
          "name": "is_neighbour_with",
          "shortDesc": "Are two cells neighbours?",
          "desc": "Are two cells neighbours?",
          "parameters": {
            "other": {
              "name": "other",
              "type": "LuaLogisticCell",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "logistic_radius": {
          "name": "logistic_radius",
          "shortDesc": "Logistic radius of this cell.",
          "desc": "Logistic radius of this cell.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "logistics_connection_distance": {
          "name": "logistics_connection_distance",
          "shortDesc": "Logistic connection distance of this cell.",
          "desc": "Logistic connection distance of this cell.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "construction_radius": {
          "name": "construction_radius",
          "shortDesc": "Construction radius of this cell.",
          "desc": "Construction radius of this cell.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "stationed_logistic_robot_count": {
          "name": "stationed_logistic_robot_count",
          "shortDesc": "Number of stationed logistic robots in this cell.",
          "desc": "Number of stationed logistic robots in this cell.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "stationed_construction_robot_count": {
          "name": "stationed_construction_robot_count",
          "shortDesc": "Number of stationed construction robots in this cell.",
          "desc": "Number of stationed construction robots in this cell.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mobile": {
          "name": "mobile",
          "shortDesc": "`true` if this is a mobile cell.",
          "desc": "`true` if this is a mobile cell. In vanilla, only the logistic cell created by a character's personal\n roboport is mobile.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "transmitting": {
          "name": "transmitting",
          "shortDesc": "`true` if this cell is active.",
          "desc": "`true` if this cell is active.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "charge_approach_distance": {
          "name": "charge_approach_distance",
          "shortDesc": "Radius at which the robots hover when waiting to be charged.",
          "desc": "Radius at which the robots hover when waiting to be charged.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "charging_robot_count": {
          "name": "charging_robot_count",
          "shortDesc": "Number of robots currently charging.",
          "desc": "Number of robots currently charging.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "to_charge_robot_count": {
          "name": "to_charge_robot_count",
          "shortDesc": "Number of robots waiting to charge.",
          "desc": "Number of robots waiting to charge.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "owner": {
          "name": "owner",
          "shortDesc": "This cell's owner.",
          "desc": "This cell's owner.",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "logistic_network": {
          "name": "logistic_network",
          "shortDesc": "The network that owns this cell or `nil` .",
          "desc": "The network that owns this cell or `nil` .",
          "type": "LuaLogisticNetwork",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "neighbours": {
          "name": "neighbours",
          "shortDesc": "Neighbouring cells.",
          "desc": "Neighbouring cells.",
          "type": {
            "value": [
              "LuaLogisticCell"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "charging_robots": {
          "name": "charging_robots",
          "shortDesc": "Robots currently being charged.",
          "desc": "Robots currently being charged.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "to_charge_robots": {
          "name": "to_charge_robots",
          "shortDesc": "Robots waiting to charge.",
          "desc": "Robots waiting to charge.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaLogisticContainerControlBehavior": {
      "name": "LuaLogisticContainerControlBehavior",
      "desc": "Control behavior for logistic chests.",
      "url": "LuaControlBehavior.html#LuaLogisticContainerControlBehavior.brief",
      "attributes": {
        "circuit_mode_of_operation": {
          "name": "circuit_mode_of_operation",
          "shortDesc": "The circuit mode of operations for the logistic container.",
          "desc": "The circuit mode of operations for the logistic container.",
          "type": "defines.control_behavior.logistic_container.circuit_mode_of_operation",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaLogisticNetwork": {
      "name": "LuaLogisticNetwork",
      "desc": "A single logistic network of a given force on a given surface.",
      "url": "LuaLogisticNetwork.html",
      "attributes": {
        "get_item_count": {
          "name": "get_item_count",
          "shortDesc": "Count given or all items in the network or given members.",
          "desc": "Count given or all items in the network or given members.",
          "parameters": {
            "item": {
              "name": "item",
              "desc": "Item name to count. If not given, gives counts  of all items in the network.",
              "type": "string",
              "optional": false
            },
            "member": {
              "name": "member",
              "desc": "Logistic members to check, must be either \"storage\" or \"providers\" . If not given, gives count in the entire network.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "int",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_contents": {
          "name": "get_contents",
          "shortDesc": "Get item counts for the entire network.",
          "desc": "Get item counts for the entire network. **See also** See also * [LuaInventory::get_contents](https://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.get_contents)",
          "returnObject": {
            "desc": "A mapping of item prototype names to the number available in the network.",
            "type": {
              "value": [
                "string",
                "uint"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "remove_item": {
          "name": "remove_item",
          "shortDesc": "Remove items from the logistic network.",
          "desc": "Remove items from the logistic network. This will actually remove the items from some\n logistic chests.",
          "parameters": {
            "item": {
              "name": "item",
              "desc": "What to remove.",
              "type": "ItemStackSpecification",
              "optional": false
            },
            "members": {
              "name": "members",
              "desc": "Which logistic members to remove from. Must be \"storage\" , \"passive-provider\" , \"buffer\" , or \"active-provider\" . If not specified, removes  from the network in the usual order.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Number of items removed.",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "insert": {
          "name": "insert",
          "shortDesc": "Insert items into the logistic network.",
          "desc": "Insert items into the logistic network. This will actually insert the items into some\n logistic chests.",
          "parameters": {
            "item": {
              "name": "item",
              "desc": "What to insert.",
              "type": "ItemStackSpecification",
              "optional": false
            },
            "members": {
              "name": "members",
              "desc": "Which logistic members to insert the items to. Must be \"storage\" , \"storage-empty\" (storage chests that are completely empty), \"storage-empty-slot\" (storage chests that have an empty slot), or \"requester\" . If not  specified, inserts items into the logistic network in the usual order.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Number of items actually inserted.",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "find_cell_closest_to": {
          "name": "find_cell_closest_to",
          "shortDesc": "Find logistic cell closest to a given position.",
          "desc": "Find logistic cell closest to a given position.",
          "parameters": {
            "position": {
              "name": "position",
              "type": "Position",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "May be `nil` if no cell was found.",
            "type": "LuaLogisticCell",
            "optional": false
          },
          "attribute_type": "function"
        },
        "select_pickup_point": {
          "name": "select_pickup_point",
          "shortDesc": "Find the 'best' logistic point with this item ID and from the given position or from given chest type.",
          "desc": "Find the 'best' logistic point with this item ID and from the given position or from given chest type.",
          "parameters": {
            "luaLogisticNetworkselect_pickup_point_param": {
              "name": "luaLogisticNetworkselect_pickup_point_param",
              "desc": "Table with the following fields",
              "type": "LuaLogisticNetworkselect_pickup_point_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "May be `nil` if no point was found.",
            "type": "LuaLogisticPoint",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaLogisticNetworkselect_pickup_point_param",
              "attributes": {
                "name": {
                  "name": "name",
                  "desc": "Name of the item to select.",
                  "type": "string",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "When given, it will find the storage 'best' storage point from this position.",
                  "type": "Position",
                  "optional": false
                },
                "include_buffers": {
                  "name": "include_buffers",
                  "desc": "Whether to consider buffer chests or not. Defaults to false. Only considered if selecting with position.",
                  "type": "boolean",
                  "optional": false
                },
                "members": {
                  "name": "members",
                  "desc": "When given, it will find from only the specific type of member. Must be \"storage\" , \"passive-provider\" , \"buffer\" or \"active-provider\" . If not specified, selects with normal priorities. Not considered if position is specified.",
                  "type": "string",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "select_drop_point": {
          "name": "select_drop_point",
          "shortDesc": "Find a logistic point to drop the specific item stack.",
          "desc": "Find a logistic point to drop the specific item stack.",
          "parameters": {
            "luaLogisticNetworkselect_drop_point_param": {
              "name": "luaLogisticNetworkselect_drop_point_param",
              "desc": "Table with the following fields",
              "type": "LuaLogisticNetworkselect_drop_point_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "May be `nil` if no point was found.",
            "type": "LuaLogisticPoint",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaLogisticNetworkselect_drop_point_param",
              "attributes": {
                "stack": {
                  "name": "stack",
                  "desc": "Name of the item to select.",
                  "type": "ItemStackSpecification",
                  "optional": false
                },
                "members": {
                  "name": "members",
                  "desc": "When given, it will find from only the specific type of member. Must be \"storage\" , \"storage-empty\" , \"storage-empty-slot\" or \"requester\" . If not specified, selects with normal priorities.",
                  "type": "string",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "force": {
          "name": "force",
          "shortDesc": "The force this logistic network belongs to.",
          "desc": "The force this logistic network belongs to.",
          "type": "LuaForce",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "available_logistic_robots": {
          "name": "available_logistic_robots",
          "shortDesc": "Number of logistic robots available for a job.",
          "desc": "Number of logistic robots available for a job.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "all_logistic_robots": {
          "name": "all_logistic_robots",
          "shortDesc": "The total number of logistic robots in the network (idle and active + in roboports).",
          "desc": "The total number of logistic robots in the network (idle and active + in roboports).",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "available_construction_robots": {
          "name": "available_construction_robots",
          "shortDesc": "Number of construction robots available for a job.",
          "desc": "Number of construction robots available for a job.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "all_construction_robots": {
          "name": "all_construction_robots",
          "shortDesc": "The total number of construction robots in the network (idle and active + in roboports).",
          "desc": "The total number of construction robots in the network (idle and active + in roboports).",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "robot_limit": {
          "name": "robot_limit",
          "shortDesc": "Maximum number of robots the network can work with.",
          "desc": "Maximum number of robots the network can work with. Currently only used for the personal\n roboport.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "cells": {
          "name": "cells",
          "shortDesc": "All cells in this network.",
          "desc": "All cells in this network.",
          "type": {
            "value": [
              "LuaLogisticCell"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "providers": {
          "name": "providers",
          "shortDesc": "All entities that have logistic provider points in this network.",
          "desc": "All entities that have logistic provider points in this network.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "empty_providers": {
          "name": "empty_providers",
          "shortDesc": "All entities that have empty logistic provider points in this network.",
          "desc": "All entities that have empty logistic provider points in this network.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "requesters": {
          "name": "requesters",
          "shortDesc": "All entities that have logistic requester points in this network.",
          "desc": "All entities that have logistic requester points in this network.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "storages": {
          "name": "storages",
          "shortDesc": "All entities that have logistic storage points in this network.",
          "desc": "All entities that have logistic storage points in this network.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "logistic_members": {
          "name": "logistic_members",
          "shortDesc": "All other entities that have logistic points in this network (inserters mostly).",
          "desc": "All other entities that have logistic points in this network (inserters mostly).",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "provider_points": {
          "name": "provider_points",
          "shortDesc": "All things that have provider points in this network.",
          "desc": "All things that have provider points in this network.",
          "type": {
            "value": [
              "LuaLogisticPoint"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "passive_provider_points": {
          "name": "passive_provider_points",
          "shortDesc": "All passive provider points in this network.",
          "desc": "All passive provider points in this network.",
          "type": {
            "value": [
              "LuaLogisticPoint"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "active_provider_points": {
          "name": "active_provider_points",
          "shortDesc": "All active provider points in this network.",
          "desc": "All active provider points in this network.",
          "type": {
            "value": [
              "LuaLogisticPoint"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "empty_provider_points": {
          "name": "empty_provider_points",
          "shortDesc": "All things that have empty provider points in this network.",
          "desc": "All things that have empty provider points in this network.",
          "type": {
            "value": [
              "LuaLogisticPoint"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "requester_points": {
          "name": "requester_points",
          "shortDesc": "All things that have requester points in this network.",
          "desc": "All things that have requester points in this network.",
          "type": {
            "value": [
              "LuaLogisticPoint"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "storage_points": {
          "name": "storage_points",
          "shortDesc": "All things that have storage points in this network.",
          "desc": "All things that have storage points in this network.",
          "type": {
            "value": [
              "LuaLogisticPoint"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "robots": {
          "name": "robots",
          "shortDesc": "All robots in this logistic network.",
          "desc": "All robots in this logistic network.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "construction_robots": {
          "name": "construction_robots",
          "shortDesc": "All construction robots in this logistic network.",
          "desc": "All construction robots in this logistic network.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "logistic_robots": {
          "name": "logistic_robots",
          "shortDesc": "All logistic robots in this logistic network.",
          "desc": "All logistic robots in this logistic network.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaLogisticPoint": {
      "name": "LuaLogisticPoint",
      "desc": "Logistic point of a particular [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) . A \"Logistic point\" is the name given for\n settings and properties used by requester, provider, and storage points in a given logistic network.\n These \"points\" don't have to be a logistic container but often are. One other entity that can own several\n points is the \"character\" character type entity.",
      "url": "LuaLogisticPoint.html",
      "attributes": {
        "owner": {
          "name": "owner",
          "shortDesc": "The [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) owner of this [LuaLogisticPoint](https://lua-api.factorio.com/latest/LuaLogisticPoint.html) .",
          "desc": "The [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) owner of this [LuaLogisticPoint](https://lua-api.factorio.com/latest/LuaLogisticPoint.html) .",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "logistic_network": {
          "name": "logistic_network",
          "shortDesc": "",
          "type": "LuaLogisticNetwork",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "logistic_member_index": {
          "name": "logistic_member_index",
          "shortDesc": "The Logistic member index of this logistic point.",
          "desc": "The Logistic member index of this logistic point.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "filters": {
          "name": "filters",
          "shortDesc": "The logistic filters for this logistic point or `nil` if this doesn't use logistic filters.",
          "desc": "The logistic filters for this logistic point or `nil` if this doesn't use logistic filters. **Note:** The returned array will always have an entry for each filter and will be indexed in sequence when not nil.",
          "type": {
            "value": [
              "LogisticFilter"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mode": {
          "name": "mode",
          "shortDesc": "The logistic mode.",
          "desc": "The logistic mode.",
          "type": "defines.logistic_mode",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "force": {
          "name": "force",
          "shortDesc": "The force of this logistic point.",
          "desc": "The force of this logistic point. **Note:** This will always be the same as the [LuaLogisticPoint::owner](https://lua-api.factorio.com/latest/LuaLogisticPoint.html#LuaLogisticPoint.owner) force.",
          "type": "LuaForce",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "targeted_items_pickup": {
          "name": "targeted_items_pickup",
          "shortDesc": "Items targeted to be picked up from this logistic point by robots.",
          "desc": "Items targeted to be picked up from this logistic point by robots.",
          "type": {
            "value": [
              "string",
              "uint"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "targeted_items_deliver": {
          "name": "targeted_items_deliver",
          "shortDesc": "Items targeted to be dropped off into this logistic point by robots.",
          "desc": "Items targeted to be dropped off into this logistic point by robots.",
          "type": {
            "value": [
              "string",
              "uint"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "exact": {
          "name": "exact",
          "shortDesc": "If this logistic point is using the exact mode.",
          "desc": "If this logistic point is using the exact mode. In exact mode robots never over-deliver requests.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaMiningDrillControlBehavior": {
      "name": "LuaMiningDrillControlBehavior",
      "desc": "Control behavior for mining drills.\n\n\n\n\n\n",
      "url": "LuaControlBehavior.html#LuaMiningDrillControlBehavior.brief",
      "attributes": {
        "circuit_enable_disable": {
          "name": "circuit_enable_disable",
          "shortDesc": "`true` if this drill is enabled or disabled using the logistics or circuit condition.",
          "desc": "`true` if this drill is enabled or disabled using the logistics or circuit condition.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "circuit_read_resources": {
          "name": "circuit_read_resources",
          "shortDesc": "`true` if this drill should send the resources in the field to the circuit network.",
          "desc": "`true` if this drill should send the resources in the field to the circuit network.\n Which resources depends on [LuaMiningDrillControlBehavior::resource_read_mode](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaMiningDrillControlBehavior.resource_read_mode)",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "resource_read_mode": {
          "name": "resource_read_mode",
          "shortDesc": "If the mining drill should send just the resources in its area or the entire field it's on to the circuit network.",
          "desc": "If the mining drill should send just the resources in its area or the entire field it's on to the circuit network.",
          "type": "defines.control_behavior.mining_drill.resource_read_mode",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "resource_read_targets": {
          "name": "resource_read_targets",
          "shortDesc": "The resource entities that the mining drill will send information about to the circuit network or an empty array.",
          "desc": "The resource entities that the mining drill will send information about to the circuit network or an empty array.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaGenericOnOffControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaModSettingPrototype": {
      "name": "LuaModSettingPrototype",
      "desc": "Prototype of a mod setting.",
      "url": "LuaModSettingPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mod": {
          "name": "mod",
          "shortDesc": "The mod that owns this setting.",
          "desc": "The mod that owns this setting.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "setting_type": {
          "name": "setting_type",
          "shortDesc": "",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "default_value": {
          "name": "default_value",
          "shortDesc": "The default value of this setting.",
          "desc": "The default value of this setting.",
          "type": {
            "value": [
              "boolean",
              "double",
              "int",
              "string"
            ],
            "type": "Union"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "minimum_value": {
          "name": "minimum_value",
          "shortDesc": "The minimum value for this setting or `nil` if  this setting type doesn't support a minimum.",
          "desc": "The minimum value for this setting or `nil` if  this setting type doesn't support a minimum.",
          "type": {
            "value": [
              "double",
              "int"
            ],
            "type": "Union"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "maximum_value": {
          "name": "maximum_value",
          "shortDesc": "The maximum value for this setting or `nil` if  this setting type doesn't support a maximum.",
          "desc": "The maximum value for this setting or `nil` if  this setting type doesn't support a maximum.",
          "type": {
            "value": [
              "double",
              "int"
            ],
            "type": "Union"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allowed_values": {
          "name": "allowed_values",
          "shortDesc": "The allowed values for this setting or `nil` if this setting doesn't use the a fixed set of values.",
          "desc": "The allowed values for this setting or `nil` if this setting doesn't use the a fixed set of values.",
          "type": {
            "value": [
              {
                "value": [
                  "string"
                ],
                "type": "Array"
              },
              {
                "value": [
                  "int"
                ],
                "type": "Array"
              },
              {
                "value": [
                  "double"
                ],
                "type": "Array"
              }
            ],
            "type": "Union"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allow_blank": {
          "name": "allow_blank",
          "shortDesc": "If this string setting allows blank values or `nil` if not a string setting.",
          "desc": "If this string setting allows blank values or `nil` if not a string setting.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "auto_trim": {
          "name": "auto_trim",
          "shortDesc": "If this string setting auto-trims values or `nil` if not a string setting.",
          "desc": "If this string setting auto-trims values or `nil` if not a string setting.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "hidden": {
          "name": "hidden",
          "shortDesc": "If this setting is hidden from the GUI.",
          "desc": "If this setting is hidden from the GUI.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaModuleCategoryPrototype": {
      "name": "LuaModuleCategoryPrototype",
      "desc": "Prototype of a module category.",
      "url": "LuaModuleCategoryPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaNamedNoiseExpression": {
      "name": "LuaNamedNoiseExpression",
      "desc": "Prototype of a named noise expression.",
      "url": "LuaNamedNoiseExpression.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "intended_property": {
          "name": "intended_property",
          "shortDesc": "Name of the property that this expression is intended to provide a value for, if any.",
          "desc": "Name of the property that this expression is intended to provide a value for, if any.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "expression": {
          "name": "expression",
          "shortDesc": "The expression itself.",
          "desc": "The expression itself.",
          "type": "NoiseExpression",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaNoiseLayerPrototype": {
      "name": "LuaNoiseLayerPrototype",
      "desc": "Prototype of a noise layer.",
      "url": "LuaNoiseLayerPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaParticlePrototype": {
      "name": "LuaParticlePrototype",
      "desc": "Prototype of an optimized particle.",
      "url": "LuaParticlePrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "regular_trigger_effect": {
          "name": "regular_trigger_effect",
          "shortDesc": "",
          "type": "TriggerEffectItem",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ended_in_water_trigger_effect": {
          "name": "ended_in_water_trigger_effect",
          "shortDesc": "",
          "type": "TriggerEffectItem",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_layer": {
          "name": "render_layer",
          "shortDesc": "",
          "type": "RenderLayer",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_layer_when_on_ground": {
          "name": "render_layer_when_on_ground",
          "shortDesc": "",
          "type": "RenderLayer",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "life_time": {
          "name": "life_time",
          "shortDesc": "",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "regular_trigger_effect_frequency": {
          "name": "regular_trigger_effect_frequency",
          "shortDesc": "",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "movement_modifier_when_on_ground": {
          "name": "movement_modifier_when_on_ground",
          "shortDesc": "",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "movement_modifier": {
          "name": "movement_modifier",
          "shortDesc": "",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mining_particle_frame_speed": {
          "name": "mining_particle_frame_speed",
          "shortDesc": "",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaPermissionGroup": {
      "name": "LuaPermissionGroup",
      "desc": "A permission group that defines what players in this group are allowed to do.",
      "url": "LuaPermissionGroup.html",
      "attributes": {
        "add_player": {
          "name": "add_player",
          "shortDesc": "Adds the given player to this group.",
          "desc": "Adds the given player to this group.",
          "parameters": {
            "player": {
              "name": "player",
              "type": "PlayerSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the player was added.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "remove_player": {
          "name": "remove_player",
          "shortDesc": "Removes the given player from this group.",
          "desc": "Removes the given player from this group.",
          "parameters": {
            "player": {
              "name": "player",
              "type": "PlayerSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the player was removed.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "allows_action": {
          "name": "allows_action",
          "shortDesc": "If this group allows the given action.",
          "desc": "If this group allows the given action.",
          "parameters": {
            "action": {
              "name": "action",
              "desc": "The defines.input_action value.",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_allows_action": {
          "name": "set_allows_action",
          "shortDesc": "Sets if the player is allowed to perform the given action.",
          "desc": "Sets if the player is allowed to perform the given action.",
          "parameters": {
            "action": {
              "name": "action",
              "desc": "The defines.input_action value.",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the value was applied.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "destroy": {
          "name": "destroy",
          "shortDesc": "Destroys this group.",
          "desc": "Destroys this group.",
          "returnObject": {
            "desc": "If the group was destroyed.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "name": {
          "name": "name",
          "shortDesc": "The name of this group.",
          "desc": "The name of this group. **Note:** Setting to `nil` or an empty string sets the name to the default value.",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "players": {
          "name": "players",
          "shortDesc": "The players in this group.",
          "desc": "The players in this group.",
          "type": {
            "value": [
              "LuaPlayer"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "group_id": {
          "name": "group_id",
          "shortDesc": "The group ID",
          "desc": "The group ID",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaPermissionGroups": {
      "name": "LuaPermissionGroups",
      "desc": "All permission groups.",
      "url": "LuaPermissionGroups.html",
      "attributes": {
        "create_group": {
          "name": "create_group",
          "shortDesc": "Creates a new permission group.",
          "desc": "Creates a new permission group.",
          "parameters": {
            "name": {
              "name": "name",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaPermissionGroup",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_group": {
          "name": "get_group",
          "shortDesc": "Gets the permission group with the given name or group ID or `nil` if there is no matching group.",
          "desc": "Gets the permission group with the given name or group ID or `nil` if there is no matching group.",
          "parameters": {
            "group": {
              "name": "group",
              "type": {
                "value": [
                  "string",
                  "uint"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaPermissionGroup",
            "optional": false
          },
          "attribute_type": "function"
        },
        "groups": {
          "name": "groups",
          "shortDesc": "All of the permission groups.",
          "desc": "All of the permission groups.",
          "type": {
            "value": [
              "LuaPermissionGroup"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaPlayer": {
      "name": "LuaPlayer",
      "desc": "A player in the game. Pay attention that a player may or may not have a character, which is the [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) of the little guy running around the world doing things.",
      "url": "LuaPlayer.html",
      "attributes": {
        "set_ending_screen_data": {
          "name": "set_ending_screen_data",
          "shortDesc": "Setup the screen to be shown when the game is finished.",
          "desc": "Setup the screen to be shown when the game is finished.",
          "parameters": {
            "message": {
              "name": "message",
              "desc": "Message to be shown.",
              "type": "LocalisedString",
              "optional": false
            },
            "file": {
              "name": "file",
              "desc": "Path to image to be shown.",
              "type": "string",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "print": {
          "name": "print",
          "shortDesc": "Print text to the chat console.",
          "desc": "Print text to the chat console.",
          "parameters": {
            "message": {
              "name": "message",
              "type": "LocalisedString",
              "optional": false
            },
            "color": {
              "name": "color",
              "type": "Color",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "clear_console": {
          "name": "clear_console",
          "shortDesc": "Clear the chat console.",
          "desc": "Clear the chat console.",
          "attribute_type": "function"
        },
        "get_goal_description": {
          "name": "get_goal_description",
          "shortDesc": "Get the current goal description, as a localised string.",
          "desc": "Get the current goal description, as a localised string.",
          "returnObject": {
            "type": "LocalisedString",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_goal_description": {
          "name": "set_goal_description",
          "shortDesc": "Set the text in the goal window (top left).",
          "desc": "Set the text in the goal window (top left).",
          "parameters": {
            "text": {
              "name": "text",
              "desc": "The text to display. \\n can be used to delimit lines. Passing empty  string or omitting this parameter entirely will make the goal window disappear.",
              "type": "LocalisedString",
              "optional": false
            },
            "only_update": {
              "name": "only_update",
              "desc": "When true , won't play the \"goal updated\" sound.",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "set_controller": {
          "name": "set_controller",
          "shortDesc": "Set the controller type of the player.",
          "desc": "Set the controller type of the player.",
          "parameters": {
            "luaPlayerset_controller_param": {
              "name": "luaPlayerset_controller_param",
              "desc": "Table with the following fields",
              "type": "LuaPlayerset_controller_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaPlayerset_controller_param",
              "attributes": {
                "type": {
                  "name": "type",
                  "desc": "Which controller to use",
                  "type": "defines.controllers",
                  "optional": false
                },
                "character": {
                  "name": "character",
                  "desc": "Entity to control. Mandatory when type is defines.controllers.character , ignored otherwise.",
                  "type": "LuaEntity",
                  "optional": false
                },
                "waypoints": {
                  "name": "waypoints",
                  "desc": "List of waypoints for the cutscene controller. This parameter is mandatory when type is defines.controllers.cutscene . Each waypoint is a table",
                  "type": "any",
                  "optional": false
                },
                "start_position": {
                  "name": "start_position",
                  "desc": "If specified and type is defines.controllers.cutscene ,  the cutscene will start at this position. If not given the start position will be the player position.",
                  "type": "Position",
                  "optional": false
                },
                "start_zoom": {
                  "name": "start_zoom",
                  "desc": "If specified and type is defines.controllers.cutscene ,  the cutscene will start at this zoom level. If not given the start zoom will be the players zoom.",
                  "type": "double",
                  "optional": false
                },
                "final_transition_time": {
                  "name": "final_transition_time",
                  "desc": "If specified and type is defines.controllers.cutscene ,  it is the time in ticks it will take for the camera to pan from the final waypoint back to the starting  position. If not given the camera will not pan back to the start position/zoom.",
                  "type": "uint",
                  "optional": false
                },
                "chart_mode_cutoff": {
                  "name": "chart_mode_cutoff",
                  "desc": "If specified and type is defines.controllers.cutscene ,  the game will switch to chart-mode (map zoomed out) rendering when the zoom level is less than this value.",
                  "type": "double",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "drag_wire": {
          "name": "drag_wire",
          "shortDesc": "Start/end wire dragging at the specified location, wire type is based on the cursor contents",
          "desc": "Start/end wire dragging at the specified location, wire type is based on the cursor contents",
          "parameters": {
            "luaPlayerdrag_wire_param": {
              "name": "luaPlayerdrag_wire_param",
              "desc": "Table with the following fields",
              "type": "LuaPlayerdrag_wire_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "`true` if the action did something",
            "type": "boolean",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaPlayerdrag_wire_param",
              "attributes": {
                "position": {
                  "name": "position",
                  "desc": "Position at which cursor was clicked. Used only to decide which side  of arithmetic combinator, decider combinator or power switch is to be connected. Entity itself  to be connected is based on the player's selected entity.",
                  "type": "Position",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "disable_recipe_groups": {
          "name": "disable_recipe_groups",
          "shortDesc": "Disable recipe groups.",
          "desc": "Disable recipe groups.",
          "attribute_type": "function"
        },
        "enable_recipe_groups": {
          "name": "enable_recipe_groups",
          "shortDesc": "Enable recipe groups.",
          "desc": "Enable recipe groups.",
          "attribute_type": "function"
        },
        "disable_recipe_subgroups": {
          "name": "disable_recipe_subgroups",
          "shortDesc": "Disable recipe subgroups.",
          "desc": "Disable recipe subgroups.",
          "attribute_type": "function"
        },
        "enable_recipe_subgroups": {
          "name": "enable_recipe_subgroups",
          "shortDesc": "Enable recipe subgroups.",
          "desc": "Enable recipe subgroups.",
          "attribute_type": "function"
        },
        "print_entity_statistics": {
          "name": "print_entity_statistics",
          "shortDesc": "Print entity statistics to the player's console.",
          "desc": "Print entity statistics to the player's console.",
          "parameters": {
            "entities": {
              "name": "entities",
              "desc": "Entity prototypes to get statistics for. If not specified or empty,  display statistics for all entities.",
              "type": {
                "value": [
                  "string"
                ],
                "type": "Array"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "print_robot_jobs": {
          "name": "print_robot_jobs",
          "shortDesc": "Print construction robot job counts to the players console.",
          "desc": "Print construction robot job counts to the players console.",
          "attribute_type": "function"
        },
        "print_lua_object_statistics": {
          "name": "print_lua_object_statistics",
          "shortDesc": "Print LuaObject counts per mod.",
          "desc": "Print LuaObject counts per mod.",
          "attribute_type": "function"
        },
        "log_active_entity_chunk_counts": {
          "name": "log_active_entity_chunk_counts",
          "shortDesc": "Logs a dictionary of chunks -> active entities for the surface this player is on.",
          "desc": "Logs a dictionary of chunks -> active entities for the surface this player is on.",
          "attribute_type": "function"
        },
        "log_active_entity_counts": {
          "name": "log_active_entity_counts",
          "shortDesc": "Logs a dictionary of active entities -> count for the surface this player is on.",
          "desc": "Logs a dictionary of active entities -> count for the surface this player is on.",
          "attribute_type": "function"
        },
        "unlock_achievement": {
          "name": "unlock_achievement",
          "shortDesc": "Unlock the achievements of the given player.",
          "desc": "Unlock the achievements of the given player.\n This has any effect only when this is the local player, the achievement isn't unlocked so far and the achievement is of the type \"achievement\".",
          "parameters": {
            "name": {
              "name": "name",
              "desc": "name of the achievement to unlock",
              "type": "string",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "clear_cursor": {
          "name": "clear_cursor",
          "shortDesc": "Invokes the \"clear cursor\" action on the player as if the user pressed it.",
          "desc": "Invokes the \"clear cursor\" action on the player as if the user pressed it.",
          "returnObject": {
            "desc": "If the cursor is now empty.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "create_character": {
          "name": "create_character",
          "shortDesc": "Creates and attaches a character entity to this player.",
          "desc": "Creates and attaches a character entity to this player.",
          "parameters": {
            "character": {
              "name": "character",
              "desc": "The character to create else the default is used.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Whether the character was created.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "add_alert": {
          "name": "add_alert",
          "shortDesc": "Adds an alert to this player for the given entity of the given alert type.",
          "desc": "Adds an alert to this player for the given entity of the given alert type.",
          "parameters": {
            "entity": {
              "name": "entity",
              "type": "LuaEntity",
              "optional": false
            },
            "type": {
              "name": "type",
              "type": "defines.alert_type",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "add_custom_alert": {
          "name": "add_custom_alert",
          "shortDesc": "Adds a custom alert to this player.",
          "desc": "Adds a custom alert to this player.",
          "parameters": {
            "entity": {
              "name": "entity",
              "desc": "If the alert is clicked, the map will open at the position of this entity.",
              "type": "LuaEntity",
              "optional": false
            },
            "icon": {
              "name": "icon",
              "type": "SignalID",
              "optional": false
            },
            "message": {
              "name": "message",
              "type": "LocalisedString",
              "optional": false
            },
            "show_on_map": {
              "name": "show_on_map",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "remove_alert": {
          "name": "remove_alert",
          "shortDesc": "Removes all alerts matching the given filters or if an empty filters table is given all alerts are removed.",
          "desc": "Removes all alerts matching the given filters or if an empty filters table is given all alerts are removed.",
          "parameters": {
            "luaPlayerremove_alert_param": {
              "name": "luaPlayerremove_alert_param",
              "desc": "Table with the following fields",
              "type": "LuaPlayerremove_alert_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaPlayerremove_alert_param",
              "attributes": {
                "entity": {
                  "name": "entity",
                  "type": "LuaEntity",
                  "optional": false
                },
                "prototype": {
                  "name": "prototype",
                  "type": "LuaEntityPrototype",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "type": "Position",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "defines.alert_type",
                  "optional": false
                },
                "surface": {
                  "name": "surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "icon": {
                  "name": "icon",
                  "type": "SignalID",
                  "optional": false
                },
                "message": {
                  "name": "message",
                  "type": "LocalisedString",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "get_alerts": {
          "name": "get_alerts",
          "shortDesc": "Gets all alerts matching the given filters or if no filters are given all alerts are returned.",
          "desc": "Gets all alerts matching the given filters or if no filters are given all alerts are returned. A mapping of surface index to an array of arrays of alerts indexed by the alert type.\n An alert is a table:",
          "parameters": {
            "luaPlayerget_alerts_param": {
              "name": "luaPlayerget_alerts_param",
              "desc": "Table with the following fields",
              "type": "LuaPlayerget_alerts_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "uint",
                {
                  "value": [
                    "defines.alert_type",
                    {
                      "value": [
                        "alert"
                      ],
                      "type": "Array"
                    }
                  ],
                  "type": "Table"
                }
              ],
              "type": "Table"
            },
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaPlayerget_alerts_param",
              "attributes": {
                "entity": {
                  "name": "entity",
                  "type": "LuaEntity",
                  "optional": false
                },
                "prototype": {
                  "name": "prototype",
                  "type": "LuaEntityPrototype",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "type": "Position",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "defines.alert_type",
                  "optional": false
                },
                "surface": {
                  "name": "surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "mute_alert": {
          "name": "mute_alert",
          "shortDesc": "Mutes alerts for the given alert category.",
          "desc": "Mutes alerts for the given alert category.",
          "parameters": {
            "alert_type": {
              "name": "alert_type",
              "type": "defines.alert_type",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the alert type was muted (false if it was already muted).",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "unmute_alert": {
          "name": "unmute_alert",
          "shortDesc": "Unmutes alerts for the given alert category.",
          "desc": "Unmutes alerts for the given alert category.",
          "parameters": {
            "alert_type": {
              "name": "alert_type",
              "type": "defines.alert_type",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the alert type was unmuted (false if it was wasn't muted).",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_alert_muted": {
          "name": "is_alert_muted",
          "shortDesc": "If the given alert type is currently muted.",
          "desc": "If the given alert type is currently muted.",
          "parameters": {
            "alert_type": {
              "name": "alert_type",
              "type": "defines.alert_type",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "enable_alert": {
          "name": "enable_alert",
          "shortDesc": "Enables alerts for the given alert category.",
          "desc": "Enables alerts for the given alert category.",
          "parameters": {
            "alert_type": {
              "name": "alert_type",
              "type": "defines.alert_type",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the alert type was enabled (false if it was already enabled).",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "disable_alert": {
          "name": "disable_alert",
          "shortDesc": "Disables alerts for the given alert category.",
          "desc": "Disables alerts for the given alert category.",
          "parameters": {
            "alert_type": {
              "name": "alert_type",
              "type": "defines.alert_type",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the alert type was disabled (false if it was already disabled).",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_alert_enabled": {
          "name": "is_alert_enabled",
          "shortDesc": "If the given alert type is currently enabled.",
          "desc": "If the given alert type is currently enabled.",
          "parameters": {
            "alert_type": {
              "name": "alert_type",
              "type": "defines.alert_type",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "pipette_entity": {
          "name": "pipette_entity",
          "shortDesc": "Invokes the \"smart pipette\" action on the player as if the user pressed it.",
          "desc": "Invokes the \"smart pipette\" action on the player as if the user pressed it.",
          "parameters": {
            "entity": {
              "name": "entity",
              "type": {
                "value": [
                  "string",
                  "LuaEntity",
                  "LuaEntityPrototype"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the smart pipette found something to place",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "can_place_entity": {
          "name": "can_place_entity",
          "shortDesc": "Checks if this player can build the give entity at the given location on the surface the player is on.",
          "desc": "Checks if this player can build the give entity at the given location on the surface the player is on.",
          "parameters": {
            "luaPlayercan_place_entity_param": {
              "name": "luaPlayercan_place_entity_param",
              "desc": "Table with the following fields",
              "type": "LuaPlayercan_place_entity_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaPlayercan_place_entity_param",
              "attributes": {
                "name": {
                  "name": "name",
                  "desc": "Name of the entity to check",
                  "type": "string",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Where the entity would be placed",
                  "type": "Position",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "desc": "Direction the entity would be placed",
                  "type": "defines.direction",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "can_build_from_cursor": {
          "name": "can_build_from_cursor",
          "shortDesc": "Checks if this player can build what ever is in the cursor on the surface the player is on.",
          "desc": "Checks if this player can build what ever is in the cursor on the surface the player is on.",
          "parameters": {
            "luaPlayercan_build_from_cursor_param": {
              "name": "luaPlayercan_build_from_cursor_param",
              "desc": "Table with the following fields",
              "type": "LuaPlayercan_build_from_cursor_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaPlayercan_build_from_cursor_param",
              "attributes": {
                "position": {
                  "name": "position",
                  "desc": "Where the entity would be placed",
                  "type": "Position",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "desc": "Direction the entity would be placed",
                  "type": "defines.direction",
                  "optional": false
                },
                "alt": {
                  "name": "alt",
                  "desc": "If alt build should be used instead of normal build. Defaults to normal.",
                  "type": "boolean",
                  "optional": false
                },
                "terrain_building_size": {
                  "name": "terrain_building_size",
                  "desc": "The size for building terrain if building terrain. Defaults to 2.",
                  "type": "uint",
                  "optional": false
                },
                "skip_fog_of_war": {
                  "name": "skip_fog_of_war",
                  "desc": "If chunks covered by fog-of-war are skipped.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "build_from_cursor": {
          "name": "build_from_cursor",
          "shortDesc": "Builds what ever is in the cursor on the surface the player is on.",
          "desc": "Builds what ever is in the cursor on the surface the player is on.",
          "parameters": {
            "luaPlayerbuild_from_cursor_param": {
              "name": "luaPlayerbuild_from_cursor_param",
              "desc": "Table with the following fields",
              "type": "LuaPlayerbuild_from_cursor_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaPlayerbuild_from_cursor_param",
              "attributes": {
                "position": {
                  "name": "position",
                  "desc": "Where the entity would be placed",
                  "type": "Position",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "desc": "Direction the entity would be placed",
                  "type": "defines.direction",
                  "optional": false
                },
                "alt": {
                  "name": "alt",
                  "desc": "If alt build should be used instead of normal build. Defaults to normal.",
                  "type": "boolean",
                  "optional": false
                },
                "terrain_building_size": {
                  "name": "terrain_building_size",
                  "desc": "The size for building terrain if building terrain. Defaults to 2.",
                  "type": "uint",
                  "optional": false
                },
                "skip_fog_of_war": {
                  "name": "skip_fog_of_war",
                  "desc": "If chunks covered by fog-of-war are skipped.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "use_from_cursor": {
          "name": "use_from_cursor",
          "shortDesc": "Uses the current item in the cursor if it's a capsule or does nothing if not.",
          "desc": "Uses the current item in the cursor if it's a capsule or does nothing if not.",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "Where the item would be used.",
              "type": "Position",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "play_sound": {
          "name": "play_sound",
          "shortDesc": "Plays a sound for this player",
          "desc": "Plays a sound for this player",
          "parameters": {
            "luaPlayerplay_sound_param": {
              "name": "luaPlayerplay_sound_param",
              "desc": "Table with the following fields",
              "type": "LuaPlayerplay_sound_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaPlayerplay_sound_param",
              "attributes": {
                "path": {
                  "name": "path",
                  "desc": "The sound to play",
                  "type": "SoundPath",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Where the sound should be played. If not given it's played 'everywhere'.",
                  "type": "Position",
                  "optional": false
                },
                "volume_modifier": {
                  "name": "volume_modifier",
                  "desc": "Must be between 0 and 1 inclusive.",
                  "type": "double",
                  "optional": false
                },
                "override_sound_type": {
                  "name": "override_sound_type",
                  "desc": "Which volume mixer to play the sound through. Uses the default mixer for the sound type if not specified.",
                  "type": "SoundType",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "get_associated_characters": {
          "name": "get_associated_characters",
          "shortDesc": "The characters associated with this player.",
          "desc": "The characters associated with this player.",
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "associate_character": {
          "name": "associate_character",
          "shortDesc": "Associates a character with this player.",
          "desc": "Associates a character with this player.",
          "parameters": {
            "character": {
              "name": "character",
              "desc": "The character entity.",
              "type": "LuaEntity",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "disassociate_character": {
          "name": "disassociate_character",
          "shortDesc": "Disassociates a character from this player.",
          "desc": "Disassociates a character from this player.\n This is functionally the same as setting [LuaEntity::associated_player](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.associated_player) to `nil` .",
          "parameters": {
            "character": {
              "name": "character",
              "desc": "The character entity",
              "type": "LuaEntity",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "create_local_flying_text": {
          "name": "create_local_flying_text",
          "shortDesc": "Spawn a flying text that is only visible to this player.",
          "desc": "Spawn a flying text that is only visible to this player.",
          "parameters": {
            "luaPlayercreate_local_flying_text_param": {
              "name": "luaPlayercreate_local_flying_text_param",
              "desc": "Table with the following fields",
              "type": "LuaPlayercreate_local_flying_text_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaPlayercreate_local_flying_text_param",
              "attributes": {
                "text": {
                  "name": "text",
                  "type": "LocalisedString",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "type": "Position",
                  "optional": false
                },
                "create_at_cursor": {
                  "name": "create_at_cursor",
                  "type": "boolean",
                  "optional": false
                },
                "color": {
                  "name": "color",
                  "type": "Color",
                  "optional": false
                },
                "time_to_live": {
                  "name": "time_to_live",
                  "type": "uint",
                  "optional": false
                },
                "speed": {
                  "name": "speed",
                  "desc": "Movement per second",
                  "type": "double",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "get_quick_bar_slot": {
          "name": "get_quick_bar_slot",
          "shortDesc": "Gets the quick bar filter for the given slot or `nil` .",
          "desc": "Gets the quick bar filter for the given slot or `nil` .",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc.",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaItemPrototype",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_quick_bar_slot": {
          "name": "set_quick_bar_slot",
          "shortDesc": "Sets the quick bar filter for the given slot.",
          "desc": "Sets the quick bar filter for the given slot.",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc.",
              "type": "uint",
              "optional": false
            },
            "filter": {
              "name": "filter",
              "desc": "The filter or nil .",
              "type": {
                "value": [
                  "string",
                  "LuaItemPrototype",
                  "LuaItemStack"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_active_quick_bar_page": {
          "name": "get_active_quick_bar_page",
          "shortDesc": "Gets which quick bar page is being used for the given screen page or `nil` if not known.",
          "desc": "Gets which quick bar page is being used for the given screen page or `nil` if not known.",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change.",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "uint8",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_active_quick_bar_page": {
          "name": "set_active_quick_bar_page",
          "shortDesc": "Sets which quick bar page is being used for the given screen page.",
          "desc": "Sets which quick bar page is being used for the given screen page.",
          "parameters": {
            "screen_index": {
              "name": "screen_index",
              "desc": "The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change.",
              "type": "uint",
              "optional": false
            },
            "page_index": {
              "name": "page_index",
              "desc": "The new quick bar page.",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "jump_to_cutscene_waypoint": {
          "name": "jump_to_cutscene_waypoint",
          "shortDesc": "Jump to the specified cutscene waypoint.",
          "desc": "Jump to the specified cutscene waypoint. Only works when the player is viewing a cutscene.",
          "parameters": {
            "waypoint_index": {
              "name": "waypoint_index",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "exit_cutscene": {
          "name": "exit_cutscene",
          "shortDesc": "Exit the current cutscene.",
          "desc": "Exit the current cutscene. Errors if not in a cutscene.",
          "attribute_type": "function"
        },
        "open_map": {
          "name": "open_map",
          "shortDesc": "Queues a request to open the map at the specified position.",
          "desc": "Queues a request to open the map at the specified position. If the map is already opened, the request will simply set the position (and scale).\n Render mode change requests are processed before rendering of the next frame.",
          "parameters": {
            "position": {
              "name": "position",
              "type": "Position",
              "optional": false
            },
            "scale": {
              "name": "scale",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "zoom_to_world": {
          "name": "zoom_to_world",
          "shortDesc": "Queues a request to zoom to world at the specified position.",
          "desc": "Queues a request to zoom to world at the specified position. If the player is already zooming to world, the request will simply set the position (and scale).\n Render mode change requests are processed before rendering of the next frame.",
          "parameters": {
            "position": {
              "name": "position",
              "type": "Position",
              "optional": false
            },
            "scale": {
              "name": "scale",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "close_map": {
          "name": "close_map",
          "shortDesc": "Queues request to switch to the normal game view from the map or zoom to world view.",
          "desc": "Queues request to switch to the normal game view from the map or zoom to world view.\n Render mode change requests are processed before rendering of the next frame.",
          "attribute_type": "function"
        },
        "is_shortcut_toggled": {
          "name": "is_shortcut_toggled",
          "shortDesc": "Is a custom Lua shortcut currently toggled?",
          "desc": "Is a custom Lua shortcut currently toggled?",
          "parameters": {
            "prototype_name": {
              "name": "prototype_name",
              "desc": "Prototype name of the custom shortcut.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_shortcut_available": {
          "name": "is_shortcut_available",
          "shortDesc": "Is a custom Lua shortcut currently available?",
          "desc": "Is a custom Lua shortcut currently available?",
          "parameters": {
            "prototype_name": {
              "name": "prototype_name",
              "desc": "Prototype name of the custom shortcut.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_shortcut_toggled": {
          "name": "set_shortcut_toggled",
          "shortDesc": "Toggle or untoggle a custom Lua shortcut",
          "desc": "Toggle or untoggle a custom Lua shortcut",
          "parameters": {
            "prototype_name": {
              "name": "prototype_name",
              "desc": "Prototype name of the custom shortcut.",
              "type": "string",
              "optional": false
            },
            "toggled": {
              "name": "toggled",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "set_shortcut_available": {
          "name": "set_shortcut_available",
          "shortDesc": "Make a custom Lua shortcut available or unavailable.",
          "desc": "Make a custom Lua shortcut available or unavailable.",
          "parameters": {
            "prototype_name": {
              "name": "prototype_name",
              "desc": "Prototype name of the custom shortcut.",
              "type": "string",
              "optional": false
            },
            "available": {
              "name": "available",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "connect_to_server": {
          "name": "connect_to_server",
          "shortDesc": "Asks the player if they would like to connect to the given server.",
          "desc": "Asks the player if they would like to connect to the given server.",
          "parameters": {
            "luaPlayerconnect_to_server_param": {
              "name": "luaPlayerconnect_to_server_param",
              "desc": "Table with the following fields",
              "type": "LuaPlayerconnect_to_server_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaPlayerconnect_to_server_param",
              "attributes": {
                "address": {
                  "name": "address",
                  "desc": "The server (address:port) if port is not given the default Factorio port is used.",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "desc": "The name of the server.",
                  "type": "LocalisedString",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "LocalisedString",
                  "optional": false
                },
                "password": {
                  "name": "password",
                  "desc": "The password if different from the one used to join this game.  Note, if the current password is not empty but the one required to join the new server is  an empty string should be given for this field.",
                  "type": "string",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "toggle_map_editor": {
          "name": "toggle_map_editor",
          "shortDesc": "Toggles this player into or out of the map editor.",
          "desc": "Toggles this player into or out of the map editor.\n Does nothing if this player isn't an admin or if the player doesn't have permission to use the map editor.",
          "attribute_type": "function"
        },
        "request_translation": {
          "name": "request_translation",
          "shortDesc": "Requests a translation for the given localised string.",
          "desc": "Requests a translation for the given localised string.\n If the request is successful the [on_string_translated](https://lua-api.factorio.com/latest/events.html#on_string_translated) event will be fired at a later time with the results.",
          "parameters": {
            "localised_string": {
              "name": "localised_string",
              "type": "LocalisedString",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the request was sent or not.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_infinity_inventory_filter": {
          "name": "get_infinity_inventory_filter",
          "shortDesc": "Gets the filter for this map editor infinity filters at the given index or `nil` if the filter index doesn't exist or is empty.",
          "desc": "Gets the filter for this map editor infinity filters at the given index or `nil` if the filter index doesn't exist or is empty.",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The index to get.",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "type": "InfinityInventoryFilter",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_infinity_inventory_filter": {
          "name": "set_infinity_inventory_filter",
          "shortDesc": "Sets the filter for this map editor infinity filters at the given index.",
          "desc": "Sets the filter for this map editor infinity filters at the given index. _Can only be used if this is InfinityContainer_",
          "parameters": {
            "index": {
              "name": "index",
              "desc": "The index to set.",
              "type": "uint",
              "optional": false
            },
            "filter": {
              "name": "filter",
              "desc": "The new filter or nil to clear the filter.",
              "type": "InfinityInventoryFilter",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "clear_recipe_notifications": {
          "name": "clear_recipe_notifications",
          "shortDesc": "Clears all the recipe notifications for this player",
          "desc": "Clears all the recipe notifications for this player",
          "attribute_type": "function"
        },
        "add_recipe_notification": {
          "name": "add_recipe_notification",
          "shortDesc": "Adds the given recipe to the list of recipe notifications for this player.",
          "desc": "Adds the given recipe to the list of recipe notifications for this player.",
          "parameters": {
            "string": {
              "name": "string",
              "desc": "Name of the prototype to add",
              "type": "any",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "add_to_clipboard": {
          "name": "add_to_clipboard",
          "shortDesc": "Adds the given blueprint to the player's clipboard queue.",
          "desc": "Adds the given blueprint to the player's clipboard queue.",
          "parameters": {
            "LuaItemStack": {
              "name": "LuaItemStack",
              "desc": "Blueprint to add",
              "type": "any",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "activate_paste": {
          "name": "activate_paste",
          "shortDesc": "Gets a copy of the currently selected blueprint in the clipboard queue into the player's cursor, as if the player activated Paste.",
          "desc": "Gets a copy of the currently selected blueprint in the clipboard queue into the player's cursor, as if the player activated Paste.",
          "attribute_type": "function"
        },
        "character": {
          "name": "character",
          "shortDesc": "The character attached to this player, or `nil` if no character.",
          "desc": "The character attached to this player, or `nil` if no character. **Note:** Will also return `nil` when the player is disconnected (see [LuaPlayer::connected](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected) ).",
          "type": "LuaEntity",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "cutscene_character": {
          "name": "cutscene_character",
          "shortDesc": "When in a cutscene; the character this player would be using once the cutscene is over.",
          "desc": "When in a cutscene; the character this player would be using once the cutscene is over. **Note:** Will also return `nil` when the player is disconnected (see [LuaPlayer::connected](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected) ).",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "index": {
          "name": "index",
          "shortDesc": "This player's index in [LuaGameScript::players](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players) .",
          "desc": "This player's index in [LuaGameScript::players](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players) .",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "gui": {
          "name": "gui",
          "shortDesc": "",
          "type": "LuaGui",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "opened_self": {
          "name": "opened_self",
          "shortDesc": "`true` if the player opened itself.",
          "desc": "`true` if the player opened itself. I.e. if they opened the character or god-controller GUI.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "controller_type": {
          "name": "controller_type",
          "shortDesc": "",
          "type": "defines.controllers",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "stashed_controller_type": {
          "name": "stashed_controller_type",
          "shortDesc": "The stashed controller type or `nil` if no controller is stashed.",
          "desc": "The stashed controller type or `nil` if no controller is stashed. **Note:** This is mainly useful when a player is in the map editor.",
          "type": "defines.controllers",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "game_view_settings": {
          "name": "game_view_settings",
          "shortDesc": "The player's game view settings.",
          "desc": "The player's game view settings.",
          "type": "GameViewSettings",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "minimap_enabled": {
          "name": "minimap_enabled",
          "shortDesc": "`true` if the minimap is visible.",
          "desc": "`true` if the minimap is visible.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "color": {
          "name": "color",
          "shortDesc": "The color associated with the player.",
          "desc": "The color associated with the player. This will be used to tint the player's character as well as their\n buildings and vehicles.",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "chat_color": {
          "name": "chat_color",
          "shortDesc": "The color used when this player talks in game.",
          "desc": "The color used when this player talks in game.",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "name": {
          "name": "name",
          "shortDesc": "The player's username.",
          "desc": "The player's username.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "tag": {
          "name": "tag",
          "shortDesc": "The tag that is shown after the player in chat and on the map.",
          "desc": "The tag that is shown after the player in chat and on the map.",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "connected": {
          "name": "connected",
          "shortDesc": "`true` if the player is currently connected to the game.",
          "desc": "`true` if the player is currently connected to the game.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "admin": {
          "name": "admin",
          "shortDesc": "`true` if the player is an admin.",
          "desc": "`true` if the player is an admin. **Note:** Trying to change player admin status from the console when you aren't an admin does nothing.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "entity_copy_source": {
          "name": "entity_copy_source",
          "shortDesc": "The source entity used during entity settings copy-paste if any.",
          "desc": "The source entity used during entity settings copy-paste if any. `nil` if there isn't currently a source entity.",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "afk_time": {
          "name": "afk_time",
          "shortDesc": "How many ticks since the last action of this player",
          "desc": "How many ticks since the last action of this player",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "online_time": {
          "name": "online_time",
          "shortDesc": "How many ticks did this player spend playing this save (all sessions combined)",
          "desc": "How many ticks did this player spend playing this save (all sessions combined)",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "last_online": {
          "name": "last_online",
          "shortDesc": "At what tick this player was last online.",
          "desc": "At what tick this player was last online.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "permission_group": {
          "name": "permission_group",
          "shortDesc": "The permission group this player is part of or `nil` if not part of any group.",
          "desc": "The permission group this player is part of or `nil` if not part of any group.",
          "type": "LuaPermissionGroup",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "mod_settings": {
          "name": "mod_settings",
          "shortDesc": "",
          "desc": "**Note:** This can become invalid if during operation this player becomes invalid.",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "ModSetting"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ticks_to_respawn": {
          "name": "ticks_to_respawn",
          "shortDesc": "The number of ticks until this player will respawn or `nil` if not waiting to respawn.",
          "desc": "The number of ticks until this player will respawn or `nil` if not waiting to respawn. **Note:** Set to `nil` to immediately respawn the player. **Note:** Set to any positive value to trigger the respawn state for this player.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "display_resolution": {
          "name": "display_resolution",
          "shortDesc": "The display resolution for this player.",
          "desc": "The display resolution for this player.",
          "type": "DisplayResolution",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "display_scale": {
          "name": "display_scale",
          "shortDesc": "The display scale for this player.",
          "desc": "The display scale for this player.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "blueprint_to_setup": {
          "name": "blueprint_to_setup",
          "shortDesc": "The item stack containing a blueprint to be setup.",
          "desc": "The item stack containing a blueprint to be setup.",
          "type": "LuaItemStack",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_mode": {
          "name": "render_mode",
          "shortDesc": "The render mode of the player, like map or zoom to world.",
          "desc": "The render mode of the player, like map or zoom to world.\n The render mode can be set using [LuaPlayer::open_map](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.open_map) , [LuaPlayer::zoom_to_world](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.zoom_to_world) and [LuaPlayer::close_map](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.close_map) .",
          "type": "defines.render_mode",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "spectator": {
          "name": "spectator",
          "shortDesc": "If `true` , zoom-to-world noise effect will be disabled and environmental sounds will be based\n on zoom-to-world view instead of position of player's character.",
          "desc": "If `true` , zoom-to-world noise effect will be disabled and environmental sounds will be based\n on zoom-to-world view instead of position of player's character.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "remove_unfiltered_items": {
          "name": "remove_unfiltered_items",
          "shortDesc": "If items not included in this map editor infinity inventory filters should be removed.",
          "desc": "If items not included in this map editor infinity inventory filters should be removed.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "infinity_inventory_filters": {
          "name": "infinity_inventory_filters",
          "shortDesc": "The filters for this map editor infinity inventory settings.",
          "desc": "The filters for this map editor infinity inventory settings.",
          "type": {
            "value": [
              "InfinityInventoryFilter"
            ],
            "type": "Array"
          },
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "auto_sort_main_inventory": {
          "name": "auto_sort_main_inventory",
          "shortDesc": "If the main inventory will be auto sorted.",
          "desc": "If the main inventory will be auto sorted.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "hand_location": {
          "name": "hand_location",
          "shortDesc": "The original location of the item in the cursor, marked with a hand.",
          "desc": "The original location of the item in the cursor, marked with a hand.\n When writing, the specified inventory slot must be empty and the cursor stack must not be empty.",
          "type": "ItemStackLocation",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "zoom": {
          "name": "zoom",
          "shortDesc": "The player's zoom-level.",
          "desc": "The player's zoom-level.",
          "type": "double",
          "mode": "[W]",
          "attribute_type": "field"
        },
        "map_view_settings": {
          "name": "map_view_settings",
          "shortDesc": "The player's map view settings.",
          "desc": "The player's map view settings. To write to this, use a table containing the fields that should be changed.",
          "type": "MapViewSettings",
          "mode": "[W]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControl",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaProfiler": {
      "name": "LuaProfiler",
      "desc": "An object used to measure script performance.\n**Note:** Since performance is non-deterministic these objects don't allow reading the raw time values from lua. They can be used anywhere a [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) is used.",
      "url": "LuaProfiler.html",
      "attributes": {
        "reset": {
          "name": "reset",
          "shortDesc": "Resets the clock, also restarting it.",
          "desc": "Resets the clock, also restarting it.",
          "attribute_type": "function"
        },
        "stop": {
          "name": "stop",
          "shortDesc": "Stops the clock.",
          "desc": "Stops the clock.",
          "attribute_type": "function"
        },
        "restart": {
          "name": "restart",
          "shortDesc": "Start the clock again, without resetting it.",
          "desc": "Start the clock again, without resetting it.",
          "attribute_type": "function"
        },
        "add": {
          "name": "add",
          "shortDesc": "Add the duration of another timer to this timer.",
          "desc": "Add the duration of another timer to this timer. Useful to reduce start/stop overhead when accumulating time onto many timers at once.",
          "parameters": {
            "other": {
              "name": "other",
              "desc": "The timer to add to this timer.",
              "type": "LuaProfiler",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "divide": {
          "name": "divide",
          "shortDesc": "Divides the current duration by a set value.",
          "desc": "Divides the current duration by a set value. Useful for calculating the average of many iterations.",
          "parameters": {
            "number": {
              "name": "number",
              "desc": "The number to divide by. Must be > 0.",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaProgrammableSpeakerControlBehavior": {
      "name": "LuaProgrammableSpeakerControlBehavior",
      "desc": "Control behavior for programmable speakers.\n\n",
      "url": "LuaControlBehavior.html#LuaProgrammableSpeakerControlBehavior.brief",
      "attributes": {
        "circuit_parameters": {
          "name": "circuit_parameters",
          "shortDesc": "",
          "type": "ProgrammableSpeakerCircuitParameters",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "circuit_condition": {
          "name": "circuit_condition",
          "shortDesc": "",
          "type": "CircuitConditionSpecification",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaRCON": {
      "name": "LuaRCON",
      "desc": "An interface to send messages to the calling RCON interface.",
      "url": "LuaRCON.html",
      "attributes": {
        "print": {
          "name": "print",
          "shortDesc": "Print text to the calling RCON interface if any.",
          "desc": "Print text to the calling RCON interface if any.",
          "parameters": {
            "message": {
              "name": "message",
              "type": "LocalisedString",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "object_name": {
          "name": "object_name",
          "shortDesc": "This object's name.",
          "desc": "This object's name.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObject"
      ]
    },
    "LuaRailChainSignalControlBehavior": {
      "name": "LuaRailChainSignalControlBehavior",
      "desc": "Control behavior for rail chain signals.\n\n\n\n\n\n",
      "url": "LuaControlBehavior.html#LuaRailChainSignalControlBehavior.brief",
      "attributes": {
        "red_signal": {
          "name": "red_signal",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "orange_signal": {
          "name": "orange_signal",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "green_signal": {
          "name": "green_signal",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "blue_signal": {
          "name": "blue_signal",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaRailPath": {
      "name": "LuaRailPath",
      "desc": "A rail path.",
      "url": "LuaRailPath.html",
      "attributes": {
        "size": {
          "name": "size",
          "shortDesc": "The total number of rails in this path.",
          "desc": "The total number of rails in this path.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "current": {
          "name": "current",
          "shortDesc": "The current rail index.",
          "desc": "The current rail index.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "total_distance": {
          "name": "total_distance",
          "shortDesc": "The total path distance.",
          "desc": "The total path distance.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "travelled_distance": {
          "name": "travelled_distance",
          "shortDesc": "The total distance travelled.",
          "desc": "The total distance travelled.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "rails": {
          "name": "rails",
          "shortDesc": "The rails this path travels.",
          "desc": "The rails this path travels.",
          "type": {
            "value": [
              "CustomDictionary",
              "uint",
              "LuaEntity"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaRailSignalControlBehavior": {
      "name": "LuaRailSignalControlBehavior",
      "desc": "Control behavior for rail signals.\n\n\n\n\n\n\n\n\n\n",
      "url": "LuaControlBehavior.html#LuaRailSignalControlBehavior.brief",
      "attributes": {
        "red_signal": {
          "name": "red_signal",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "orange_signal": {
          "name": "orange_signal",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "green_signal": {
          "name": "green_signal",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "close_signal": {
          "name": "close_signal",
          "shortDesc": "If this will close the rail signal based off the circuit condition.",
          "desc": "If this will close the rail signal based off the circuit condition.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "read_signal": {
          "name": "read_signal",
          "shortDesc": "If this will read the rail signal state.",
          "desc": "If this will read the rail signal state.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "circuit_condition": {
          "name": "circuit_condition",
          "shortDesc": "The circuit condition when controlling the signal through the circuit network.",
          "desc": "The circuit condition when controlling the signal through the circuit network.",
          "type": "CircuitConditionSpecification",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaRandomGenerator": {
      "name": "LuaRandomGenerator",
      "desc": "A deterministic random generator independent from the core games random generator that can be seeded and re-seeded at will.\n This random generator can be saved and loaded and will maintain its state.\n Note this is entirely different from calling [math.random](https://lua-api.factorio.com/latest/Libraries.html#math.random) () and you should be sure you actually want to use this over calling `math.random()` .\n If you aren't sure if you need to use this over calling `math.random()` then you probably don't need to use this.\n\nExample Create a generator and use it to print a random number. `global.generator\u00a0=\u00a0game.create_random_generator() game.player.print(global.generator())`",
      "url": "LuaRandomGenerator.html",
      "attributes": {
        "operator ": {
          "name": "operator ",
          "desc": "Generates a random number.\n If no parameters are given a number in the [0, 1) range is returned.\n If a single parameter is given a floored number in the [1, N] range is returned.\n If 2 parameters are given a floored number in the [N1, N2] range is returned.",
          "parameters": {
            "lower": {
              "name": "lower",
              "desc": "Inclusive lower bound on the result",
              "type": "int",
              "optional": false
            },
            "upper": {
              "name": "upper",
              "desc": "Inclusive upper bound on the result",
              "type": "int",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "re_seed": {
          "name": "re_seed",
          "shortDesc": "Re-seeds the random generator with the given value.",
          "desc": "Re-seeds the random generator with the given value.",
          "parameters": {
            "seed": {
              "name": "seed",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaRecipe": {
      "name": "LuaRecipe",
      "desc": "A crafting recipe. Recipes belong to forces (see [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) ) because some recipes\n are unlocked by research, and researches are per-force.",
      "url": "LuaRecipe.html",
      "attributes": {
        "reload": {
          "name": "reload",
          "shortDesc": "Reload the recipe from the prototype.",
          "desc": "Reload the recipe from the prototype.",
          "attribute_type": "function"
        },
        "name": {
          "name": "name",
          "shortDesc": "Name of the recipe.",
          "desc": "Name of the recipe. This can be different than the name of the result items as there could\n be more recipes to make the same item.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "Localised name of the recipe.",
          "desc": "Localised name of the recipe.",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "prototype": {
          "name": "prototype",
          "shortDesc": "The prototype for this recipe.",
          "desc": "The prototype for this recipe.",
          "type": "LuaRecipePrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "enabled": {
          "name": "enabled",
          "shortDesc": "Can the recipe be used?",
          "desc": "Can the recipe be used?",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "category": {
          "name": "category",
          "shortDesc": "Category of the recipe.",
          "desc": "Category of the recipe.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ingredients": {
          "name": "ingredients",
          "shortDesc": "Ingredients for this recipe.",
          "desc": "Ingredients for this recipe. Example What the \"steel-chest\" recipe would return `{\u00a0{type=\"item\",\u00a0name=\"steel-plate\",\u00a0amount=8}\u00a0}` Example What the \"advanced-oil-processing\" recipe would return `{\u00a0{type=\"fluid\",\u00a0name=\"crude-oil\",\u00a0amount=10},\u00a0{type=\"fluid\",\u00a0name=\"water\",\u00a0amount=5}\u00a0}`",
          "type": {
            "value": [
              "Ingredient"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "products": {
          "name": "products",
          "shortDesc": "The results of this recipe.",
          "desc": "The results of this recipe.",
          "type": {
            "value": [
              "Product"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "hidden": {
          "name": "hidden",
          "shortDesc": "Is the recipe hidden?",
          "desc": "Is the recipe hidden? Hidden recipe don't show up in the crafting menu.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "hidden_from_flow_stats": {
          "name": "hidden_from_flow_stats",
          "shortDesc": "Is the recipe hidden from flow statistics?",
          "desc": "Is the recipe hidden from flow statistics?",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "energy": {
          "name": "energy",
          "shortDesc": "Energy required to execute this recipe.",
          "desc": "Energy required to execute this recipe. This directly affects the crafting time: Recipe's energy\n is exactly its crafting time in seconds, when crafted in an assembling machine with crafting speed\n exactly equal to one.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string.",
          "desc": "Order string. This is used to sort the crafting menu.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "group": {
          "name": "group",
          "shortDesc": "Group of this recipe.",
          "desc": "Group of this recipe.",
          "type": "LuaGroup",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "subgroup": {
          "name": "subgroup",
          "shortDesc": "Subgroup of this recipe.",
          "desc": "Subgroup of this recipe.",
          "type": "LuaGroup",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "force": {
          "name": "force",
          "shortDesc": "The force that owns this recipe.",
          "desc": "The force that owns this recipe.",
          "type": "LuaForce",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaRecipeCategoryPrototype": {
      "name": "LuaRecipeCategoryPrototype",
      "desc": "Prototype of a recipe category.",
      "url": "LuaRecipeCategoryPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaRecipePrototype": {
      "name": "LuaRecipePrototype",
      "desc": "A crafting recipe prototype.",
      "url": "LuaRecipePrototype.html",
      "attributes": {
        "enabled": {
          "name": "enabled",
          "shortDesc": "If this recipe prototype is enabled by default (enabled at the beginning of a game).",
          "desc": "If this recipe prototype is enabled by default (enabled at the beginning of a game).",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "name": {
          "name": "name",
          "shortDesc": "Name of the recipe.",
          "desc": "Name of the recipe. This can be different than the name of the result items as there could\n be more recipes to make the same item.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "Localised name of the recipe.",
          "desc": "Localised name of the recipe.",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "category": {
          "name": "category",
          "shortDesc": "Category of the recipe.",
          "desc": "Category of the recipe.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ingredients": {
          "name": "ingredients",
          "shortDesc": "Ingredients for this recipe.",
          "desc": "Ingredients for this recipe.",
          "type": {
            "value": [
              "Ingredient"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "products": {
          "name": "products",
          "shortDesc": "The results of this recipe.",
          "desc": "The results of this recipe.",
          "type": {
            "value": [
              "Product"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "main_product": {
          "name": "main_product",
          "shortDesc": "The main product of this recipe, `nil` if no main product is defined.",
          "desc": "The main product of this recipe, `nil` if no main product is defined.",
          "type": "Product",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "hidden": {
          "name": "hidden",
          "shortDesc": "Is the recipe hidden?",
          "desc": "Is the recipe hidden? Hidden recipe don't show up in the crafting menu.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "hidden_from_flow_stats": {
          "name": "hidden_from_flow_stats",
          "shortDesc": "Is the recipe hidden from flow statistics (item/fluid production statistics)?",
          "desc": "Is the recipe hidden from flow statistics (item/fluid production statistics)?",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "hidden_from_player_crafting": {
          "name": "hidden_from_player_crafting",
          "shortDesc": "Is the recipe hidden from player crafting?",
          "desc": "Is the recipe hidden from player crafting? The recipe will still show up for selection in machines.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "always_show_made_in": {
          "name": "always_show_made_in",
          "shortDesc": "Should this recipe always show \"Made in\" in the tooltip?",
          "desc": "Should this recipe always show \"Made in\" in the tooltip?",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "energy": {
          "name": "energy",
          "shortDesc": "Energy required to execute this recipe.",
          "desc": "Energy required to execute this recipe. This directly affects the crafting time: Recipe's energy\n is exactly its crafting time in seconds, when crafted in an assembling machine with crafting speed\n exactly equal to one.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string.",
          "desc": "Order string. This is used to sort the crafting menu.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "group": {
          "name": "group",
          "shortDesc": "Group of this recipe.",
          "desc": "Group of this recipe.",
          "type": "LuaGroup",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "subgroup": {
          "name": "subgroup",
          "shortDesc": "Subgroup of this recipe.",
          "desc": "Subgroup of this recipe.",
          "type": "LuaGroup",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "request_paste_multiplier": {
          "name": "request_paste_multiplier",
          "shortDesc": "The multiplier used when this recipe is copied from an assembling machine to a requester chest.",
          "desc": "The multiplier used when this recipe is copied from an assembling machine to a requester chest.\n For each item in the recipe the item count * this value is set in the requester chest.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "overload_multiplier": {
          "name": "overload_multiplier",
          "shortDesc": "Used to determine how many extra items are put into an assembling machine before it's considered \"full enough\".",
          "desc": "Used to determine how many extra items are put into an assembling machine before it's considered \"full enough\".",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allow_inserter_overload": {
          "name": "allow_inserter_overload",
          "shortDesc": "If the recipe is allowed to have the extra inserter overload bonus applied (4 * stack inserter stack size).",
          "desc": "If the recipe is allowed to have the extra inserter overload bonus applied (4 * stack inserter stack size).",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allow_as_intermediate": {
          "name": "allow_as_intermediate",
          "shortDesc": "If this recipe is enabled for the purpose of intermediate hand-crafting.",
          "desc": "If this recipe is enabled for the purpose of intermediate hand-crafting.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allow_intermediates": {
          "name": "allow_intermediates",
          "shortDesc": "If this recipe is allowed to use intermediate recipes when hand-crafting.",
          "desc": "If this recipe is allowed to use intermediate recipes when hand-crafting.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "show_amount_in_title": {
          "name": "show_amount_in_title",
          "shortDesc": "If the amount is shown in the recipe tooltip title when the recipe produces more than 1 product.",
          "desc": "If the amount is shown in the recipe tooltip title when the recipe produces more than 1 product.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "always_show_products": {
          "name": "always_show_products",
          "shortDesc": "If the products are always shown in the recipe tooltip.",
          "desc": "If the products are always shown in the recipe tooltip.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "emissions_multiplier": {
          "name": "emissions_multiplier",
          "shortDesc": "The emissions multiplier for this recipe.",
          "desc": "The emissions multiplier for this recipe.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allow_decomposition": {
          "name": "allow_decomposition",
          "shortDesc": "Is this recipe allowed to be broken down for the recipe tooltip \"Total raw\" calculations?",
          "desc": "Is this recipe allowed to be broken down for the recipe tooltip \"Total raw\" calculations?",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "unlock_results": {
          "name": "unlock_results",
          "shortDesc": "Is this recipe unlocks the result item(s) so they're shown in filter-select GUIs.",
          "desc": "Is this recipe unlocks the result item(s) so they're shown in filter-select GUIs.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaRemote": {
      "name": "LuaRemote",
      "desc": "Registry of interfaces between scripts. An interface is simply a dictionary mapping names to functions. A\n script or mod can then register an interface with [LuaRemote](https://lua-api.factorio.com/latest/LuaRemote.html) , after that any script can call the\n registered functions, provided it knows the interface name and the desired function name. An instance of\n LuaRemote is available through the global object named `remote` .\n\nExample Will register a remote interface containing two functions. Later, it will call these functions through `remote` . `remote.add_interface(\"human\u00a0interactor\", {hello\u00a0=\u00a0function()\u00a0game.player.print(\"Hi!\")\u00a0end, bye\u00a0=\u00a0function(name)\u00a0game.player.print(\"Bye\u00a0\"\u00a0..\u00a0name)\u00a0end}) --\u00a0Some\u00a0time\u00a0later,\u00a0possibly\u00a0in\u00a0a\u00a0different\u00a0mod... remote.call(\"human\u00a0interactor\",\u00a0\"hello\") remote.call(\"human\u00a0interactor\",\u00a0\"bye\",\u00a0\"dear\u00a0reader\")`",
      "url": "LuaRemote.html",
      "attributes": {
        "add_interface": {
          "name": "add_interface",
          "shortDesc": "Add a remote interface.",
          "desc": "Add a remote interface.",
          "parameters": {
            "name": {
              "name": "name",
              "desc": "Name of the interface.",
              "type": "string",
              "optional": false
            },
            "functions": {
              "name": "functions",
              "desc": "List of functions that are members of the new interface.",
              "type": {
                "value": [
                  "string",
                  {
                    "type": "Function"
                  }
                ],
                "type": "Table"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "remove_interface": {
          "name": "remove_interface",
          "shortDesc": "Removes an interface with the given name.",
          "desc": "Removes an interface with the given name.",
          "parameters": {
            "name": {
              "name": "name",
              "desc": "Name of the interface.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the interface was removed. `False` if the interface didn't exist.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "call": {
          "name": "call",
          "shortDesc": "Call a function of an interface.",
          "desc": "Call a function of an interface.",
          "parameters": {
            "interface": {
              "name": "interface",
              "desc": "Interface to look up function in.",
              "type": "string",
              "optional": false
            },
            "function": {
              "name": "function",
              "desc": "Function name that belongs to interface .",
              "type": "string",
              "optional": false
            },
            "...": {
              "name": "...",
              "desc": "Arguments to pass to the called function.",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Anything, including most LuaObjects.",
            "type": "Anything",
            "optional": false
          },
          "attribute_type": "function"
        },
        "object_name": {
          "name": "object_name",
          "shortDesc": "This object's name.",
          "desc": "This object's name.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "interfaces": {
          "name": "interfaces",
          "shortDesc": "List of all registered interfaces.",
          "desc": "List of all registered interfaces. For each interface name, `remote.interfaces[name]` is a dictionary\n mapping the interface's registered functions to the value `true` . Example Assuming the \"human interactor\" interface is registered as above `game.player.print(tostring(remote.interfaces[\"human\u00a0interactor\"][\"hello\"]))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0--\u00a0prints\u00a0true game.player.print(tostring(remote.interfaces[\"human\u00a0interactor\"][\"nonexistent\"]))\u00a0\u00a0--\u00a0prints\u00a0nil`",
          "type": {
            "value": [
              "string",
              {
                "value": [
                  "string",
                  "boolean"
                ],
                "type": "Table"
              }
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObject"
      ]
    },
    "LuaRendering": {
      "name": "LuaRendering",
      "desc": "Allows rendering of geometric shapes, text and sprites in the game world. Each render object is identified by an id that is universally unique for the lifetime of a whole game.\n**Note:** If an entity target of an object is destroyed or changes surface, then the object is also destroyed.",
      "url": "LuaRendering.html",
      "attributes": {
        "draw_line": {
          "name": "draw_line",
          "shortDesc": "Create a line.",
          "desc": "Create a line.",
          "parameters": {
            "luaRenderingdraw_line_param": {
              "name": "luaRenderingdraw_line_param",
              "desc": "Table with the following fields",
              "type": "LuaRenderingdraw_line_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Id of the render object",
            "type": "uint64",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaRenderingdraw_line_param",
              "attributes": {
                "color": {
                  "name": "color",
                  "type": "Color",
                  "optional": false
                },
                "width": {
                  "name": "width",
                  "desc": "In pixels (32 per tile).",
                  "type": "float",
                  "optional": false
                },
                "gap_length": {
                  "name": "gap_length",
                  "desc": "Length of the gaps that this line has, in tiles. Default is 0.",
                  "type": "double",
                  "optional": false
                },
                "dash_length": {
                  "name": "dash_length",
                  "desc": "Length of the dashes that this line has. Used only if gap_length > 0. Default is 0.",
                  "type": "double",
                  "optional": false
                },
                "from": {
                  "name": "from",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "from_offset": {
                  "name": "from_offset",
                  "desc": "Only used if from is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "to": {
                  "name": "to",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "to_offset": {
                  "name": "to_offset",
                  "desc": "Only used if to is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "surface": {
                  "name": "surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "time_to_live": {
                  "name": "time_to_live",
                  "desc": "In ticks. Defaults to living forever.",
                  "type": "uint",
                  "optional": false
                },
                "forces": {
                  "name": "forces",
                  "desc": "The forces that this object is rendered to.",
                  "type": {
                    "value": [
                      "ForceSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "players": {
                  "name": "players",
                  "desc": "The players that this object is rendered to.",
                  "type": {
                    "value": [
                      "PlayerSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "visible": {
                  "name": "visible",
                  "desc": "If this is rendered to anyone at all. Defaults to true.",
                  "type": "boolean",
                  "optional": false
                },
                "draw_on_ground": {
                  "name": "draw_on_ground",
                  "desc": "If this should be drawn below sprites and entities.",
                  "type": "boolean",
                  "optional": false
                },
                "only_in_alt_mode": {
                  "name": "only_in_alt_mode",
                  "desc": "If this should only be rendered in alt mode. Defaults to false.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "draw_text": {
          "name": "draw_text",
          "shortDesc": "Create a text.",
          "desc": "Create a text.",
          "parameters": {
            "luaRenderingdraw_text_param": {
              "name": "luaRenderingdraw_text_param",
              "desc": "Table with the following fields",
              "type": "LuaRenderingdraw_text_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Id of the render object",
            "type": "uint64",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaRenderingdraw_text_param",
              "attributes": {
                "text": {
                  "name": "text",
                  "desc": "The text to display.",
                  "type": "LocalisedString",
                  "optional": false
                },
                "surface": {
                  "name": "surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "target": {
                  "name": "target",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "target_offset": {
                  "name": "target_offset",
                  "desc": "Only used if target is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "color": {
                  "name": "color",
                  "type": "Color",
                  "optional": false
                },
                "scale": {
                  "name": "scale",
                  "type": "double",
                  "optional": false
                },
                "font": {
                  "name": "font",
                  "desc": "Name of font to use. Defaults to the same font as flying-text.",
                  "type": "string",
                  "optional": false
                },
                "time_to_live": {
                  "name": "time_to_live",
                  "desc": "In ticks. Defaults to living forever.",
                  "type": "uint",
                  "optional": false
                },
                "forces": {
                  "name": "forces",
                  "desc": "The forces that this object is rendered to.",
                  "type": {
                    "value": [
                      "ForceSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "players": {
                  "name": "players",
                  "desc": "The players that this object is rendered to.",
                  "type": {
                    "value": [
                      "PlayerSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "visible": {
                  "name": "visible",
                  "desc": "If this is rendered to anyone at all. Defaults to true.",
                  "type": "boolean",
                  "optional": false
                },
                "draw_on_ground": {
                  "name": "draw_on_ground",
                  "desc": "If this should be drawn below sprites and entities.",
                  "type": "boolean",
                  "optional": false
                },
                "orientation": {
                  "name": "orientation",
                  "desc": "The orientation of the text. Default is 0.",
                  "type": "float",
                  "optional": false
                },
                "alignment": {
                  "name": "alignment",
                  "desc": "Defaults to \"left\". Other options are \"right\" and \"center\".",
                  "type": "string",
                  "optional": false
                },
                "scale_with_zoom": {
                  "name": "scale_with_zoom",
                  "desc": "Defaults to false. If true, the text scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes.",
                  "type": "boolean",
                  "optional": false
                },
                "only_in_alt_mode": {
                  "name": "only_in_alt_mode",
                  "desc": "If this should only be rendered in alt mode. Defaults to false.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "draw_circle": {
          "name": "draw_circle",
          "shortDesc": "Create a circle.",
          "desc": "Create a circle.",
          "parameters": {
            "luaRenderingdraw_circle_param": {
              "name": "luaRenderingdraw_circle_param",
              "desc": "Table with the following fields",
              "type": "LuaRenderingdraw_circle_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Id of the render object",
            "type": "uint64",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaRenderingdraw_circle_param",
              "attributes": {
                "color": {
                  "name": "color",
                  "type": "Color",
                  "optional": false
                },
                "radius": {
                  "name": "radius",
                  "desc": "In tiles.",
                  "type": "double",
                  "optional": false
                },
                "width": {
                  "name": "width",
                  "desc": "Width of the outline, used only if filled = false. Value is in pixels (32 per tile).",
                  "type": "float",
                  "optional": false
                },
                "filled": {
                  "name": "filled",
                  "desc": "If the circle should be filled.",
                  "type": "boolean",
                  "optional": false
                },
                "target": {
                  "name": "target",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "target_offset": {
                  "name": "target_offset",
                  "desc": "Only used if target is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "surface": {
                  "name": "surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "time_to_live": {
                  "name": "time_to_live",
                  "desc": "In ticks. Defaults to living forever.",
                  "type": "uint",
                  "optional": false
                },
                "forces": {
                  "name": "forces",
                  "desc": "The forces that this object is rendered to.",
                  "type": {
                    "value": [
                      "ForceSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "players": {
                  "name": "players",
                  "desc": "The players that this object is rendered to.",
                  "type": {
                    "value": [
                      "PlayerSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "visible": {
                  "name": "visible",
                  "desc": "If this is rendered to anyone at all. Defaults to true.",
                  "type": "boolean",
                  "optional": false
                },
                "draw_on_ground": {
                  "name": "draw_on_ground",
                  "desc": "If this should be drawn below sprites and entities.",
                  "type": "boolean",
                  "optional": false
                },
                "only_in_alt_mode": {
                  "name": "only_in_alt_mode",
                  "desc": "If this should only be rendered in alt mode. Defaults to false.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "draw_rectangle": {
          "name": "draw_rectangle",
          "shortDesc": "Create a rectangle.",
          "desc": "Create a rectangle.",
          "parameters": {
            "luaRenderingdraw_rectangle_param": {
              "name": "luaRenderingdraw_rectangle_param",
              "desc": "Table with the following fields",
              "type": "LuaRenderingdraw_rectangle_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Id of the render object",
            "type": "uint64",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaRenderingdraw_rectangle_param",
              "attributes": {
                "color": {
                  "name": "color",
                  "type": "Color",
                  "optional": false
                },
                "width": {
                  "name": "width",
                  "desc": "Width of the outline, used only if filled = false. Value is in pixels (32 per tile).",
                  "type": "float",
                  "optional": false
                },
                "filled": {
                  "name": "filled",
                  "desc": "If the rectangle should be filled.",
                  "type": "boolean",
                  "optional": false
                },
                "left_top": {
                  "name": "left_top",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "left_top_offset": {
                  "name": "left_top_offset",
                  "desc": "Only used if left_top is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "right_bottom": {
                  "name": "right_bottom",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "right_bottom_offset": {
                  "name": "right_bottom_offset",
                  "desc": "Only used if right_bottom is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "surface": {
                  "name": "surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "time_to_live": {
                  "name": "time_to_live",
                  "desc": "In ticks. Defaults to living forever.",
                  "type": "uint",
                  "optional": false
                },
                "forces": {
                  "name": "forces",
                  "desc": "The forces that this object is rendered to.",
                  "type": {
                    "value": [
                      "ForceSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "players": {
                  "name": "players",
                  "desc": "The players that this object is rendered to.",
                  "type": {
                    "value": [
                      "PlayerSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "visible": {
                  "name": "visible",
                  "desc": "If this is rendered to anyone at all. Defaults to true.",
                  "type": "boolean",
                  "optional": false
                },
                "draw_on_ground": {
                  "name": "draw_on_ground",
                  "desc": "If this should be drawn below sprites and entities.",
                  "type": "boolean",
                  "optional": false
                },
                "only_in_alt_mode": {
                  "name": "only_in_alt_mode",
                  "desc": "If this should only be rendered in alt mode. Defaults to false.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "draw_arc": {
          "name": "draw_arc",
          "shortDesc": "Create an arc.",
          "desc": "Create an arc.",
          "parameters": {
            "luaRenderingdraw_arc_param": {
              "name": "luaRenderingdraw_arc_param",
              "desc": "Table with the following fields",
              "type": "LuaRenderingdraw_arc_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Id of the render object",
            "type": "uint64",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaRenderingdraw_arc_param",
              "attributes": {
                "color": {
                  "name": "color",
                  "type": "Color",
                  "optional": false
                },
                "max_radius": {
                  "name": "max_radius",
                  "desc": "The radius of the outer edge of the arc, in tiles.",
                  "type": "double",
                  "optional": false
                },
                "min_radius": {
                  "name": "min_radius",
                  "desc": "The radius of the inner edge of the arc, in tiles.",
                  "type": "double",
                  "optional": false
                },
                "start_angle": {
                  "name": "start_angle",
                  "desc": "Where the arc starts, in radian.",
                  "type": "float",
                  "optional": false
                },
                "angle": {
                  "name": "angle",
                  "desc": "The angle of the arc, in radian.",
                  "type": "float",
                  "optional": false
                },
                "target": {
                  "name": "target",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "target_offset": {
                  "name": "target_offset",
                  "desc": "Only used if target is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "surface": {
                  "name": "surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "time_to_live": {
                  "name": "time_to_live",
                  "desc": "In ticks. Defaults to living forever.",
                  "type": "uint",
                  "optional": false
                },
                "forces": {
                  "name": "forces",
                  "desc": "The forces that this object is rendered to.",
                  "type": {
                    "value": [
                      "ForceSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "players": {
                  "name": "players",
                  "desc": "The players that this object is rendered to.",
                  "type": {
                    "value": [
                      "PlayerSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "visible": {
                  "name": "visible",
                  "desc": "If this is rendered to anyone at all. Defaults to true.",
                  "type": "boolean",
                  "optional": false
                },
                "draw_on_ground": {
                  "name": "draw_on_ground",
                  "desc": "If this should be drawn below sprites and entities.",
                  "type": "boolean",
                  "optional": false
                },
                "only_in_alt_mode": {
                  "name": "only_in_alt_mode",
                  "desc": "If this should only be rendered in alt mode. Defaults to false.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "draw_polygon": {
          "name": "draw_polygon",
          "shortDesc": "Create a triangle mesh defined by a triangle strip.",
          "desc": "Create a triangle mesh defined by a triangle strip.",
          "parameters": {
            "luaRenderingdraw_polygon_param": {
              "name": "luaRenderingdraw_polygon_param",
              "desc": "Table with the following fields",
              "type": "LuaRenderingdraw_polygon_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Id of the render object",
            "type": "uint64",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaRenderingdraw_polygon_param",
              "attributes": {
                "color": {
                  "name": "color",
                  "type": "Color",
                  "optional": false
                },
                "vertices": {
                  "name": "vertices",
                  "type": {
                    "value": [
                      "CustomScriptRenderTarget"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "target": {
                  "name": "target",
                  "desc": "Acts like an offset applied to all vertices that are not set to an entity.",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "target_offset": {
                  "name": "target_offset",
                  "desc": "Only used if target is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "orientation": {
                  "name": "orientation",
                  "desc": "The orientation applied to all vertices. Default is 0.",
                  "type": "float",
                  "optional": false
                },
                "orientation_target": {
                  "name": "orientation_target",
                  "desc": "If given, the vertices (that are not set to an entity) rotate so that it faces this target. Note that orientation is still applied.",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "orientation_target_offset": {
                  "name": "orientation_target_offset",
                  "desc": "Only used if orientation_target is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "surface": {
                  "name": "surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "time_to_live": {
                  "name": "time_to_live",
                  "desc": "In ticks. Defaults to living forever.",
                  "type": "uint",
                  "optional": false
                },
                "forces": {
                  "name": "forces",
                  "desc": "The forces that this object is rendered to.",
                  "type": {
                    "value": [
                      "ForceSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "players": {
                  "name": "players",
                  "desc": "The players that this object is rendered to.",
                  "type": {
                    "value": [
                      "PlayerSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "visible": {
                  "name": "visible",
                  "desc": "If this is rendered to anyone at all. Defaults to true.",
                  "type": "boolean",
                  "optional": false
                },
                "draw_on_ground": {
                  "name": "draw_on_ground",
                  "desc": "If this should be drawn below sprites and entities.",
                  "type": "boolean",
                  "optional": false
                },
                "only_in_alt_mode": {
                  "name": "only_in_alt_mode",
                  "desc": "If this should only be rendered in alt mode. Defaults to false.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "draw_sprite": {
          "name": "draw_sprite",
          "shortDesc": "Create a sprite.",
          "desc": "Create a sprite.",
          "parameters": {
            "luaRenderingdraw_sprite_param": {
              "name": "luaRenderingdraw_sprite_param",
              "desc": "Table with the following fields",
              "type": "LuaRenderingdraw_sprite_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Id of the render object",
            "type": "uint64",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaRenderingdraw_sprite_param",
              "attributes": {
                "sprite": {
                  "name": "sprite",
                  "type": "SpritePath",
                  "optional": false
                },
                "orientation": {
                  "name": "orientation",
                  "desc": "The orientation of the sprite. Default is 0.",
                  "type": "float",
                  "optional": false
                },
                "x_scale": {
                  "name": "x_scale",
                  "desc": "Horizontal scale of the sprite. Default is 1.",
                  "type": "double",
                  "optional": false
                },
                "y_scale": {
                  "name": "y_scale",
                  "desc": "Vertical scale of the sprite. Default is 1.",
                  "type": "double",
                  "optional": false
                },
                "tint": {
                  "name": "tint",
                  "type": "Color",
                  "optional": false
                },
                "render_layer": {
                  "name": "render_layer",
                  "type": "RenderLayer",
                  "optional": false
                },
                "orientation_target": {
                  "name": "orientation_target",
                  "desc": "If given, the sprite rotates so that it faces this target. Note that orientation is still applied to the sprite.",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "orientation_target_offset": {
                  "name": "orientation_target_offset",
                  "desc": "Only used if orientation_target is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "oriented_offset": {
                  "name": "oriented_offset",
                  "desc": "Offsets the center of the sprite if orientation_target is given. This offset will rotate together with the sprite.",
                  "type": "Vector",
                  "optional": false
                },
                "target": {
                  "name": "target",
                  "desc": "Center of the sprite.",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "target_offset": {
                  "name": "target_offset",
                  "desc": "Only used if target is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "surface": {
                  "name": "surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "time_to_live": {
                  "name": "time_to_live",
                  "desc": "In ticks. Defaults to living forever.",
                  "type": "uint",
                  "optional": false
                },
                "forces": {
                  "name": "forces",
                  "desc": "The forces that this object is rendered to.",
                  "type": {
                    "value": [
                      "ForceSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "players": {
                  "name": "players",
                  "desc": "The players that this object is rendered to.",
                  "type": {
                    "value": [
                      "PlayerSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "visible": {
                  "name": "visible",
                  "desc": "If this is rendered to anyone at all. Defaults to true.",
                  "type": "boolean",
                  "optional": false
                },
                "only_in_alt_mode": {
                  "name": "only_in_alt_mode",
                  "desc": "If this should only be rendered in alt mode. Defaults to false.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "draw_light": {
          "name": "draw_light",
          "shortDesc": "Create a light.",
          "desc": "Create a light.",
          "parameters": {
            "luaRenderingdraw_light_param": {
              "name": "luaRenderingdraw_light_param",
              "desc": "Table with the following fields",
              "type": "LuaRenderingdraw_light_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Id of the render object",
            "type": "uint64",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaRenderingdraw_light_param",
              "attributes": {
                "sprite": {
                  "name": "sprite",
                  "type": "SpritePath",
                  "optional": false
                },
                "orientation": {
                  "name": "orientation",
                  "desc": "The orientation of the light. Default is 0.",
                  "type": "float",
                  "optional": false
                },
                "scale": {
                  "name": "scale",
                  "desc": "Default is 1.",
                  "type": "float",
                  "optional": false
                },
                "intensity": {
                  "name": "intensity",
                  "desc": "Default is 1.",
                  "type": "float",
                  "optional": false
                },
                "minimum_darkness": {
                  "name": "minimum_darkness",
                  "desc": "The minimum darkness at which this light is rendered. Default is 0.",
                  "type": "float",
                  "optional": false
                },
                "oriented": {
                  "name": "oriented",
                  "desc": "If this light has the same orientation as the entity target, default is false. Note that orientation is still applied to the sprite.",
                  "type": "boolean",
                  "optional": false
                },
                "color": {
                  "name": "color",
                  "desc": "Defaults to white (no tint).",
                  "type": "Color",
                  "optional": false
                },
                "target": {
                  "name": "target",
                  "desc": "Center of the light.",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "target_offset": {
                  "name": "target_offset",
                  "desc": "Only used if target is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "surface": {
                  "name": "surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "time_to_live": {
                  "name": "time_to_live",
                  "desc": "In ticks. Defaults to living forever.",
                  "type": "uint",
                  "optional": false
                },
                "forces": {
                  "name": "forces",
                  "desc": "The forces that this object is rendered to.",
                  "type": {
                    "value": [
                      "ForceSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "players": {
                  "name": "players",
                  "desc": "The players that this object is rendered to.",
                  "type": {
                    "value": [
                      "PlayerSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "visible": {
                  "name": "visible",
                  "desc": "If this is rendered to anyone at all. Defaults to true.",
                  "type": "boolean",
                  "optional": false
                },
                "only_in_alt_mode": {
                  "name": "only_in_alt_mode",
                  "desc": "If this should only be rendered in alt mode. Defaults to false.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "draw_animation": {
          "name": "draw_animation",
          "shortDesc": "Create an animation.",
          "desc": "Create an animation.",
          "parameters": {
            "luaRenderingdraw_animation_param": {
              "name": "luaRenderingdraw_animation_param",
              "desc": "Table with the following fields",
              "type": "LuaRenderingdraw_animation_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Id of the render object",
            "type": "uint64",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaRenderingdraw_animation_param",
              "attributes": {
                "animation": {
                  "name": "animation",
                  "desc": "Name of an animation prototype .",
                  "type": "string",
                  "optional": false
                },
                "orientation": {
                  "name": "orientation",
                  "desc": "The orientation of the animation. Default is 0.",
                  "type": "float",
                  "optional": false
                },
                "x_scale": {
                  "name": "x_scale",
                  "desc": "Horizontal scale of the animation. Default is 1.",
                  "type": "double",
                  "optional": false
                },
                "y_scale": {
                  "name": "y_scale",
                  "desc": "Vertical scale of the animation. Default is 1.",
                  "type": "double",
                  "optional": false
                },
                "tint": {
                  "name": "tint",
                  "type": "Color",
                  "optional": false
                },
                "render_layer": {
                  "name": "render_layer",
                  "type": "RenderLayer",
                  "optional": false
                },
                "animation_speed": {
                  "name": "animation_speed",
                  "desc": "How many frames the animation goes forward per tick. Default is 1.",
                  "type": "double",
                  "optional": false
                },
                "animation_offset": {
                  "name": "animation_offset",
                  "desc": "Offset of the animation in frames. Default is 0.",
                  "type": "double",
                  "optional": false
                },
                "orientation_target": {
                  "name": "orientation_target",
                  "desc": "If given, the animation rotates so that it faces this target. Note that orientation is still applied to the animation.",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "orientation_target_offset": {
                  "name": "orientation_target_offset",
                  "desc": "Only used if orientation_target is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "oriented_offset": {
                  "name": "oriented_offset",
                  "desc": "Offsets the center of the animation if orientation_target is given. This offset will rotate together with the animation.",
                  "type": "Vector",
                  "optional": false
                },
                "target": {
                  "name": "target",
                  "desc": "Center of the animation.",
                  "type": {
                    "value": [
                      "Position",
                      "LuaEntity"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "target_offset": {
                  "name": "target_offset",
                  "desc": "Only used if target is a LuaEntity.",
                  "type": "Vector",
                  "optional": false
                },
                "surface": {
                  "name": "surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "time_to_live": {
                  "name": "time_to_live",
                  "desc": "In ticks. Defaults to living forever.",
                  "type": "uint",
                  "optional": false
                },
                "forces": {
                  "name": "forces",
                  "desc": "The forces that this object is rendered to.",
                  "type": {
                    "value": [
                      "ForceSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "players": {
                  "name": "players",
                  "desc": "The players that this object is rendered to.",
                  "type": {
                    "value": [
                      "PlayerSpecification"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "visible": {
                  "name": "visible",
                  "desc": "If this is rendered to anyone at all. Defaults to true.",
                  "type": "boolean",
                  "optional": false
                },
                "only_in_alt_mode": {
                  "name": "only_in_alt_mode",
                  "desc": "If this should only be rendered in alt mode. Defaults to false.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "destroy": {
          "name": "destroy",
          "shortDesc": "Destroy the object with the given id.",
          "desc": "Destroy the object with the given id.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "is_font_valid": {
          "name": "is_font_valid",
          "shortDesc": "Does a font with this name exist?",
          "desc": "Does a font with this name exist?",
          "parameters": {
            "font_name": {
              "name": "font_name",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_valid": {
          "name": "is_valid",
          "shortDesc": "Does a valid object with this id exist?",
          "desc": "Does a valid object with this id exist?",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_all_ids": {
          "name": "get_all_ids",
          "shortDesc": "Gets an array of all valid object ids.",
          "desc": "Gets an array of all valid object ids.",
          "parameters": {
            "mod_name": {
              "name": "mod_name",
              "desc": "If provided, get only the render objects created by this mod.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "uint64"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "clear": {
          "name": "clear",
          "shortDesc": "Destroys all render objects.",
          "desc": "Destroys all render objects.",
          "parameters": {
            "mod_name": {
              "name": "mod_name",
              "desc": "If provided, only the render objects created by this mod are destroyed.",
              "type": "string",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_type": {
          "name": "get_type",
          "shortDesc": "Gets the type of the given object.",
          "desc": "Gets the type of the given object. The types are \"text\", \"line\", \"circle\", \"rectangle\", \"arc\", \"polygon\", \"sprite\", \"light\" and \"animation\".",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "bring_to_front": {
          "name": "bring_to_front",
          "shortDesc": "Reorder this object so that it is drawn in front of the already existing objects.",
          "desc": "Reorder this object so that it is drawn in front of the already existing objects.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_surface": {
          "name": "get_surface",
          "shortDesc": "The surface the object with this id is rendered on.",
          "desc": "The surface the object with this id is rendered on.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaSurface",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_time_to_live": {
          "name": "get_time_to_live",
          "shortDesc": "Get the time to live of the object with this id.",
          "desc": "Get the time to live of the object with this id. This will be 0 if the object does not expire.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_time_to_live": {
          "name": "set_time_to_live",
          "shortDesc": "Set the time to live of the object with this id.",
          "desc": "Set the time to live of the object with this id. Set to 0 if the object should not expire.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "time_to_live": {
              "name": "time_to_live",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_forces": {
          "name": "get_forces",
          "shortDesc": "Get the forces that the object with this id is rendered to or `nil` if visible to all forces.",
          "desc": "Get the forces that the object with this id is rendered to or `nil` if visible to all forces.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaForce"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_forces": {
          "name": "set_forces",
          "shortDesc": "Set the forces that the object with this id is rendered to.",
          "desc": "Set the forces that the object with this id is rendered to.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "forces": {
              "name": "forces",
              "desc": "Providing an empty array will set the object to be visible to all forces.",
              "type": {
                "value": [
                  "ForceSpecification"
                ],
                "type": "Array"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_players": {
          "name": "get_players",
          "shortDesc": "Get the players that the object with this id is rendered to or `nil` if visible to all players.",
          "desc": "Get the players that the object with this id is rendered to or `nil` if visible to all players.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaPlayer"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_players": {
          "name": "set_players",
          "shortDesc": "Set the players that the object with this id is rendered to.",
          "desc": "Set the players that the object with this id is rendered to.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "players": {
              "name": "players",
              "desc": "Providing an empty array will set the object to be visible to all players.",
              "type": {
                "value": [
                  "PlayerSpecification"
                ],
                "type": "Array"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_visible": {
          "name": "get_visible",
          "shortDesc": "Get whether this is rendered to anyone at all.",
          "desc": "Get whether this is rendered to anyone at all.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_visible": {
          "name": "set_visible",
          "shortDesc": "Set whether this is rendered to anyone at all.",
          "desc": "Set whether this is rendered to anyone at all.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "visible": {
              "name": "visible",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_draw_on_ground": {
          "name": "get_draw_on_ground",
          "shortDesc": "Get whether this is being drawn on the ground, under most entities and sprites.",
          "desc": "Get whether this is being drawn on the ground, under most entities and sprites. _Can only be used if this is Text,  Line,  Circle,  Rectangle,  Arc, or  Polygon_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_draw_on_ground": {
          "name": "set_draw_on_ground",
          "shortDesc": "Set whether this is being drawn on the ground, under most entities and sprites.",
          "desc": "Set whether this is being drawn on the ground, under most entities and sprites. _Can only be used if this is Text,  Line,  Circle,  Rectangle,  Arc, or  Polygon_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "draw_on_ground": {
              "name": "draw_on_ground",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_only_in_alt_mode": {
          "name": "get_only_in_alt_mode",
          "shortDesc": "Get whether this is only rendered in alt-mode.",
          "desc": "Get whether this is only rendered in alt-mode.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_only_in_alt_mode": {
          "name": "set_only_in_alt_mode",
          "shortDesc": "Set whether this is only rendered in alt-mode.",
          "desc": "Set whether this is only rendered in alt-mode.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "only_in_alt_mode": {
              "name": "only_in_alt_mode",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_color": {
          "name": "get_color",
          "shortDesc": "Get the color or tint of the object with this id.",
          "desc": "Get the color or tint of the object with this id. _Can only be used if this is Text,  Line,  Circle,  Rectangle,  Arc,  Polygon,  Sprite,  Light, or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "or `nil` if the object does not support color.",
            "type": "Color",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_color": {
          "name": "set_color",
          "shortDesc": "Set the color or tint of the object with this id.",
          "desc": "Set the color or tint of the object with this id. Does nothing if this object does not support color. _Can only be used if this is Text,  Line,  Circle,  Rectangle,  Arc,  Polygon,  Sprite,  Light, or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "color": {
              "name": "color",
              "type": "Color",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_width": {
          "name": "get_width",
          "shortDesc": "Get the width of the object with this id.",
          "desc": "Get the width of the object with this id. Value is in pixels (32 per tile). _Can only be used if this is Line,  Circle, or  Rectangle_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "or `nil` if the object does not support width.",
            "type": "float",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_width": {
          "name": "set_width",
          "shortDesc": "Set the width of the object with this id.",
          "desc": "Set the width of the object with this id. Does nothing if this object does not support width. Value is in pixels (32 per tile). _Can only be used if this is Line,  Circle, or  Rectangle_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "width": {
              "name": "width",
              "type": "float",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_from": {
          "name": "get_from",
          "shortDesc": "Get from where the line with this id is drawn or `nil` if this object is not a line.",
          "desc": "Get from where the line with this id is drawn or `nil` if this object is not a line. _Can only be used if this is Line_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "ScriptRenderTarget",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_from": {
          "name": "set_from",
          "shortDesc": "Set from where the line with this id is drawn.",
          "desc": "Set from where the line with this id is drawn. Does nothing if the object is not a line. _Can only be used if this is Line_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "from": {
              "name": "from",
              "type": {
                "value": [
                  "Position",
                  "LuaEntity"
                ],
                "type": "Union"
              },
              "optional": false
            },
            "from_offset": {
              "name": "from_offset",
              "type": "Vector",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_to": {
          "name": "get_to",
          "shortDesc": "Get where the line with this id is drawn to or `nil` if the object is not a line.",
          "desc": "Get where the line with this id is drawn to or `nil` if the object is not a line. _Can only be used if this is Line_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "ScriptRenderTarget",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_to": {
          "name": "set_to",
          "shortDesc": "Set where the line with this id is drawn to.",
          "desc": "Set where the line with this id is drawn to. Does nothing if this object is not a line. _Can only be used if this is Line_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "to": {
              "name": "to",
              "type": {
                "value": [
                  "Position",
                  "LuaEntity"
                ],
                "type": "Union"
              },
              "optional": false
            },
            "to_offset": {
              "name": "to_offset",
              "type": "Vector",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_dash_length": {
          "name": "get_dash_length",
          "shortDesc": "Get the dash length of the line with this id or `nil` if the object is not a line.",
          "desc": "Get the dash length of the line with this id or `nil` if the object is not a line. _Can only be used if this is Line_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_dash_length": {
          "name": "set_dash_length",
          "shortDesc": "Set the dash length of the line with this id.",
          "desc": "Set the dash length of the line with this id. Does nothing if this object is not a line. _Can only be used if this is Line_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "dash_length": {
              "name": "dash_length",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_gap_length": {
          "name": "get_gap_length",
          "shortDesc": "Get the length of the gaps in the line with this id or `nil` if the object is not a line.",
          "desc": "Get the length of the gaps in the line with this id or `nil` if the object is not a line. _Can only be used if this is Line_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_gap_length": {
          "name": "set_gap_length",
          "shortDesc": "Set the length of the gaps in the line with this id.",
          "desc": "Set the length of the gaps in the line with this id. Does nothing if this object is not a line. _Can only be used if this is Line_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "gap_length": {
              "name": "gap_length",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "set_dashes": {
          "name": "set_dashes",
          "shortDesc": "Set the length of the dashes and the length of the gaps in the line with this id.",
          "desc": "Set the length of the dashes and the length of the gaps in the line with this id. Does nothing if this object is not a line. _Can only be used if this is Line_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "dash_length": {
              "name": "dash_length",
              "type": "double",
              "optional": false
            },
            "gap_length": {
              "name": "gap_length",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_target": {
          "name": "get_target",
          "shortDesc": "Get where the object with this id is drawn or `nil` if the object does not support target.",
          "desc": "Get where the object with this id is drawn or `nil` if the object does not support target. _Can only be used if this is Text,  Circle,  Arc,  Polygon,  Sprite,  Light, or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "ScriptRenderTarget",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_target": {
          "name": "set_target",
          "shortDesc": "Set where the object with this id is drawn.",
          "desc": "Set where the object with this id is drawn. Does nothing if this object does not support target. _Can only be used if this is Text,  Circle,  Arc,  Polygon,  Sprite,  Light, or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "target": {
              "name": "target",
              "type": {
                "value": [
                  "Position",
                  "LuaEntity"
                ],
                "type": "Union"
              },
              "optional": false
            },
            "target_offset": {
              "name": "target_offset",
              "type": "Vector",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_orientation": {
          "name": "get_orientation",
          "shortDesc": "Get the orientation of the object with this id or `nil` if the object is not a text, polygon, sprite, light or animation.",
          "desc": "Get the orientation of the object with this id or `nil` if the object is not a text, polygon, sprite, light or animation. _Can only be used if this is Text,  Polygon,  Sprite,  Light, or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "float",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_orientation": {
          "name": "set_orientation",
          "shortDesc": "Set the orientation of the object with this id.",
          "desc": "Set the orientation of the object with this id. Does nothing if this object is not a text, polygon, sprite, light or animation. _Can only be used if this is Text,  Polygon,  Sprite,  Light, or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "orientation": {
              "name": "orientation",
              "type": "float",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_scale": {
          "name": "get_scale",
          "shortDesc": "Get the scale of the text or light with this id or `nil` if the object is not a text or light.",
          "desc": "Get the scale of the text or light with this id or `nil` if the object is not a text or light. _Can only be used if this is Text or  Light_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_scale": {
          "name": "set_scale",
          "shortDesc": "Set the scale of the text or light with this id.",
          "desc": "Set the scale of the text or light with this id. Does nothing if this object is not a text or light. _Can only be used if this is Text or  Light_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "scale": {
              "name": "scale",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_text": {
          "name": "get_text",
          "shortDesc": "Get the text that is displayed by the text with this id or `nil` if the object is not a text.",
          "desc": "Get the text that is displayed by the text with this id or `nil` if the object is not a text. _Can only be used if this is Text_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LocalisedString",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_text": {
          "name": "set_text",
          "shortDesc": "Set the text that is displayed by the text with this id.",
          "desc": "Set the text that is displayed by the text with this id. Does nothing if this object is not a text. _Can only be used if this is Text_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "text": {
              "name": "text",
              "type": "LocalisedString",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_font": {
          "name": "get_font",
          "shortDesc": "Get the font of the text with this id or `nil` if the object is not a text.",
          "desc": "Get the font of the text with this id or `nil` if the object is not a text. _Can only be used if this is Text_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_font": {
          "name": "set_font",
          "shortDesc": "Set the font of the text with this id.",
          "desc": "Set the font of the text with this id. Does nothing if this object is not a text. _Can only be used if this is Text_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "font": {
              "name": "font",
              "type": "string",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_alignment": {
          "name": "get_alignment",
          "shortDesc": "Get the alignment  of the text with this id or `nil` if the object is not a text.",
          "desc": "Get the alignment  of the text with this id or `nil` if the object is not a text. _Can only be used if this is Text_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_alignment": {
          "name": "set_alignment",
          "shortDesc": "Set the alignment of the text with this id.",
          "desc": "Set the alignment of the text with this id. Does nothing if this object is not a text. _Can only be used if this is Text_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "alignment": {
              "name": "alignment",
              "desc": "\"left\", \"right\" or \"center\".",
              "type": "string",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_scale_with_zoom": {
          "name": "get_scale_with_zoom",
          "shortDesc": "Get if the text with this id scales with player zoom or `nil` if the object is not a text.",
          "desc": "Get if the text with this id scales with player zoom or `nil` if the object is not a text. _Can only be used if this is Text_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_scale_with_zoom": {
          "name": "set_scale_with_zoom",
          "shortDesc": "Set if the text with this id scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes.",
          "desc": "Set if the text with this id scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes.\n Does nothing if this object is not a text. _Can only be used if this is Text_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "scale_with_zoom": {
              "name": "scale_with_zoom",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_filled": {
          "name": "get_filled",
          "shortDesc": "Get if the circle or rectangle with this id is filled or `nil` if the object is not a circle or rectangle.",
          "desc": "Get if the circle or rectangle with this id is filled or `nil` if the object is not a circle or rectangle. _Can only be used if this is Circle or  Rectangle_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_filled": {
          "name": "set_filled",
          "shortDesc": "Set if the circle or rectangle with this id is filled.",
          "desc": "Set if the circle or rectangle with this id is filled. Does nothing if this object is not a circle or rectangle. _Can only be used if this is Circle or  Rectangle_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "filled": {
              "name": "filled",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_radius": {
          "name": "get_radius",
          "shortDesc": "Get the radius of the circle with this id or `nil` if the object is not a circle.",
          "desc": "Get the radius of the circle with this id or `nil` if the object is not a circle. _Can only be used if this is Circle_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_radius": {
          "name": "set_radius",
          "shortDesc": "Set the radius of the circle with this id.",
          "desc": "Set the radius of the circle with this id. Does nothing if this object is not a circle. _Can only be used if this is Circle_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "radius": {
              "name": "radius",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_left_top": {
          "name": "get_left_top",
          "shortDesc": "Get where top left corner of the rectangle with this id is drawn or `nil` if the object is not a rectangle.",
          "desc": "Get where top left corner of the rectangle with this id is drawn or `nil` if the object is not a rectangle. _Can only be used if this is Rectangle_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "ScriptRenderTarget",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_left_top": {
          "name": "set_left_top",
          "shortDesc": "Set where top left corner of the rectangle with this id is drawn.",
          "desc": "Set where top left corner of the rectangle with this id is drawn. Does nothing if this object is not a rectangle. _Can only be used if this is Rectangle_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "left_top": {
              "name": "left_top",
              "type": {
                "value": [
                  "Position",
                  "LuaEntity"
                ],
                "type": "Union"
              },
              "optional": false
            },
            "left_top_offset": {
              "name": "left_top_offset",
              "type": "Vector",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_right_bottom": {
          "name": "get_right_bottom",
          "shortDesc": "Get where bottom right corner of the rectangle with this id is drawn or `nil` if the object is not a rectangle.",
          "desc": "Get where bottom right corner of the rectangle with this id is drawn or `nil` if the object is not a rectangle. _Can only be used if this is Rectangle_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "ScriptRenderTarget",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_right_bottom": {
          "name": "set_right_bottom",
          "shortDesc": "Set where top bottom right of the rectangle with this id is drawn.",
          "desc": "Set where top bottom right of the rectangle with this id is drawn. Does nothing if this object is not a rectangle. _Can only be used if this is Rectangle_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "right_bottom": {
              "name": "right_bottom",
              "type": {
                "value": [
                  "Position",
                  "LuaEntity"
                ],
                "type": "Union"
              },
              "optional": false
            },
            "right_bottom_offset": {
              "name": "right_bottom_offset",
              "type": "Vector",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "set_corners": {
          "name": "set_corners",
          "shortDesc": "Set the corners of the rectangle with this id.",
          "desc": "Set the corners of the rectangle with this id. Does nothing if this object is not a rectangle. _Can only be used if this is Rectangle_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "left_top": {
              "name": "left_top",
              "type": {
                "value": [
                  "Position",
                  "LuaEntity"
                ],
                "type": "Union"
              },
              "optional": false
            },
            "left_top_offset": {
              "name": "left_top_offset",
              "type": "Vector",
              "optional": false
            },
            "right_bottom": {
              "name": "right_bottom",
              "type": {
                "value": [
                  "Position",
                  "LuaEntity"
                ],
                "type": "Union"
              },
              "optional": false
            },
            "right_bottom_offset": {
              "name": "right_bottom_offset",
              "type": "Vector",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_max_radius": {
          "name": "get_max_radius",
          "shortDesc": "Get the radius of the outer edge of the arc with this id or `nil` if the object is not a arc.",
          "desc": "Get the radius of the outer edge of the arc with this id or `nil` if the object is not a arc. _Can only be used if this is Arc_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_max_radius": {
          "name": "set_max_radius",
          "shortDesc": "Set the radius of the outer edge of the arc with this id.",
          "desc": "Set the radius of the outer edge of the arc with this id. Does nothing if this object is not a arc. _Can only be used if this is Arc_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "max_radius": {
              "name": "max_radius",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_min_radius": {
          "name": "get_min_radius",
          "shortDesc": "Get the radius of the inner edge of the arc with this id or `nil` if the object is not a arc.",
          "desc": "Get the radius of the inner edge of the arc with this id or `nil` if the object is not a arc. _Can only be used if this is Arc_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_min_radius": {
          "name": "set_min_radius",
          "shortDesc": "Set the radius of the inner edge of the arc with this id.",
          "desc": "Set the radius of the inner edge of the arc with this id. Does nothing if this object is not a arc. _Can only be used if this is Arc_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "min_radius": {
              "name": "min_radius",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_start_angle": {
          "name": "get_start_angle",
          "shortDesc": "Get where the arc with this id starts or `nil` if the object is not a arc.",
          "desc": "Get where the arc with this id starts or `nil` if the object is not a arc. _Can only be used if this is Arc_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "angle in radian",
            "type": "float",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_start_angle": {
          "name": "set_start_angle",
          "shortDesc": "Set where the arc with this id starts.",
          "desc": "Set where the arc with this id starts. Does nothing if this object is not a arc. _Can only be used if this is Arc_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "start_angle": {
              "name": "start_angle",
              "desc": "angle in radian",
              "type": "float",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_angle": {
          "name": "get_angle",
          "shortDesc": "Get the angle of the arc with this id or `nil` if the object is not a arc.",
          "desc": "Get the angle of the arc with this id or `nil` if the object is not a arc. _Can only be used if this is Arc_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "angle in radian",
            "type": "float",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_angle": {
          "name": "set_angle",
          "shortDesc": "Set the angle of the arc with this id.",
          "desc": "Set the angle of the arc with this id. Does nothing if this object is not a arc. _Can only be used if this is Arc_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "angle": {
              "name": "angle",
              "desc": "angle in radian",
              "type": "float",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_vertices": {
          "name": "get_vertices",
          "shortDesc": "Get the vertices of the polygon with this id or `nil` if the object is not a polygon.",
          "desc": "Get the vertices of the polygon with this id or `nil` if the object is not a polygon. _Can only be used if this is Polygon_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "ScriptRenderTarget"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_vertices": {
          "name": "set_vertices",
          "shortDesc": "Set the vertices of the polygon with this id.",
          "desc": "Set the vertices of the polygon with this id. Does nothing if this object is not a polygon. _Can only be used if this is Polygon_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "vertices": {
              "name": "vertices",
              "type": {
                "value": [
                  "ScriptRenderTarget"
                ],
                "type": "Array"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_sprite": {
          "name": "get_sprite",
          "shortDesc": "Get the sprite of the sprite or light with this id or `nil` if the object is not a sprite or light.",
          "desc": "Get the sprite of the sprite or light with this id or `nil` if the object is not a sprite or light. _Can only be used if this is Sprite or  Light_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "SpritePath",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_sprite": {
          "name": "set_sprite",
          "shortDesc": "Set the sprite of the sprite or light with this id.",
          "desc": "Set the sprite of the sprite or light with this id. Does nothing if this object is not a sprite or light. _Can only be used if this is Sprite or  Light_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "sprite": {
              "name": "sprite",
              "type": "SpritePath",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_x_scale": {
          "name": "get_x_scale",
          "shortDesc": "Get the horizontal scale of the sprite or animation with this id or `nil` if the object is not a sprite or animation.",
          "desc": "Get the horizontal scale of the sprite or animation with this id or `nil` if the object is not a sprite or animation. _Can only be used if this is Sprite or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_x_scale": {
          "name": "set_x_scale",
          "shortDesc": "Set the horizontal scale of the sprite or animation with this id.",
          "desc": "Set the horizontal scale of the sprite or animation with this id. Does nothing if this object is not a sprite or animation. _Can only be used if this is Sprite or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "x_scale": {
              "name": "x_scale",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_y_scale": {
          "name": "get_y_scale",
          "shortDesc": "Get the vertical scale of the sprite or animation with this id or `nil` if the object is not a sprite or animation.",
          "desc": "Get the vertical scale of the sprite or animation with this id or `nil` if the object is not a sprite or animation. _Can only be used if this is Sprite or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_y_scale": {
          "name": "set_y_scale",
          "shortDesc": "Set the vertical scale of the sprite or animation with this id.",
          "desc": "Set the vertical scale of the sprite or animation with this id. Does nothing if this object is not a sprite or animation. _Can only be used if this is Sprite or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "y_scale": {
              "name": "y_scale",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_render_layer": {
          "name": "get_render_layer",
          "shortDesc": "Get the render layer of the sprite or animation with this id or `nil` if the object is not a sprite or animation.",
          "desc": "Get the render layer of the sprite or animation with this id or `nil` if the object is not a sprite or animation. _Can only be used if this is Sprite or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "RenderLayer",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_render_layer": {
          "name": "set_render_layer",
          "shortDesc": "Set the render layer of the sprite or animation with this id.",
          "desc": "Set the render layer of the sprite or animation with this id. Does nothing if this object is not a sprite or animation. _Can only be used if this is Sprite or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "render_layer": {
              "name": "render_layer",
              "type": "RenderLayer",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_orientation_target": {
          "name": "get_orientation_target",
          "shortDesc": "The object rotates so that it faces this target.",
          "desc": "The object rotates so that it faces this target. Note that `orientation` is still applied to the object.\n Get the orientation_target of the object with this id or `nil` if no target or if this object is not a polygon, sprite, or animation. _Can only be used if this is Polygon,  Sprite, or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "ScriptRenderTarget",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_orientation_target": {
          "name": "set_orientation_target",
          "shortDesc": "The object rotates so that it faces this target.",
          "desc": "The object rotates so that it faces this target. Note that `orientation` is still applied to the object.\n Set the orientation_target of the object with this id. Does nothing if this object is not a polygon, sprite, or animation.\n Set to `nil` if the object should not have an orientation_target. _Can only be used if this is Polygon,  Sprite, or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "orientation_target": {
              "name": "orientation_target",
              "type": {
                "value": [
                  "Position",
                  "LuaEntity"
                ],
                "type": "Union"
              },
              "optional": false
            },
            "orientation_target_offset": {
              "name": "orientation_target_offset",
              "type": "Vector",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_oriented_offset": {
          "name": "get_oriented_offset",
          "shortDesc": "Offsets the center of the sprite or animation if `orientation_target` is given.",
          "desc": "Offsets the center of the sprite or animation if `orientation_target` is given. This offset will rotate together with the sprite or animation.\n Get the oriented_offset of the sprite or animation with this id or `nil` if this object is not a sprite or animation. _Can only be used if this is Sprite or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "Vector",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_oriented_offset": {
          "name": "set_oriented_offset",
          "shortDesc": "Offsets the center of the sprite or animation if `orientation_target` is given.",
          "desc": "Offsets the center of the sprite or animation if `orientation_target` is given. This offset will rotate together with the sprite or animation.\n Set the oriented_offset of the sprite or animation with this id. Does nothing if this object is not a sprite or animation. _Can only be used if this is Sprite or  Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "oriented_offset": {
              "name": "oriented_offset",
              "type": "Vector",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_intensity": {
          "name": "get_intensity",
          "shortDesc": "Get the intensity of the light with this id or `nil` if the object is not a light.",
          "desc": "Get the intensity of the light with this id or `nil` if the object is not a light. _Can only be used if this is Light_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "float",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_intensity": {
          "name": "set_intensity",
          "shortDesc": "Set the intensity of the light with this id.",
          "desc": "Set the intensity of the light with this id. Does nothing if this object is not a light. _Can only be used if this is Light_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "intensity": {
              "name": "intensity",
              "type": "float",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_minimum_darkness": {
          "name": "get_minimum_darkness",
          "shortDesc": "Get the minimum darkness at which the light with this id is rendered or `nil` if the object is not a light.",
          "desc": "Get the minimum darkness at which the light with this id is rendered or `nil` if the object is not a light. _Can only be used if this is Light_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "float",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_minimum_darkness": {
          "name": "set_minimum_darkness",
          "shortDesc": "Set the minimum darkness at which the light with this id is rendered.",
          "desc": "Set the minimum darkness at which the light with this id is rendered. Does nothing if this object is not a light. _Can only be used if this is Light_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "minimum_darkness": {
              "name": "minimum_darkness",
              "type": "float",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_oriented": {
          "name": "get_oriented",
          "shortDesc": "Get if the light with this id is rendered has the same orientation as the target entity or `nil` if the object is not a light.",
          "desc": "Get if the light with this id is rendered has the same orientation as the target entity or `nil` if the object is not a light.\n Note that `orientation` is still applied to the sprite. _Can only be used if this is Light_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_oriented": {
          "name": "set_oriented",
          "shortDesc": "Set if the light with this id is rendered has the same orientation as the target entity.",
          "desc": "Set if the light with this id is rendered has the same orientation as the target entity. Does nothing if this object is not a light.\n Note that `orientation` is still applied to the sprite. _Can only be used if this is Light_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "oriented": {
              "name": "oriented",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_animation": {
          "name": "get_animation",
          "shortDesc": "Get the animation prototype name of the animation with this id or `nil` if the object is not an animation.",
          "desc": "Get the animation prototype name of the animation with this id or `nil` if the object is not an animation. _Can only be used if this is Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_animation": {
          "name": "set_animation",
          "shortDesc": "Set the animation prototype name of the animation with this id.",
          "desc": "Set the animation prototype name of the animation with this id. Does nothing if this object is not an animation. _Can only be used if this is Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "animation": {
              "name": "animation",
              "type": "string",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_animation_speed": {
          "name": "get_animation_speed",
          "shortDesc": "Get the animation speed of the animation with this id or `nil` if the object is not an animation.",
          "desc": "Get the animation speed of the animation with this id or `nil` if the object is not an animation. _Can only be used if this is Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Animation speed in frames per tick.",
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_animation_speed": {
          "name": "set_animation_speed",
          "shortDesc": "Set the animation speed of the animation with this id.",
          "desc": "Set the animation speed of the animation with this id. Does nothing if this object is not an animation. _Can only be used if this is Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "animation_speed": {
              "name": "animation_speed",
              "desc": "Animation speed in frames per tick.",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_animation_offset": {
          "name": "get_animation_offset",
          "shortDesc": "Get the animation offset of the animation with this id or `nil` if the object is not an animation.",
          "desc": "Get the animation offset of the animation with this id or `nil` if the object is not an animation. _Can only be used if this is Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Animation offset in frames.",
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_animation_offset": {
          "name": "set_animation_offset",
          "shortDesc": "Set the animation offset of the animation with this id.",
          "desc": "Set the animation offset of the animation with this id. Does nothing if this object is not an animation. _Can only be used if this is Animation_",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint64",
              "optional": false
            },
            "animation_offset": {
              "name": "animation_offset",
              "desc": "Animation offset in frames.",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "object_name": {
          "name": "object_name",
          "shortDesc": "This object's name.",
          "desc": "This object's name.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObject"
      ]
    },
    "LuaResourceCategoryPrototype": {
      "name": "LuaResourceCategoryPrototype",
      "desc": "Prototype of a resource category.",
      "url": "LuaResourceCategoryPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaRoboportControlBehavior": {
      "name": "LuaRoboportControlBehavior",
      "desc": "Control behavior for roboports.\n\n\n\n\n\n\n\n\n\n",
      "url": "LuaControlBehavior.html#LuaRoboportControlBehavior.brief",
      "attributes": {
        "read_logistics": {
          "name": "read_logistics",
          "shortDesc": "`true` if the roboport should report the logistics network content to the circuit network.",
          "desc": "`true` if the roboport should report the logistics network content to the circuit network.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "read_robot_stats": {
          "name": "read_robot_stats",
          "shortDesc": "`true` if the roboport should report the robot statistics to the circuit network.",
          "desc": "`true` if the roboport should report the robot statistics to the circuit network.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "available_logistic_output_signal": {
          "name": "available_logistic_output_signal",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "total_logistic_output_signal": {
          "name": "total_logistic_output_signal",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "available_construction_output_signal": {
          "name": "available_construction_output_signal",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "total_construction_output_signal": {
          "name": "total_construction_output_signal",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaSettings": {
      "name": "LuaSettings",
      "desc": "Runtime settings can be changed through console commands and by the mod that owns the settings.",
      "url": "LuaSettings.html",
      "attributes": {
        "get_player_settings": {
          "name": "get_player_settings",
          "shortDesc": "",
          "parameters": {
            "player": {
              "name": "player",
              "type": "PlayerSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "CustomDictionary",
                "string",
                "ModSetting"
              ]
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "object_name": {
          "name": "object_name",
          "shortDesc": "This object's name.",
          "desc": "This object's name.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "startup": {
          "name": "startup",
          "shortDesc": "",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "ModSetting"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "global": {
          "name": "global",
          "shortDesc": "",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "ModSetting"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "player": {
          "name": "player",
          "shortDesc": "",
          "type": {
            "value": [
              "CustomDictionary",
              "string",
              "ModSetting"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObject"
      ]
    },
    "LuaShortcutPrototype": {
      "name": "LuaShortcutPrototype",
      "desc": "Prototype of a shortcut.",
      "url": "LuaShortcutPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "action": {
          "name": "action",
          "shortDesc": "",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "item_to_spawn": {
          "name": "item_to_spawn",
          "shortDesc": "",
          "type": "LuaItemPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "technology_to_unlock": {
          "name": "technology_to_unlock",
          "shortDesc": "",
          "type": "LuaTechnologyPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "toggleable": {
          "name": "toggleable",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "associated_control_input": {
          "name": "associated_control_input",
          "shortDesc": "",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaStorageTankControlBehavior": {
      "name": "LuaStorageTankControlBehavior",
      "desc": "Control behavior for storage tanks.",
      "url": "LuaControlBehavior.html#LuaStorageTankControlBehavior.brief",
      "attributes": {},
      "parents": [
        "LuaControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaStyle": {
      "name": "LuaStyle",
      "desc": "Style of a GUI element. All of the attributes listed here may be `nil` if not available for a\n particular GUI element.",
      "url": "LuaStyle.html",
      "attributes": {
        "gui": {
          "name": "gui",
          "shortDesc": "Gui of the [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) of this style.",
          "desc": "Gui of the [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) of this style.",
          "type": "LuaGui",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "name": {
          "name": "name",
          "shortDesc": "Name of this style.",
          "desc": "Name of this style.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "minimal_width": {
          "name": "minimal_width",
          "shortDesc": "Minimal width ensures, that the widget will never be smaller than than that size.",
          "desc": "Minimal width ensures, that the widget will never be smaller than than that size. It can't be squashed to be smaller.",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "maximal_width": {
          "name": "maximal_width",
          "shortDesc": "Maximal width ensures, that the widget will never be bigger than than that size.",
          "desc": "Maximal width ensures, that the widget will never be bigger than than that size. It can't be stretched to be bigger.",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "minimal_height": {
          "name": "minimal_height",
          "shortDesc": "Minimal height ensures, that the widget will never be smaller than than that size.",
          "desc": "Minimal height ensures, that the widget will never be smaller than than that size. It can't be squashed to be smaller.",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "maximal_height": {
          "name": "maximal_height",
          "shortDesc": "Maximal height ensures, that the widget will never be bigger than than that size.",
          "desc": "Maximal height ensures, that the widget will never be bigger than than that size. It can't be stretched to be bigger.",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "natural_width": {
          "name": "natural_width",
          "shortDesc": "Natural width specifies the width of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger size.",
          "desc": "Natural width specifies the width of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger size.",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "natural_height": {
          "name": "natural_height",
          "shortDesc": "Natural height specifies the height of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger size.",
          "desc": "Natural height specifies the height of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger size.",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "top_padding": {
          "name": "top_padding",
          "shortDesc": "",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "right_padding": {
          "name": "right_padding",
          "shortDesc": "",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "bottom_padding": {
          "name": "bottom_padding",
          "shortDesc": "",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "left_padding": {
          "name": "left_padding",
          "shortDesc": "",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "top_margin": {
          "name": "top_margin",
          "shortDesc": "",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "right_margin": {
          "name": "right_margin",
          "shortDesc": "",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "bottom_margin": {
          "name": "bottom_margin",
          "shortDesc": "",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "left_margin": {
          "name": "left_margin",
          "shortDesc": "",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "horizontal_align": {
          "name": "horizontal_align",
          "shortDesc": "Horizontal align of the inner content of the widget, possible values are \"left\", \"center\" or \"right\"",
          "desc": "Horizontal align of the inner content of the widget, possible values are \"left\", \"center\" or \"right\"",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "vertical_align": {
          "name": "vertical_align",
          "shortDesc": "Vertical align of the inner content of the widget, possible values are \"top\", \"center\" or \"bottom\"",
          "desc": "Vertical align of the inner content of the widget, possible values are \"top\", \"center\" or \"bottom\"",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "font_color": {
          "name": "font_color",
          "shortDesc": "",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "font": {
          "name": "font",
          "shortDesc": "",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "top_cell_padding": {
          "name": "top_cell_padding",
          "shortDesc": "Space between the table cell contents top and border.",
          "desc": "Space between the table cell contents top and border. _Can only be used if this is LuaTableStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "right_cell_padding": {
          "name": "right_cell_padding",
          "shortDesc": "Space between the table cell contents right and border.",
          "desc": "Space between the table cell contents right and border. _Can only be used if this is LuaTableStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "bottom_cell_padding": {
          "name": "bottom_cell_padding",
          "shortDesc": "Space between the table cell contents bottom and border.",
          "desc": "Space between the table cell contents bottom and border. _Can only be used if this is LuaTableStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "left_cell_padding": {
          "name": "left_cell_padding",
          "shortDesc": "Space between the table cell contents left and border.",
          "desc": "Space between the table cell contents left and border. _Can only be used if this is LuaTableStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "horizontally_stretchable": {
          "name": "horizontally_stretchable",
          "shortDesc": "If the GUI element stretches its size horizontally to other elements.",
          "desc": "If the GUI element stretches its size horizontally to other elements.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "vertically_stretchable": {
          "name": "vertically_stretchable",
          "shortDesc": "If the GUI element stretches its size vertically to other elements.",
          "desc": "If the GUI element stretches its size vertically to other elements.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "horizontally_squashable": {
          "name": "horizontally_squashable",
          "shortDesc": "If the GUI element can be squashed (by maximal width of some parent element) horizontally.",
          "desc": "If the GUI element can be squashed (by maximal width of some parent element) horizontally.\n This is mainly meant to be used for scroll-pane The default value is false.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "vertically_squashable": {
          "name": "vertically_squashable",
          "shortDesc": "If the GUI element can be squashed (by maximal height of some parent element) vertically.",
          "desc": "If the GUI element can be squashed (by maximal height of some parent element) vertically.\n This is mainly meant to be used for scroll-pane The default (parent) value for scroll pane is true, false otherwise.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "rich_text_setting": {
          "name": "rich_text_setting",
          "shortDesc": "How this GUI element handles rich text.",
          "desc": "How this GUI element handles rich text. _Can only be used if this is LuaLabelStyle,  LuaTextBoxStyle, or  LuaTextFieldStyle_",
          "type": "defines.rich_text_setting",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "hovered_font_color": {
          "name": "hovered_font_color",
          "shortDesc": "",
          "desc": "_Can only be used if this is LuaButtonStyle_",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "clicked_font_color": {
          "name": "clicked_font_color",
          "shortDesc": "",
          "desc": "_Can only be used if this is LuaButtonStyle_",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "disabled_font_color": {
          "name": "disabled_font_color",
          "shortDesc": "",
          "desc": "_Can only be used if this is LuaButtonStyle or  LuaTabStyle_",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "pie_progress_color": {
          "name": "pie_progress_color",
          "shortDesc": "",
          "desc": "_Can only be used if this is LuaButtonStyle_",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "clicked_vertical_offset": {
          "name": "clicked_vertical_offset",
          "shortDesc": "",
          "desc": "_Can only be used if this is LuaButtonStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "selected_font_color": {
          "name": "selected_font_color",
          "shortDesc": "",
          "desc": "_Can only be used if this is LuaButtonStyle_",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "selected_hovered_font_color": {
          "name": "selected_hovered_font_color",
          "shortDesc": "",
          "desc": "_Can only be used if this is LuaButtonStyle_",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "selected_clicked_font_color": {
          "name": "selected_clicked_font_color",
          "shortDesc": "",
          "desc": "_Can only be used if this is LuaButtonStyle_",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "strikethrough_color": {
          "name": "strikethrough_color",
          "shortDesc": "",
          "desc": "_Can only be used if this is LuaButtonStyle_",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "horizontal_spacing": {
          "name": "horizontal_spacing",
          "shortDesc": "Horizontal space between individual cells.",
          "desc": "Horizontal space between individual cells. _Can only be used if this is LuaTableStyle,  LuaFlowStyle, or  LuaHorizontalFlow_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "vertical_spacing": {
          "name": "vertical_spacing",
          "shortDesc": "Vertical space between individual cells.",
          "desc": "Vertical space between individual cells. _Can only be used if this is LuaTableStyle,  LuaFlowStyle,  LuaVerticalFlowStyle, or  LuaTabbedPaneStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "use_header_filler": {
          "name": "use_header_filler",
          "shortDesc": "",
          "desc": "_Can only be used if this is LuaFrameStyle_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "color": {
          "name": "color",
          "shortDesc": "",
          "desc": "_Can only be used if this is LuaProgressBarStyle_",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "column_alignments": {
          "name": "column_alignments",
          "shortDesc": "Alignment for every column of this table.",
          "desc": "Alignment for every column of this table. Even though this property is marked as read-only, the alignment can be changed by indexing this CustomArray, like so: Example `table_element.style.column_alignments[1]\u00a0=\u00a0\"center\"`",
          "type": {
            "value": [
              "CustomArray",
              "of",
              "Alignment"
            ]
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "single_line": {
          "name": "single_line",
          "shortDesc": "",
          "desc": "_Can only be used if this is LabelStyle_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "extra_top_padding_when_activated": {
          "name": "extra_top_padding_when_activated",
          "shortDesc": "",
          "desc": "_Can only be used if this is ScrollPaneStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "extra_bottom_padding_when_activated": {
          "name": "extra_bottom_padding_when_activated",
          "shortDesc": "",
          "desc": "_Can only be used if this is ScrollPaneStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "extra_left_padding_when_activated": {
          "name": "extra_left_padding_when_activated",
          "shortDesc": "",
          "desc": "_Can only be used if this is ScrollPaneStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "extra_right_padding_when_activated": {
          "name": "extra_right_padding_when_activated",
          "shortDesc": "",
          "desc": "_Can only be used if this is ScrollPaneStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "extra_top_margin_when_activated": {
          "name": "extra_top_margin_when_activated",
          "shortDesc": "",
          "desc": "_Can only be used if this is ScrollPaneStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "extra_bottom_margin_when_activated": {
          "name": "extra_bottom_margin_when_activated",
          "shortDesc": "",
          "desc": "_Can only be used if this is ScrollPaneStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "extra_left_margin_when_activated": {
          "name": "extra_left_margin_when_activated",
          "shortDesc": "",
          "desc": "_Can only be used if this is ScrollPaneStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "extra_right_margin_when_activated": {
          "name": "extra_right_margin_when_activated",
          "shortDesc": "",
          "desc": "_Can only be used if this is ScrollPaneStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "stretch_image_to_widget_size": {
          "name": "stretch_image_to_widget_size",
          "shortDesc": "",
          "desc": "_Can only be used if this is ImageStyle_",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "badge_font": {
          "name": "badge_font",
          "shortDesc": "",
          "desc": "_Can only be used if this is TabStyle_",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "badge_horizontal_spacing": {
          "name": "badge_horizontal_spacing",
          "shortDesc": "",
          "desc": "_Can only be used if this is TabStyle_",
          "type": "int",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "default_badge_font_color": {
          "name": "default_badge_font_color",
          "shortDesc": "",
          "desc": "_Can only be used if this is TabStyle_",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "selected_badge_font_color": {
          "name": "selected_badge_font_color",
          "shortDesc": "",
          "desc": "_Can only be used if this is TabStyle_",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "disabled_badge_font_color": {
          "name": "disabled_badge_font_color",
          "shortDesc": "",
          "desc": "_Can only be used if this is TabStyle_",
          "type": "Color",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "width": {
          "name": "width",
          "shortDesc": "Sets both minimal and maximal width to the given value.",
          "desc": "Sets both minimal and maximal width to the given value.",
          "type": "int",
          "mode": "[W]",
          "attribute_type": "field"
        },
        "height": {
          "name": "height",
          "shortDesc": "Sets both minimal and maximal height to the given value.",
          "desc": "Sets both minimal and maximal height to the given value.",
          "type": "int",
          "mode": "[W]",
          "attribute_type": "field"
        },
        "size": {
          "name": "size",
          "shortDesc": "Sets both width and height to the given value.",
          "desc": "Sets both width and height to the given value.\n Also accepts an array with two values, setting width to the first and height to the second one.",
          "type": {
            "value": [
              "int",
              {
                "value": [
                  "int"
                ],
                "type": "Array"
              }
            ],
            "type": "Union"
          },
          "mode": "[W]",
          "attribute_type": "field"
        },
        "padding": {
          "name": "padding",
          "shortDesc": "Sets top/right/bottom/left paddings to this value.",
          "desc": "Sets top/right/bottom/left paddings to this value.\n An array with two values sets top/bottom padding to the first value and left/right padding to the second value.\n An array with four values sets top, right, bottom, left padding respectively.",
          "type": {
            "value": [
              "int",
              {
                "value": [
                  "int"
                ],
                "type": "Array"
              }
            ],
            "type": "Union"
          },
          "mode": "[W]",
          "attribute_type": "field"
        },
        "margin": {
          "name": "margin",
          "shortDesc": "Sets top/right/bottom/left margins to this value.",
          "desc": "Sets top/right/bottom/left margins to this value.\n An array with two values sets top/bottom margin to the first value and left/right margin to the second value.\n An array with four values sets top, right, bottom, left margin respectively.",
          "type": {
            "value": [
              "int",
              {
                "value": [
                  "int"
                ],
                "type": "Array"
              }
            ],
            "type": "Union"
          },
          "mode": "[W]",
          "attribute_type": "field"
        },
        "cell_padding": {
          "name": "cell_padding",
          "shortDesc": "Space between the table cell contents and border.",
          "desc": "Space between the table cell contents and border. Sets top/right/bottom/left cell paddings to this value. _Can only be used if this is LuaTableStyle_",
          "type": "int",
          "mode": "[W]",
          "attribute_type": "field"
        },
        "extra_padding_when_activated": {
          "name": "extra_padding_when_activated",
          "shortDesc": "Sets extra_top/right/bottom/left_padding_when_actived to this value.",
          "desc": "Sets extra_top/right/bottom/left_padding_when_actived to this value.\n An array with two values sets top/bottom padding to the first value and left/right padding to the second value.\n An array with four values sets top, right, bottom, left padding respectively.",
          "type": {
            "value": [
              "int",
              {
                "value": [
                  "int"
                ],
                "type": "Array"
              }
            ],
            "type": "Union"
          },
          "mode": "[W]",
          "attribute_type": "field"
        },
        "extra_margin_when_activated": {
          "name": "extra_margin_when_activated",
          "shortDesc": "Sets extra_top/right/bottom/left_margin_when_activated to this value.",
          "desc": "Sets extra_top/right/bottom/left_margin_when_activated to this value.\n An array with two values sets top/bottom margin to the first value and left/right margin to the second value.\n An array with four values sets top, right, bottom, left margin respectively.",
          "type": {
            "value": [
              "int",
              {
                "value": [
                  "int"
                ],
                "type": "Array"
              }
            ],
            "type": "Union"
          },
          "mode": "[W]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaSurface": {
      "name": "LuaSurface",
      "desc": "A \"domain\" of the world. Surfaces can only be created and deleted through the API. Surfaces\n are uniquely identified by their name. Every game contains at least the surface \"nauvis\".",
      "url": "LuaSurface.html",
      "attributes": {
        "get_pollution": {
          "name": "get_pollution",
          "shortDesc": "Get the pollution for a given position.",
          "desc": "Get the pollution for a given position.",
          "parameters": {
            "position": {
              "name": "position",
              "type": "Position",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "can_place_entity": {
          "name": "can_place_entity",
          "shortDesc": "Check for collisions with terrain or other entities.",
          "desc": "Check for collisions with terrain or other entities.",
          "parameters": {
            "luaSurfacecan_place_entity_param": {
              "name": "luaSurfacecan_place_entity_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacecan_place_entity_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacecan_place_entity_param",
              "attributes": {
                "name": {
                  "name": "name",
                  "desc": "Name of the entity to check",
                  "type": "string",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Where the entity would be placed",
                  "type": "Position",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "desc": "Direction the entity would be placed",
                  "type": "defines.direction",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "The force that would place the entity. If not specified, the enemy force is assumed.",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "build_check_type": {
                  "name": "build_check_type",
                  "desc": "What check type should be done.",
                  "type": "defines.build_check_type",
                  "optional": false
                },
                "forced": {
                  "name": "forced",
                  "desc": "If defines.build_check_type is \"ghost_place\" and this is true things that can be marked for deconstruction are ignored.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "can_fast_replace": {
          "name": "can_fast_replace",
          "shortDesc": "If there exists an entity at the given location that can be fast-replaced with the given entity parameters.",
          "desc": "If there exists an entity at the given location that can be fast-replaced with the given entity parameters.",
          "parameters": {
            "luaSurfacecan_fast_replace_param": {
              "name": "luaSurfacecan_fast_replace_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacecan_fast_replace_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacecan_fast_replace_param",
              "attributes": {
                "name": {
                  "name": "name",
                  "desc": "Name of the entity to check",
                  "type": "string",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Where the entity would be placed",
                  "type": "Position",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "desc": "Direction the entity would be placed",
                  "type": "defines.direction",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "The force that would place the entity.  If not specified, the enemy force is assumed.",
                  "type": "ForceSpecification",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "find_entity": {
          "name": "find_entity",
          "shortDesc": "Find a specific entity at a specific position.",
          "desc": "Find a specific entity at a specific position.",
          "parameters": {
            "entity": {
              "name": "entity",
              "desc": "Entity to look for",
              "type": "string",
              "optional": false
            },
            "position": {
              "name": "position",
              "desc": "Coordinates to look at",
              "type": "Position",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Will be `nil` if no such entity is found.",
            "type": "LuaEntity",
            "optional": false
          },
          "attribute_type": "function"
        },
        "find_entities": {
          "name": "find_entities",
          "shortDesc": "Find entities in a given area.",
          "desc": "Find entities in a given area. If no area is given all entities on the surface are returned.",
          "parameters": {
            "area": {
              "name": "area",
              "type": "BoundingBox",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "find_entities_filtered": {
          "name": "find_entities_filtered",
          "shortDesc": "Find entities of given type or name in a given area.",
          "desc": "Find entities of given type or name in a given area. If no filters ( `name` , `type` , `force` , etc.) are given, returns all entities in the search area.\n If multiple filters are specified, returns only entities matching all given filters. If no area or position are given, then the entire surface is searched.\n If position is given, returns entities colliding with that position (i.e the given position is within the entity's collision box).\n If position and radius are given, returns entities in that radius of the position.\n If area is specified, returns entities colliding with that area.",
          "parameters": {
            "luaSurfacefind_entities_filtered_param": {
              "name": "luaSurfacefind_entities_filtered_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacefind_entities_filtered_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacefind_entities_filtered_param",
              "attributes": {
                "area": {
                  "name": "area",
                  "type": "BoundingBox",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Has precedence over area field.",
                  "type": "Position",
                  "optional": false
                },
                "radius": {
                  "name": "radius",
                  "desc": "If given with position, will return all entities within the radius of the position.",
                  "type": "double",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": {
                    "value": [
                      "string",
                      {
                        "value": [
                          "string"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": {
                    "value": [
                      "string",
                      {
                        "value": [
                          "string"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "ghost_name": {
                  "name": "ghost_name",
                  "type": {
                    "value": [
                      "string",
                      {
                        "value": [
                          "string"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "ghost_type": {
                  "name": "ghost_type",
                  "type": {
                    "value": [
                      "string",
                      {
                        "value": [
                          "string"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "type": {
                    "value": [
                      "defines.direction",
                      {
                        "value": [
                          "defines.direction"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "collision_mask": {
                  "name": "collision_mask",
                  "type": {
                    "value": [
                      "CollisionMaskLayer",
                      {
                        "value": [
                          "CollisionMaskLayer"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "type": {
                    "value": [
                      "ForceSpecification",
                      {
                        "value": [
                          "ForceSpecification"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "to_be_deconstructed": {
                  "name": "to_be_deconstructed",
                  "type": "boolean",
                  "optional": false
                },
                "to_be_upgraded": {
                  "name": "to_be_upgraded",
                  "type": "boolean",
                  "optional": false
                },
                "limit": {
                  "name": "limit",
                  "type": "uint",
                  "optional": false
                },
                "invert": {
                  "name": "invert",
                  "desc": "If the filters should be inverted. These filters are: name, type, ghost_name, ghost_type, direction, collision_mask, force.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "find_tiles_filtered": {
          "name": "find_tiles_filtered",
          "shortDesc": "Find tiles of a given name in a given area.",
          "desc": "Find tiles of a given name in a given area. If no filters are given returns all tiles in the search area. If no area or position and radius is given, then the entire surface is searched.\n If position and radius are given, only tiles within the radius of the position are included.",
          "parameters": {
            "luaSurfacefind_tiles_filtered_param": {
              "name": "luaSurfacefind_tiles_filtered_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacefind_tiles_filtered_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaTile"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacefind_tiles_filtered_param",
              "attributes": {
                "area": {
                  "name": "area",
                  "type": "BoundingBox",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Ignored if not given with radius.",
                  "type": "Position",
                  "optional": false
                },
                "radius": {
                  "name": "radius",
                  "desc": "If given with position, will return all entities within the radius of the position.",
                  "type": "double",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": {
                    "value": [
                      "string",
                      {
                        "value": [
                          "string"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "limit": {
                  "name": "limit",
                  "type": "uint",
                  "optional": false
                },
                "has_hidden_tile": {
                  "name": "has_hidden_tile",
                  "type": "boolean",
                  "optional": false
                },
                "collision_mask": {
                  "name": "collision_mask",
                  "type": {
                    "value": [
                      "CollisionMaskLayer",
                      {
                        "value": [
                          "CollisionMaskLayer"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "count_entities_filtered": {
          "name": "count_entities_filtered",
          "shortDesc": "Count entities of given type or name in a given area.",
          "desc": "Count entities of given type or name in a given area. Works just like [LuaSurface::find_entities_filtered](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.find_entities_filtered) , except this only returns the count. As it doesn't\n construct all the wrapper objects, this is more efficient if one is only interested in the\n number of entities. If no area or position are given, then the entire surface is searched.\n If position is given, returns entities colliding with that position (i.e the given position is within the entity's collision box).\n If position and radius are given, returns entities in that radius of the position.\n If area is specified, returns entities colliding with that area.",
          "parameters": {
            "luaSurfacecount_entities_filtered_param": {
              "name": "luaSurfacecount_entities_filtered_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacecount_entities_filtered_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacecount_entities_filtered_param",
              "attributes": {
                "area": {
                  "name": "area",
                  "type": "BoundingBox",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "type": "Position",
                  "optional": false
                },
                "radius": {
                  "name": "radius",
                  "desc": "If given with position, will count all entities within the radius of the position.",
                  "type": "double",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": {
                    "value": [
                      "string",
                      {
                        "value": [
                          "string"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": {
                    "value": [
                      "string",
                      {
                        "value": [
                          "string"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "ghost_name": {
                  "name": "ghost_name",
                  "type": {
                    "value": [
                      "string",
                      {
                        "value": [
                          "string"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "ghost_type": {
                  "name": "ghost_type",
                  "type": {
                    "value": [
                      "string",
                      {
                        "value": [
                          "string"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "type": {
                    "value": [
                      "defines.direction",
                      {
                        "value": [
                          "defines.direction"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "collision_mask": {
                  "name": "collision_mask",
                  "type": {
                    "value": [
                      "CollisionMaskLayer",
                      {
                        "value": [
                          "CollisionMaskLayer"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "type": {
                    "value": [
                      "ForceSpecification",
                      {
                        "value": [
                          "ForceSpecification"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "to_be_deconstructed": {
                  "name": "to_be_deconstructed",
                  "type": "boolean",
                  "optional": false
                },
                "to_be_upgraded": {
                  "name": "to_be_upgraded",
                  "type": "boolean",
                  "optional": false
                },
                "limit": {
                  "name": "limit",
                  "type": "uint",
                  "optional": false
                },
                "invert": {
                  "name": "invert",
                  "desc": "If the filters should be inverted. These filters are: name, type, ghost_name, ghost_type, direction, collision_mask, force.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "count_tiles_filtered": {
          "name": "count_tiles_filtered",
          "shortDesc": "Count tiles of a given name in a given area.",
          "desc": "Count tiles of a given name in a given area. Works just like [LuaSurface::find_tiles_filtered](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.find_tiles_filtered) , except this only returns the count. As it doesn't\n construct all the wrapper objects, this is more efficient if one is only interested in the\n number of tiles. If no area or position and radius is given, then the entire surface is searched.\n If position and radius are given, only tiles within the radius of the position are included.",
          "parameters": {
            "luaSurfacecount_tiles_filtered_param": {
              "name": "luaSurfacecount_tiles_filtered_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacecount_tiles_filtered_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacecount_tiles_filtered_param",
              "attributes": {
                "area": {
                  "name": "area",
                  "type": "BoundingBox",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Ignored if not given with radius.",
                  "type": "Position",
                  "optional": false
                },
                "radius": {
                  "name": "radius",
                  "desc": "If given with position, will return all entities within the radius of the position.",
                  "type": "double",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": {
                    "value": [
                      "string",
                      {
                        "value": [
                          "string"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "limit": {
                  "name": "limit",
                  "type": "uint",
                  "optional": false
                },
                "has_hidden_tile": {
                  "name": "has_hidden_tile",
                  "type": "boolean",
                  "optional": false
                },
                "collision_mask": {
                  "name": "collision_mask",
                  "type": {
                    "value": [
                      "CollisionMaskLayer",
                      {
                        "value": [
                          "CollisionMaskLayer"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "find_non_colliding_position": {
          "name": "find_non_colliding_position",
          "shortDesc": "Find a non-colliding position within a given radius.",
          "desc": "Find a non-colliding position within a given radius.",
          "parameters": {
            "name": {
              "name": "name",
              "desc": "Prototype name of the entity to find a position for. (The bounding  box for the collision checking is taken from this prototype.)",
              "type": "string",
              "optional": false
            },
            "center": {
              "name": "center",
              "desc": "Center of the search area.",
              "type": "Position",
              "optional": false
            },
            "radius": {
              "name": "radius",
              "desc": "Max distance from center to search in. 0 for infinitely-large  search area.",
              "type": "double",
              "optional": false
            },
            "precision": {
              "name": "precision",
              "desc": "The step length from the given position as it searches, in tiles. Minimum value is 0.01.",
              "type": "double",
              "optional": false
            },
            "force_to_tile_center": {
              "name": "force_to_tile_center",
              "desc": "Will only check tile centers. This can be useful when your intent is to place a building at the resulting position,  as they must generally be placed at tile centers. Default false.",
              "type": "boolean",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The non-colliding position. May be `nil` if no suitable position was found.",
            "type": "Position",
            "optional": false
          },
          "attribute_type": "function"
        },
        "find_non_colliding_position_in_box": {
          "name": "find_non_colliding_position_in_box",
          "shortDesc": "Find a non-colliding position within a given rectangle.",
          "desc": "Find a non-colliding position within a given rectangle.",
          "parameters": {
            "name": {
              "name": "name",
              "desc": "Prototype name of the entity to find a position for. (The bounding  box for the collision checking is taken from this prototype.)",
              "type": "string",
              "optional": false
            },
            "search_space": {
              "name": "search_space",
              "desc": "The rectangle to search inside.",
              "type": "BoundingBox",
              "optional": false
            },
            "precision": {
              "name": "precision",
              "desc": "The step length from the given position as it searches, in tiles. Minimum value is 0.01.",
              "type": "double",
              "optional": false
            },
            "force_to_tile_center": {
              "name": "force_to_tile_center",
              "desc": "Will only check tile centers. This can be useful when your intent is to place a building at the resulting position,  as they must generally be placed at tile centers. Default false.",
              "type": "boolean",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The non-colliding position. May be `nil` if no suitable position was found.",
            "type": "Position",
            "optional": false
          },
          "attribute_type": "function"
        },
        "spill_item_stack": {
          "name": "spill_item_stack",
          "shortDesc": "Spill items on the ground centered at a given location.",
          "desc": "Spill items on the ground centered at a given location.",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "Center of the spillage",
              "type": "Position",
              "optional": false
            },
            "items": {
              "name": "items",
              "desc": "Items to spill",
              "type": "ItemStackSpecification",
              "optional": false
            },
            "enable_looted": {
              "name": "enable_looted",
              "desc": "When true, each created item will be flagged with the LuaEntity::to_be_looted flag.",
              "type": "boolean",
              "optional": false
            },
            "force": {
              "name": "force",
              "desc": "When provided (and not nil ) the items will be marked for deconstruction by this force.",
              "type": {
                "value": [
                  "LuaForce",
                  "string"
                ],
                "type": "Union"
              },
              "optional": false
            },
            "allow_belts": {
              "name": "allow_belts",
              "desc": "Whether items can be spilled onto belts. Defaults to true .",
              "type": "boolean",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The created item-on-ground entities.",
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "find_enemy_units": {
          "name": "find_enemy_units",
          "shortDesc": "Find enemy units (entities with type \"unit\") of a given force within an area.",
          "desc": "Find enemy units (entities with type \"unit\") of a given force within an area.",
          "parameters": {
            "center": {
              "name": "center",
              "desc": "Center of the search area",
              "type": "Position",
              "optional": false
            },
            "radius": {
              "name": "radius",
              "desc": "Radius of the circular search area",
              "type": "double",
              "optional": false
            },
            "force": {
              "name": "force",
              "desc": "Force to find enemies of. If not given,  uses the player force.",
              "type": {
                "value": [
                  "LuaForce",
                  "string"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "find_units": {
          "name": "find_units",
          "shortDesc": "Find units (entities with type \"unit\") of a given force and force condition within a given area.",
          "desc": "Find units (entities with type \"unit\") of a given force and force condition within a given area.",
          "parameters": {
            "luaSurfacefind_units_param": {
              "name": "luaSurfacefind_units_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacefind_units_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacefind_units_param",
              "attributes": {
                "area": {
                  "name": "area",
                  "desc": "Box to find units within.",
                  "type": "BoundingBox",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "Force performing the search.",
                  "type": {
                    "value": [
                      "LuaForce",
                      "string"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "condition": {
                  "name": "condition",
                  "desc": "Only forces which meet the condition will be included in the search.",
                  "type": "ForceCondition",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "find_nearest_enemy": {
          "name": "find_nearest_enemy",
          "shortDesc": "Find the enemy entity-with-force ( [military entity](https://lua-api.factorio.com/latest/https://wiki.factorio.com/Military_units_and_structures) ) closest to the given position.",
          "desc": "Find the enemy entity-with-force ( [military entity](https://lua-api.factorio.com/latest/https://wiki.factorio.com/Military_units_and_structures) ) closest to the given position.",
          "parameters": {
            "luaSurfacefind_nearest_enemy_param": {
              "name": "luaSurfacefind_nearest_enemy_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacefind_nearest_enemy_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The nearest enemy entity-with-force or `nil` if no enemy could be found within the\n   given area.",
            "type": "LuaEntity",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacefind_nearest_enemy_param",
              "attributes": {
                "position": {
                  "name": "position",
                  "desc": "Center of the search area.",
                  "type": "Position",
                  "optional": false
                },
                "max_distance": {
                  "name": "max_distance",
                  "desc": "Radius of the circular search area.",
                  "type": "double",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "The force the result will be an enemy of.  Uses the player force if not specified.",
                  "type": "ForceSpecification",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "set_multi_command": {
          "name": "set_multi_command",
          "shortDesc": "Give a command to multiple units.",
          "desc": "Give a command to multiple units. This will automatically select suitable units for the\n task.",
          "parameters": {
            "luaSurfaceset_multi_command_param": {
              "name": "luaSurfaceset_multi_command_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfaceset_multi_command_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Number of units actually sent. May be less than `count` if not enough units were\n   available.",
            "type": "uint",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfaceset_multi_command_param",
              "attributes": {
                "command": {
                  "name": "command",
                  "type": "Command",
                  "optional": false
                },
                "unit_count": {
                  "name": "unit_count",
                  "desc": "Number of units to give the command to.",
                  "type": "uint",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "Force of the units this command is to be given to.  If not specified, uses the enemy force.",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "unit_search_distance": {
                  "name": "unit_search_distance",
                  "desc": "Radius to search for units. The search area is centered on  the destination of the command.",
                  "type": "uint",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "create_entity": {
          "name": "create_entity",
          "shortDesc": "Create an entity on this surface.",
          "desc": "Create an entity on this surface.",
          "parameters": {
            "luaSurfacecreate_entity_param": {
              "name": "luaSurfacecreate_entity_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacecreate_entity_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The created entity or `nil` if the creation failed.",
            "type": "LuaEntity",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacecreate_entity_param",
              "attributes": {
                "name": {
                  "name": "name",
                  "desc": "The entity prototype name to create.",
                  "type": "string",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Where to create the entity.",
                  "type": "Position",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "desc": "Desired orientation of the entity after creation.",
                  "type": "defines.direction",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "Force of the entity, default is enemy.",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "target": {
                  "name": "target",
                  "desc": "Entity with health for the new entity to target.",
                  "type": "LuaEntity",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "desc": "Source entity. Used for beams.",
                  "type": "LuaEntity",
                  "optional": false
                },
                "fast_replace": {
                  "name": "fast_replace",
                  "desc": "If true, building will attempt to simulate fast-replace building.",
                  "type": "boolean",
                  "optional": false
                },
                "player": {
                  "name": "player",
                  "desc": "If given set the last_user to this player. If fast_replace is true simulate fast replace using this player.",
                  "type": "PlayerSpecification",
                  "optional": false
                },
                "spill": {
                  "name": "spill",
                  "desc": "If false while fast_replace is true and player is nil any items from fast-replacing will be deleted instead of dropped on the ground.",
                  "type": "boolean",
                  "optional": false
                },
                "raise_built": {
                  "name": "raise_built",
                  "desc": "If true; defines.events.script_raised_built will be fired on successful entity creation.",
                  "type": "boolean",
                  "optional": false
                },
                "create_build_effect_smoke": {
                  "name": "create_build_effect_smoke",
                  "desc": "If false, the building effect smoke will not be shown around the new entity.",
                  "type": "boolean",
                  "optional": false
                },
                "spawn_decorations": {
                  "name": "spawn_decorations",
                  "desc": "If true, entity types that have spawn_decorations property will apply triggers defined in the property.",
                  "type": "boolean",
                  "optional": false
                },
                "move_stuck_players": {
                  "name": "move_stuck_players",
                  "desc": "If true, any characters that are in the way of the entity are teleported out of the way.",
                  "type": "boolean",
                  "optional": false
                },
                "item": {
                  "name": "item",
                  "desc": "If provided, the entity will attempt to pull stored values from this item (for example; creating a spidertron from a previously named and mined spidertron)",
                  "type": "LuaItemStack",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "create_trivial_smoke": {
          "name": "create_trivial_smoke",
          "shortDesc": "",
          "parameters": {
            "luaSurfacecreate_trivial_smoke_param": {
              "name": "luaSurfacecreate_trivial_smoke_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacecreate_trivial_smoke_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacecreate_trivial_smoke_param",
              "attributes": {
                "name": {
                  "name": "name",
                  "desc": "The smoke prototype name to create.",
                  "type": "string",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Where to create the smoke.",
                  "type": "Position",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "create_particle": {
          "name": "create_particle",
          "shortDesc": "Creates a particle at the given location",
          "desc": "Creates a particle at the given location",
          "parameters": {
            "luaSurfacecreate_particle_param": {
              "name": "luaSurfacecreate_particle_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacecreate_particle_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacecreate_particle_param",
              "attributes": {
                "name": {
                  "name": "name",
                  "desc": "The particle name.",
                  "type": "string",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Where to create the particle.",
                  "type": "Position",
                  "optional": false
                },
                "movement": {
                  "name": "movement",
                  "type": "Vector",
                  "optional": false
                },
                "height": {
                  "name": "height",
                  "type": "float",
                  "optional": false
                },
                "vertical_speed": {
                  "name": "vertical_speed",
                  "type": "float",
                  "optional": false
                },
                "frame_speed": {
                  "name": "frame_speed",
                  "type": "float",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "create_unit_group": {
          "name": "create_unit_group",
          "shortDesc": "Create a new unit group at a given position.",
          "desc": "Create a new unit group at a given position.",
          "parameters": {
            "luaSurfacecreate_unit_group_param": {
              "name": "luaSurfacecreate_unit_group_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacecreate_unit_group_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaUnitGroup",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacecreate_unit_group_param",
              "attributes": {
                "position": {
                  "name": "position",
                  "desc": "Initial position of the new unit group.",
                  "type": "Position",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "Force of the new unit group. Defaults to \"enemy\" .",
                  "type": "ForceSpecification",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "build_enemy_base": {
          "name": "build_enemy_base",
          "shortDesc": "Send a group to build a new base.",
          "desc": "Send a group to build a new base.",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "Location of the new base.",
              "type": "Position",
              "optional": false
            },
            "unit_count": {
              "name": "unit_count",
              "desc": "Number of biters to send for the base-building task.",
              "type": "uint",
              "optional": false
            },
            "force": {
              "name": "force",
              "desc": "Force the new base will belong to. Defaults to enemy.",
              "type": "ForceSpecification",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_tile": {
          "name": "get_tile",
          "shortDesc": "Get the tile at a given position.",
          "desc": "Get the tile at a given position.",
          "parameters": {
            "x": {
              "name": "x",
              "type": "int",
              "optional": false
            },
            "y": {
              "name": "y",
              "type": "int",
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaTile",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_tiles": {
          "name": "set_tiles",
          "shortDesc": "Set tiles at specified locations.",
          "desc": "Set tiles at specified locations. Automatically corrects the edges around modified tiles.",
          "parameters": {
            "tiles": {
              "name": "tiles",
              "desc": "Each Tile is a table",
              "type": {
                "value": [
                  "Tile"
                ],
                "type": "Array"
              },
              "optional": false
            },
            "correct_tiles": {
              "name": "correct_tiles",
              "desc": "If false , the correction logic is not done on the changed tiles.  Defaults to true .",
              "type": "boolean",
              "optional": false
            },
            "remove_colliding_entities": {
              "name": "remove_colliding_entities",
              "desc": "true , false , or abort_on_collision . Defaults to true .",
              "type": {
                "value": [
                  "boolean",
                  "string"
                ],
                "type": "Union"
              },
              "optional": false
            },
            "remove_colliding_decoratives": {
              "name": "remove_colliding_decoratives",
              "desc": "true or false . Defaults to true",
              "type": "boolean",
              "optional": false
            },
            "raise_event": {
              "name": "raise_event",
              "desc": "true or false . Defaults to false",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "pollute": {
          "name": "pollute",
          "shortDesc": "Spawn pollution at the given position.",
          "desc": "Spawn pollution at the given position.",
          "parameters": {
            "source": {
              "name": "source",
              "desc": "Where to spawn the pollution.",
              "type": "Position",
              "optional": false
            },
            "amount": {
              "name": "amount",
              "desc": "How much pollution to add.",
              "type": "double",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_chunks": {
          "name": "get_chunks",
          "shortDesc": "Get an iterator going over every chunk on this surface.",
          "desc": "Get an iterator going over every chunk on this surface.",
          "returnObject": {
            "type": "LuaChunkIterator",
            "optional": false
          },
          "attribute_type": "function"
        },
        "is_chunk_generated": {
          "name": "is_chunk_generated",
          "shortDesc": "Is a given chunk generated?",
          "desc": "Is a given chunk generated?",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "The chunk's position.",
              "type": "ChunkPosition",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "request_to_generate_chunks": {
          "name": "request_to_generate_chunks",
          "shortDesc": "Request that the game's map generator generate chunks at the given position\n for the given radius on this surface.",
          "desc": "Request that the game's map generator generate chunks at the given position\n for the given radius on this surface.",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "Where to generate the new chunks.",
              "type": "Position",
              "optional": false
            },
            "radius": {
              "name": "radius",
              "desc": "The chunk radius from position to generate new chunks in.",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "force_generate_chunk_requests": {
          "name": "force_generate_chunk_requests",
          "shortDesc": "Blocks and generates all chunks that have been requested using all available threads.",
          "desc": "Blocks and generates all chunks that have been requested using all available threads.",
          "attribute_type": "function"
        },
        "set_chunk_generated_status": {
          "name": "set_chunk_generated_status",
          "shortDesc": "Set generated status of a chunk.",
          "desc": "Set generated status of a chunk. Useful when copying chunks.",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "The chunk's position.",
              "type": "ChunkPosition",
              "optional": false
            },
            "status": {
              "name": "status",
              "desc": "The chunk's new status.",
              "type": "defines.chunk_generated_status",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "find_logistic_network_by_position": {
          "name": "find_logistic_network_by_position",
          "shortDesc": "Find the logistic network that covers a given position.",
          "desc": "Find the logistic network that covers a given position.",
          "parameters": {
            "position": {
              "name": "position",
              "type": "Position",
              "optional": false
            },
            "force": {
              "name": "force",
              "desc": "Force the logistic network should belong to.",
              "type": "ForceSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The found network or `nil` if no such network was found.",
            "type": "LuaLogisticNetwork",
            "optional": false
          },
          "attribute_type": "function"
        },
        "find_logistic_networks_by_construction_area": {
          "name": "find_logistic_networks_by_construction_area",
          "shortDesc": "Finds all of the logistics networks whose construction area intersects with the given position.",
          "desc": "Finds all of the logistics networks whose construction area intersects with the given position.",
          "parameters": {
            "position": {
              "name": "position",
              "type": "Position",
              "optional": false
            },
            "force": {
              "name": "force",
              "desc": "Force the logistic networks should belong to.",
              "type": "ForceSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaLogisticNetwork"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "deconstruct_area": {
          "name": "deconstruct_area",
          "shortDesc": "Place a deconstruction request.",
          "desc": "Place a deconstruction request.",
          "parameters": {
            "luaSurfacedeconstruct_area_param": {
              "name": "luaSurfacedeconstruct_area_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacedeconstruct_area_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacedeconstruct_area_param",
              "attributes": {
                "area": {
                  "name": "area",
                  "desc": "The area to mark for deconstruction.",
                  "type": "BoundingBox",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "The force whose bots should perform the deconstruction.",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "player": {
                  "name": "player",
                  "desc": "The player to set the last_user to if any.",
                  "type": "PlayerSpecification",
                  "optional": false
                },
                "skip_fog_of_war": {
                  "name": "skip_fog_of_war",
                  "desc": "If chunks covered by fog-of-war are skipped.",
                  "type": "boolean",
                  "optional": false
                },
                "item": {
                  "name": "item",
                  "desc": "The deconstruction item to use if any.",
                  "type": "LuaItemStack",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "cancel_deconstruct_area": {
          "name": "cancel_deconstruct_area",
          "shortDesc": "Cancel a deconstruction order.",
          "desc": "Cancel a deconstruction order.",
          "parameters": {
            "luaSurfacecancel_deconstruct_area_param": {
              "name": "luaSurfacecancel_deconstruct_area_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacecancel_deconstruct_area_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacecancel_deconstruct_area_param",
              "attributes": {
                "area": {
                  "name": "area",
                  "desc": "The area to cancel deconstruction orders in.",
                  "type": "BoundingBox",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "The force whose deconstruction orders to cancel.",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "player": {
                  "name": "player",
                  "desc": "The player to set the last_user to if any.",
                  "type": "PlayerSpecification",
                  "optional": false
                },
                "skip_fog_of_war": {
                  "name": "skip_fog_of_war",
                  "desc": "If chunks covered by fog-of-war are skipped.",
                  "type": "boolean",
                  "optional": false
                },
                "item": {
                  "name": "item",
                  "desc": "The deconstruction item to use if any.",
                  "type": "LuaItemStack",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "upgrade_area": {
          "name": "upgrade_area",
          "shortDesc": "Place an upgrade request.",
          "desc": "Place an upgrade request.",
          "parameters": {
            "luaSurfaceupgrade_area_param": {
              "name": "luaSurfaceupgrade_area_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfaceupgrade_area_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaSurfaceupgrade_area_param",
              "attributes": {
                "area": {
                  "name": "area",
                  "desc": "The area to mark for upgrade.",
                  "type": "BoundingBox",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "The force whose bots should perform the upgrade.",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "player": {
                  "name": "player",
                  "desc": "The player to set the last_user to if any.",
                  "type": "PlayerSpecification",
                  "optional": false
                },
                "skip_fog_of_war": {
                  "name": "skip_fog_of_war",
                  "desc": "If chunks covered by fog-of-war are skipped.",
                  "type": "boolean",
                  "optional": false
                },
                "item": {
                  "name": "item",
                  "desc": "The upgrade item to use.",
                  "type": "LuaItemStack",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "cancel_upgrade_area": {
          "name": "cancel_upgrade_area",
          "shortDesc": "Cancel a upgrade order.",
          "desc": "Cancel a upgrade order.",
          "parameters": {
            "luaSurfacecancel_upgrade_area_param": {
              "name": "luaSurfacecancel_upgrade_area_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacecancel_upgrade_area_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacecancel_upgrade_area_param",
              "attributes": {
                "area": {
                  "name": "area",
                  "desc": "The area to cancel upgrade orders in.",
                  "type": "BoundingBox",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "desc": "The force whose upgrade orders to cancel.",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "player": {
                  "name": "player",
                  "desc": "The player to set the last_user to if any.",
                  "type": "PlayerSpecification",
                  "optional": false
                },
                "skip_fog_of_war": {
                  "name": "skip_fog_of_war",
                  "desc": "If chunks covered by fog-of-war are skipped.",
                  "type": "boolean",
                  "optional": false
                },
                "item": {
                  "name": "item",
                  "desc": "The upgrade item to use if any.",
                  "type": "LuaItemStack",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "get_hidden_tile": {
          "name": "get_hidden_tile",
          "shortDesc": "The hidden tile name or `nil` if there isn't one for the given position.",
          "desc": "The hidden tile name or `nil` if there isn't one for the given position.",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "The tile position.",
              "type": "TilePosition",
              "optional": false
            }
          },
          "returnObject": {
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "set_hidden_tile": {
          "name": "set_hidden_tile",
          "shortDesc": "",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "The tile position.",
              "type": "TilePosition",
              "optional": false
            },
            "tile": {
              "name": "tile",
              "desc": "The new hidden tile or nil to clear the hidden tile.",
              "type": {
                "value": [
                  "string",
                  "LuaTilePrototype"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_connected_tiles": {
          "name": "get_connected_tiles",
          "shortDesc": "Gets all tiles of the given types that are connected horizontally or vertically to the given tile position including the given tile position.",
          "desc": "Gets all tiles of the given types that are connected horizontally or vertically to the given tile position including the given tile position.",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "The tile position to start at.",
              "type": "Position",
              "optional": false
            },
            "tiles": {
              "name": "tiles",
              "desc": "The tiles to search for.",
              "type": {
                "value": [
                  "string"
                ],
                "type": "Array"
              },
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The resulting set of tiles.",
            "type": {
              "value": [
                "Position"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "delete_chunk": {
          "name": "delete_chunk",
          "shortDesc": "",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "The chunk position to delete",
              "type": "ChunkPosition",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "regenerate_entity": {
          "name": "regenerate_entity",
          "shortDesc": "Regenerate autoplacement of some entities on this surface.",
          "desc": "Regenerate autoplacement of some entities on this surface. This can be used to autoplace newly-added entities.",
          "parameters": {
            "entities": {
              "name": "entities",
              "desc": "Prototype names of entity or entities to autoplace. When nil all entities with an autoplace are used.",
              "type": {
                "value": [
                  "string",
                  {
                    "value": [
                      "string"
                    ],
                    "type": "Array"
                  }
                ],
                "type": "Union"
              },
              "optional": false
            },
            "chunks": {
              "name": "chunks",
              "desc": "The chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status < entities are ignored.",
              "type": {
                "value": [
                  "ChunkPosition"
                ],
                "type": "Array"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "regenerate_decorative": {
          "name": "regenerate_decorative",
          "shortDesc": "Regenerate autoplacement of some decoratives on this surface.",
          "desc": "Regenerate autoplacement of some decoratives on this surface. This can be used to autoplace newly-added decoratives.",
          "parameters": {
            "decoratives": {
              "name": "decoratives",
              "desc": "Prototype names of decorative or decoratives to autoplace. When nil all decoratives with an autoplace are used.",
              "type": {
                "value": [
                  "string",
                  {
                    "value": [
                      "string"
                    ],
                    "type": "Array"
                  }
                ],
                "type": "Union"
              },
              "optional": false
            },
            "chunks": {
              "name": "chunks",
              "desc": "The chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status < entities are ignored.",
              "type": {
                "value": [
                  "ChunkPosition"
                ],
                "type": "Array"
              },
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "print": {
          "name": "print",
          "shortDesc": "Print text to the chat console of all players on this surface.",
          "desc": "Print text to the chat console of all players on this surface.",
          "parameters": {
            "message": {
              "name": "message",
              "type": "LocalisedString",
              "optional": false
            },
            "color": {
              "name": "color",
              "type": "Color",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "destroy_decoratives": {
          "name": "destroy_decoratives",
          "shortDesc": "Removes all decoratives from the given area.",
          "desc": "Removes all decoratives from the given area. If no area and no position are given, then the entire surface is searched.",
          "parameters": {
            "luaSurfacedestroy_decoratives_param": {
              "name": "luaSurfacedestroy_decoratives_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacedestroy_decoratives_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacedestroy_decoratives_param",
              "attributes": {
                "area": {
                  "name": "area",
                  "type": "BoundingBox",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "type": "TilePosition",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": {
                    "value": [
                      "string",
                      {
                        "value": [
                          "string"
                        ],
                        "type": "Array"
                      },
                      "LuaDecorativePrototype",
                      {
                        "value": [
                          "LuaDecorativePrototype"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "limit": {
                  "name": "limit",
                  "type": "uint",
                  "optional": false
                },
                "invert": {
                  "name": "invert",
                  "desc": "If the filters should be inverted.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "create_decoratives": {
          "name": "create_decoratives",
          "shortDesc": "Adds the given decoratives to the surface.",
          "desc": "Adds the given decoratives to the surface. Each Decorative is",
          "parameters": {
            "luaSurfacecreate_decoratives_param": {
              "name": "luaSurfacecreate_decoratives_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacecreate_decoratives_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacecreate_decoratives_param",
              "attributes": {
                "check_collision": {
                  "name": "check_collision",
                  "desc": "If collision should be checked against entities/tiles.",
                  "type": "boolean",
                  "optional": false
                },
                "decoratives": {
                  "name": "decoratives",
                  "type": {
                    "value": [
                      "Decorative"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "find_decoratives_filtered": {
          "name": "find_decoratives_filtered",
          "shortDesc": "Find decoratives of a given name in a given area.",
          "desc": "Find decoratives of a given name in a given area. If no filters are given, returns all decoratives in the search area.\n If multiple filters are specified, returns only decoratives matching all given filters. If no area and no position are given, then the entire surface is searched. Each DecorativeResult is a table:",
          "parameters": {
            "luaSurfacefind_decoratives_filtered_param": {
              "name": "luaSurfacefind_decoratives_filtered_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacefind_decoratives_filtered_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "DecorativeResult"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacefind_decoratives_filtered_param",
              "attributes": {
                "area": {
                  "name": "area",
                  "type": "BoundingBox",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "type": "TilePosition",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": {
                    "value": [
                      "string",
                      {
                        "value": [
                          "string"
                        ],
                        "type": "Array"
                      },
                      "LuaDecorativePrototype",
                      {
                        "value": [
                          "LuaDecorativePrototype"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "limit": {
                  "name": "limit",
                  "type": "uint",
                  "optional": false
                },
                "invert": {
                  "name": "invert",
                  "desc": "If the filters should be inverted.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "get_trains": {
          "name": "get_trains",
          "shortDesc": "",
          "parameters": {
            "force": {
              "name": "force",
              "desc": "If given only trains matching this force are returned.",
              "type": "ForceSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaTrain"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "clear_pollution": {
          "name": "clear_pollution",
          "shortDesc": "Clears all pollution on this surface.",
          "desc": "Clears all pollution on this surface.",
          "attribute_type": "function"
        },
        "play_sound": {
          "name": "play_sound",
          "shortDesc": "Plays a sound on this surface.",
          "desc": "Plays a sound on this surface.",
          "parameters": {
            "luaSurfaceplay_sound_param": {
              "name": "luaSurfaceplay_sound_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfaceplay_sound_param",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfaceplay_sound_param",
              "attributes": {
                "path": {
                  "name": "path",
                  "desc": "The sound to play",
                  "type": "SoundPath",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "desc": "Where the sound should be played. If not given it's played 'everywhere'.",
                  "type": "Position",
                  "optional": false
                },
                "volume_modifier": {
                  "name": "volume_modifier",
                  "desc": "Must be between 0 and 1 inclusive.",
                  "type": "double",
                  "optional": false
                },
                "override_sound_type": {
                  "name": "override_sound_type",
                  "desc": "Which volume mixer to play the sound through. Uses the default mixer for the sound type if not specified.",
                  "type": "SoundType",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "get_resource_counts": {
          "name": "get_resource_counts",
          "shortDesc": "Gets the resource amount of all resources on this surface",
          "desc": "Gets the resource amount of all resources on this surface",
          "returnObject": {
            "type": {
              "value": [
                "string",
                "uint"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_random_chunk": {
          "name": "get_random_chunk",
          "shortDesc": "Gets a random generated chunk position or 0,0 if no chunks have been generated on this surface.",
          "desc": "Gets a random generated chunk position or 0,0 if no chunks have been generated on this surface.",
          "returnObject": {
            "type": "ChunkPosition",
            "optional": false
          },
          "attribute_type": "function"
        },
        "clone_area": {
          "name": "clone_area",
          "shortDesc": "Clones the given area.",
          "desc": "Clones the given area.",
          "parameters": {
            "luaSurfaceclone_area_param": {
              "name": "luaSurfaceclone_area_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfaceclone_area_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaSurfaceclone_area_param",
              "attributes": {
                "source_area": {
                  "name": "source_area",
                  "type": "BoundingBox",
                  "optional": false
                },
                "destination_area": {
                  "name": "destination_area",
                  "type": "BoundingBox",
                  "optional": false
                },
                "destination_surface": {
                  "name": "destination_surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "destination_force": {
                  "name": "destination_force",
                  "type": {
                    "value": [
                      "LuaForce",
                      "string"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "clone_tiles": {
                  "name": "clone_tiles",
                  "desc": "If tiles should be cloned",
                  "type": "boolean",
                  "optional": false
                },
                "clone_entities": {
                  "name": "clone_entities",
                  "desc": "If entities should be cloned",
                  "type": "boolean",
                  "optional": false
                },
                "clone_decoratives": {
                  "name": "clone_decoratives",
                  "desc": "If decoratives should be cloned",
                  "type": "boolean",
                  "optional": false
                },
                "clear_destination_entities": {
                  "name": "clear_destination_entities",
                  "desc": "If the destination entities should be cleared",
                  "type": "boolean",
                  "optional": false
                },
                "clear_destination_decoratives": {
                  "name": "clear_destination_decoratives",
                  "desc": "If the destination decoratives should be cleared",
                  "type": "boolean",
                  "optional": false
                },
                "expand_map": {
                  "name": "expand_map",
                  "desc": "If the destination surface should be expanded when destination_area is outside current bounds. Default false.",
                  "type": "boolean",
                  "optional": false
                },
                "create_build_effect_smoke": {
                  "name": "create_build_effect_smoke",
                  "desc": "If true, the building effect smoke will be shown around the new entities.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "clone_brush": {
          "name": "clone_brush",
          "shortDesc": "Clones the given area.",
          "desc": "Clones the given area.",
          "parameters": {
            "luaSurfaceclone_brush_param": {
              "name": "luaSurfaceclone_brush_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfaceclone_brush_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaSurfaceclone_brush_param",
              "attributes": {
                "source_offset": {
                  "name": "source_offset",
                  "type": "TilePosition",
                  "optional": false
                },
                "destination_offset": {
                  "name": "destination_offset",
                  "type": "TilePosition",
                  "optional": false
                },
                "source_positions": {
                  "name": "source_positions",
                  "type": {
                    "value": [
                      "TilePosition"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "destination_surface": {
                  "name": "destination_surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "destination_force": {
                  "name": "destination_force",
                  "type": {
                    "value": [
                      "LuaForce",
                      "string"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "clone_tiles": {
                  "name": "clone_tiles",
                  "desc": "If tiles should be cloned",
                  "type": "boolean",
                  "optional": false
                },
                "clone_entities": {
                  "name": "clone_entities",
                  "desc": "If entities should be cloned",
                  "type": "boolean",
                  "optional": false
                },
                "clone_decoratives": {
                  "name": "clone_decoratives",
                  "desc": "If decoratives should be cloned",
                  "type": "boolean",
                  "optional": false
                },
                "clear_destination_entities": {
                  "name": "clear_destination_entities",
                  "desc": "If the destination entities should be cleared",
                  "type": "boolean",
                  "optional": false
                },
                "clear_destination_decoratives": {
                  "name": "clear_destination_decoratives",
                  "desc": "If the destination decoratives should be cleared",
                  "type": "boolean",
                  "optional": false
                },
                "expand_map": {
                  "name": "expand_map",
                  "desc": "If the destination surface should be expanded when destination_area is outside current bounds. Default false.",
                  "type": "boolean",
                  "optional": false
                },
                "manual_collision_mode": {
                  "name": "manual_collision_mode",
                  "desc": "If manual-style collision checks should be done.",
                  "type": "boolean",
                  "optional": false
                },
                "create_build_effect_smoke": {
                  "name": "create_build_effect_smoke",
                  "desc": "If true, the building effect smoke will be shown around the new entities.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "clone_entities": {
          "name": "clone_entities",
          "shortDesc": "Clones the given entities.",
          "desc": "Clones the given entities.",
          "parameters": {
            "luaSurfaceclone_entities_param": {
              "name": "luaSurfaceclone_entities_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfaceclone_entities_param",
              "optional": false
            }
          },
          "additionalTypes": [
            {
              "name": "LuaSurfaceclone_entities_param",
              "attributes": {
                "entities": {
                  "name": "entities",
                  "type": {
                    "value": [
                      "LuaEntity"
                    ],
                    "type": "Array"
                  },
                  "optional": false
                },
                "destination_offset": {
                  "name": "destination_offset",
                  "type": "Vector",
                  "optional": false
                },
                "destination_surface": {
                  "name": "destination_surface",
                  "type": "SurfaceSpecification",
                  "optional": false
                },
                "destination_force": {
                  "name": "destination_force",
                  "type": "ForceSpecification",
                  "optional": false
                },
                "snap_to_grid": {
                  "name": "snap_to_grid",
                  "type": "boolean",
                  "optional": false
                },
                "create_build_effect_smoke": {
                  "name": "create_build_effect_smoke",
                  "desc": "If true, the building effect smoke will be shown around the new entities.",
                  "type": "boolean",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "clear": {
          "name": "clear",
          "shortDesc": "Clears this surface deleting all entities and chunks on it.",
          "desc": "Clears this surface deleting all entities and chunks on it.",
          "parameters": {
            "ignore_characters": {
              "name": "ignore_characters",
              "desc": "Whether characters on this surface that are connected to or associated with players should be ignored (not destroyed).",
              "type": "boolean",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "request_path": {
          "name": "request_path",
          "shortDesc": "Starts a path find request without actually ordering a unit to move.",
          "desc": "Starts a path find request without actually ordering a unit to move.\n Result is ultimately returned asynchronously via [defines.events.on_script_path_request_finished](https://lua-api.factorio.com/latest/defines.html#defines.events.on_script_path_request_finished) .",
          "parameters": {
            "luaSurfacerequest_path_param": {
              "name": "luaSurfacerequest_path_param",
              "desc": "Table with the following fields",
              "type": "LuaSurfacerequest_path_param",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "A unique handle to identify this call when [defines.events.on_script_path_request_finished](https://lua-api.factorio.com/latest/defines.html#defines.events.on_script_path_request_finished) fires.",
            "type": "uint",
            "optional": false
          },
          "additionalTypes": [
            {
              "name": "LuaSurfacerequest_path_param",
              "attributes": {
                "bounding_box": {
                  "name": "bounding_box",
                  "type": "BoundingBox",
                  "optional": false
                },
                "collision_mask": {
                  "name": "collision_mask",
                  "type": {
                    "value": [
                      "CollisionMask",
                      {
                        "value": [
                          "string"
                        ],
                        "type": "Array"
                      }
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "start": {
                  "name": "start",
                  "type": "Position",
                  "optional": false
                },
                "goal": {
                  "name": "goal",
                  "type": "Position",
                  "optional": false
                },
                "force": {
                  "name": "force",
                  "type": {
                    "value": [
                      "LuaForce",
                      "string"
                    ],
                    "type": "Union"
                  },
                  "optional": false
                },
                "radius": {
                  "name": "radius",
                  "desc": "How close we need to get to the goal. Default 1.",
                  "type": "double",
                  "optional": false
                },
                "pathfind_flags": {
                  "name": "pathfind_flags",
                  "desc": "Flags to affect the pathfinder.",
                  "type": "PathFindFlags",
                  "optional": false
                },
                "can_open_gates": {
                  "name": "can_open_gates",
                  "desc": "If the path request can open gates. Default false.",
                  "type": "boolean",
                  "optional": false
                },
                "path_resolution_modifier": {
                  "name": "path_resolution_modifier",
                  "desc": "The resolution modifier of the pathing. Defaults to 0.",
                  "type": "int",
                  "optional": false
                },
                "entity_to_ignore": {
                  "name": "entity_to_ignore",
                  "desc": "If given, the pathfind will ignore collisions with this entity.",
                  "type": "LuaEntity",
                  "optional": false
                }
              },
              "flags": "Dummy"
            }
          ],
          "attribute_type": "function"
        },
        "get_script_areas": {
          "name": "get_script_areas",
          "shortDesc": "Gets the script areas that match the given name or if no name is given all areas are returned.",
          "desc": "Gets the script areas that match the given name or if no name is given all areas are returned.",
          "parameters": {
            "name": {
              "name": "name",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "ScriptArea"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_script_area": {
          "name": "get_script_area",
          "shortDesc": "Gets the first script area by name or id.",
          "desc": "Gets the first script area by name or id.",
          "parameters": {
            "key": {
              "name": "key",
              "desc": "The name or id of the area to get.",
              "type": {
                "value": [
                  "string",
                  "uint"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "type": "ScriptArea",
            "optional": false
          },
          "attribute_type": "function"
        },
        "edit_script_area": {
          "name": "edit_script_area",
          "shortDesc": "Sets the given script area to the new values.",
          "desc": "Sets the given script area to the new values.",
          "parameters": {
            "id": {
              "name": "id",
              "desc": "The area to edit.",
              "type": "uint",
              "optional": false
            },
            "area": {
              "name": "area",
              "type": "ScriptArea",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "add_script_area": {
          "name": "add_script_area",
          "shortDesc": "Adds the given script area.",
          "desc": "Adds the given script area.",
          "parameters": {
            "area": {
              "name": "area",
              "type": "ScriptArea",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The id of the created area.",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "remove_script_area": {
          "name": "remove_script_area",
          "shortDesc": "Removes the given script area.",
          "desc": "Removes the given script area.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the area was actually removed. False when it didn't exist.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_script_positions": {
          "name": "get_script_positions",
          "shortDesc": "Gets the script positions that match the given name or if no name is given all positions are returned.",
          "desc": "Gets the script positions that match the given name or if no name is given all positions are returned.",
          "parameters": {
            "name": {
              "name": "name",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "ScriptPosition"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_script_position": {
          "name": "get_script_position",
          "shortDesc": "Gets the first script position by name or id.",
          "desc": "Gets the first script position by name or id.",
          "parameters": {
            "key": {
              "name": "key",
              "desc": "The name or id of the position to get.",
              "type": {
                "value": [
                  "string",
                  "uint"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "type": "ScriptPosition",
            "optional": false
          },
          "attribute_type": "function"
        },
        "edit_script_position": {
          "name": "edit_script_position",
          "shortDesc": "Sets the given script position to the new values.",
          "desc": "Sets the given script position to the new values.",
          "parameters": {
            "id": {
              "name": "id",
              "desc": "The position to edit.",
              "type": "uint",
              "optional": false
            },
            "area": {
              "name": "area",
              "type": "ScriptPosition",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "add_script_position": {
          "name": "add_script_position",
          "shortDesc": "Adds the given script position.",
          "desc": "Adds the given script position.",
          "parameters": {
            "area": {
              "name": "area",
              "type": "ScriptPosition",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The id of the created position.",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "remove_script_position": {
          "name": "remove_script_position",
          "shortDesc": "Removes the given script position.",
          "desc": "Removes the given script position.",
          "parameters": {
            "id": {
              "name": "id",
              "type": "uint",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the position was actually removed. False when it didn't exist.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_map_exchange_string": {
          "name": "get_map_exchange_string",
          "shortDesc": "Gets the map exchange string for the current map generation settings of this surface.",
          "desc": "Gets the map exchange string for the current map generation settings of this surface.",
          "returnObject": {
            "type": "string",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_starting_area_radius": {
          "name": "get_starting_area_radius",
          "shortDesc": "Gets the starting area radius of this surface.",
          "desc": "Gets the starting area radius of this surface.",
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_closest": {
          "name": "get_closest",
          "shortDesc": "Gets the closest entity in the list to this position.",
          "desc": "Gets the closest entity in the list to this position.",
          "parameters": {
            "position": {
              "name": "position",
              "type": "Position",
              "optional": false
            },
            "entities": {
              "name": "entities",
              "desc": "The Entities to check",
              "type": {
                "value": [
                  "LuaEntity"
                ],
                "type": "Array"
              },
              "optional": false
            }
          },
          "returnObject": {
            "type": "LuaEntity",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_train_stops": {
          "name": "get_train_stops",
          "shortDesc": "Gets train stops matching the given filters.",
          "desc": "Gets train stops matching the given filters.",
          "parameters": {
            "opts": {
              "name": "opts",
              "desc": "Table with the following fields",
              "type": "any",
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_total_pollution": {
          "name": "get_total_pollution",
          "shortDesc": "Gets the total amount of pollution on the surface by iterating over all of the chunks containing pollution.",
          "desc": "Gets the total amount of pollution on the surface by iterating over all of the chunks containing pollution.",
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "entity_prototype_collides": {
          "name": "entity_prototype_collides",
          "shortDesc": "",
          "parameters": {
            "prototype": {
              "name": "prototype",
              "desc": "The entity prototype to check",
              "type": "EntityPrototypeSpecification",
              "optional": false
            },
            "position": {
              "name": "position",
              "desc": "The position to check",
              "type": "Position",
              "optional": false
            },
            "use_map_generation_bounding_box": {
              "name": "use_map_generation_bounding_box",
              "desc": "If the map generation bounding box should be used instead of the collision bounding box",
              "type": "boolean",
              "optional": false
            },
            "direction": {
              "name": "direction",
              "type": "defines.direction",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "decorative_prototype_collides": {
          "name": "decorative_prototype_collides",
          "shortDesc": "",
          "parameters": {
            "prototype": {
              "name": "prototype",
              "desc": "The decorative prototype to check",
              "type": "string",
              "optional": false
            },
            "position": {
              "name": "position",
              "desc": "The position to check",
              "type": "Position",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "calculate_tile_properties": {
          "name": "calculate_tile_properties",
          "shortDesc": "",
          "parameters": {
            "property_names": {
              "name": "property_names",
              "desc": "Names of properties (e.g. \"elevation\") to calculate",
              "type": {
                "value": [
                  "string"
                ],
                "type": "Array"
              },
              "optional": false
            },
            "positions": {
              "name": "positions",
              "desc": "Positions for which to calculate property values",
              "type": {
                "value": [
                  "Position"
                ],
                "type": "Array"
              },
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Table of property value lists, keyed by property name",
            "type": {
              "value": [
                "string",
                {
                  "value": [
                    "double"
                  ],
                  "type": "Array"
                }
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_entities_with_force": {
          "name": "get_entities_with_force",
          "shortDesc": "Returns all the entities with force on this chunk for the given force.",
          "desc": "Returns all the entities with force on this chunk for the given force.",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "The chunk's position.",
              "type": "ChunkPosition",
              "optional": false
            },
            "force": {
              "name": "force",
              "desc": "Entities of this force will be returned.",
              "type": {
                "value": [
                  "LuaForce",
                  "string"
                ],
                "type": "Union"
              },
              "optional": false
            }
          },
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "build_checkerboard": {
          "name": "build_checkerboard",
          "shortDesc": "Sets the given area to the checkerboard lab tiles.",
          "desc": "Sets the given area to the checkerboard lab tiles.",
          "parameters": {
            "area": {
              "name": "area",
              "desc": "The tile area.",
              "type": "BoundingBox",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "name": {
          "name": "name",
          "shortDesc": "The name of this surface.",
          "desc": "The name of this surface. Names are unique among surfaces. **Note:** the default surface can't be renamed.",
          "type": "string",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "index": {
          "name": "index",
          "shortDesc": "Unique ID associated with this surface.",
          "desc": "Unique ID associated with this surface.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "map_gen_settings": {
          "name": "map_gen_settings",
          "shortDesc": "The generation settings for the surface.",
          "desc": "The generation settings for the surface. can be used to adjust the surface after changing generation settings. **Note:** When changing settings runtime the game will not retroactively change anything. **Note:** [LuaSurface::regenerate_entity](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.regenerate_entity) , [LuaSurface::regenerate_decorative](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.regenerate_decorative) , and [LuaSurface::delete_chunk](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.delete_chunk)",
          "type": "MapGenSettings",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "generate_with_lab_tiles": {
          "name": "generate_with_lab_tiles",
          "shortDesc": "When set to true, new chunks will be generated with lab tiles, instead of using the surface's map generation settings.",
          "desc": "When set to true, new chunks will be generated with lab tiles, instead of using the surface's map generation settings.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "always_day": {
          "name": "always_day",
          "shortDesc": "When set to true, the sun will always shine.",
          "desc": "When set to true, the sun will always shine.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "daytime": {
          "name": "daytime",
          "shortDesc": "Current time of day, as a number in range [0, 1).",
          "desc": "Current time of day, as a number in range [0, 1).",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "darkness": {
          "name": "darkness",
          "shortDesc": "Amount of darkness at the current time.",
          "desc": "Amount of darkness at the current time.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "wind_speed": {
          "name": "wind_speed",
          "shortDesc": "Current wind speed.",
          "desc": "Current wind speed.",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "wind_orientation": {
          "name": "wind_orientation",
          "shortDesc": "Current wind direction.",
          "desc": "Current wind direction.",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "wind_orientation_change": {
          "name": "wind_orientation_change",
          "shortDesc": "Change in wind orientation per tick.",
          "desc": "Change in wind orientation per tick.",
          "type": "float",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "peaceful_mode": {
          "name": "peaceful_mode",
          "shortDesc": "Is peaceful mode enabled on this surface?",
          "desc": "Is peaceful mode enabled on this surface?",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "freeze_daytime": {
          "name": "freeze_daytime",
          "shortDesc": "True if daytime is currently frozen.",
          "desc": "True if daytime is currently frozen.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "ticks_per_day": {
          "name": "ticks_per_day",
          "shortDesc": "The number of ticks per day for this surface.",
          "desc": "The number of ticks per day for this surface.",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "dusk": {
          "name": "dusk",
          "shortDesc": "The daytime when dusk starts.",
          "desc": "The daytime when dusk starts.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "dawn": {
          "name": "dawn",
          "shortDesc": "The daytime when dawn starts.",
          "desc": "The daytime when dawn starts.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "evening": {
          "name": "evening",
          "shortDesc": "The daytime when evening starts.",
          "desc": "The daytime when evening starts.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "morning": {
          "name": "morning",
          "shortDesc": "The daytime when morning starts.",
          "desc": "The daytime when morning starts.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "solar_power_multiplier": {
          "name": "solar_power_multiplier",
          "shortDesc": "The multiplier of solar power on this surface.",
          "desc": "The multiplier of solar power on this surface. Cannot be less than 0. **Note:** Solar equipment is still limited to its maximum power output.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "min_brightness": {
          "name": "min_brightness",
          "shortDesc": "The minimal brightness during the night.",
          "desc": "The minimal brightness during the night. Default is `0.15` .\n The value has an effect on the game simalution only, it doesn't have any effect on rendering.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "brightness_visual_weights": {
          "name": "brightness_visual_weights",
          "shortDesc": "Defines how surface daytime brightness influences each color channel of the current color lookup table (LUT).",
          "desc": "Defines how surface daytime brightness influences each color channel of the current color lookup table (LUT). The LUT is multiplied by `((1 - weight) + brightness * weight)` and result is clamped to range [0, 1]. Default is `{0, 0, 0}` , which means no influence. Example Makes night on the surface pitch black, assuming [LuaSurface::min_brightness](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.min_brightness) being set to default value `0.15` . `game.surfaces[1].brightness_visual_weights\u00a0=\u00a0{\u00a01\u00a0/\u00a00.85,\u00a01\u00a0/\u00a00.85,\u00a01\u00a0/\u00a00.85\u00a0}`",
          "type": "ColorModifier",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "show_clouds": {
          "name": "show_clouds",
          "shortDesc": "If clouds are shown on this surface.",
          "desc": "If clouds are shown on this surface. **Note:** If false, clouds are never shown. If true the player must also have clouds enabled in graphics settings for them to be shown.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaTechnology": {
      "name": "LuaTechnology",
      "desc": "One research item.",
      "url": "LuaTechnology.html",
      "attributes": {
        "reload": {
          "name": "reload",
          "shortDesc": "Reload this technology from its prototype.",
          "desc": "Reload this technology from its prototype.",
          "attribute_type": "function"
        },
        "force": {
          "name": "force",
          "shortDesc": "The force this technology belongs to.",
          "desc": "The force this technology belongs to.",
          "type": "LuaForce",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "name": {
          "name": "name",
          "shortDesc": "Name of this technology.",
          "desc": "Name of this technology.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "Localised name of this technology.",
          "desc": "Localised name of this technology.",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "prototype": {
          "name": "prototype",
          "shortDesc": "The prototype of this technology.",
          "desc": "The prototype of this technology.",
          "type": "LuaTechnologyPrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "enabled": {
          "name": "enabled",
          "shortDesc": "Can this technology be researched?",
          "desc": "Can this technology be researched?",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "visible_when_disabled": {
          "name": "visible_when_disabled",
          "shortDesc": "If this technology will be visible in the research GUI even though it is disabled.",
          "desc": "If this technology will be visible in the research GUI even though it is disabled.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "upgrade": {
          "name": "upgrade",
          "shortDesc": "Is this an upgrade-type research?",
          "desc": "Is this an upgrade-type research?",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "researched": {
          "name": "researched",
          "shortDesc": "Has this technology been researched?",
          "desc": "Has this technology been researched? Switching from `false` to `true` will trigger the technology\n advancement perks; switching from `true` to `false` will reverse them.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "prerequisites": {
          "name": "prerequisites",
          "shortDesc": "Prerequisites of this technology.",
          "desc": "Prerequisites of this technology. The result maps technology name to the [LuaTechnology](https://lua-api.factorio.com/latest/LuaTechnology.html) object.",
          "type": {
            "value": [
              "string",
              "LuaTechnology"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "research_unit_ingredients": {
          "name": "research_unit_ingredients",
          "shortDesc": "Ingredients labs will require to research this technology.",
          "desc": "Ingredients labs will require to research this technology. See also * [LuaTechnology::research_unit_count](https://lua-api.factorio.com/latest/LuaTechnology.html#LuaTechnology.research_unit_count)",
          "type": {
            "value": [
              "Ingredient"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "effects": {
          "name": "effects",
          "shortDesc": "Effects applied when this technology is researched.",
          "desc": "Effects applied when this technology is researched.",
          "type": {
            "value": [
              "Modifier"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "research_unit_count": {
          "name": "research_unit_count",
          "shortDesc": "Number of research units required for this technology.",
          "desc": "Number of research units required for this technology. **Note:** This is multiplied by the current research cost multiplier, unless [LuaTechnologyPrototype::ignore_tech_cost_multiplier](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.ignore_tech_cost_multiplier) is `true` . See also * [LuaTechnology::research_unit_ingredients](https://lua-api.factorio.com/latest/LuaTechnology.html#LuaTechnology.research_unit_ingredients)",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "research_unit_energy": {
          "name": "research_unit_energy",
          "shortDesc": "Amount of energy required to finish a unit of research.",
          "desc": "Amount of energy required to finish a unit of research.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string for this prototype.",
          "desc": "Order string for this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "level": {
          "name": "level",
          "shortDesc": "The current level of this technology.",
          "desc": "The current level of this technology. For level-based technology writing to this is the same as researching the technology to the *previous* level. Writing the level will set [LuaTechnology::enabled](https://lua-api.factorio.com/latest/LuaTechnology.html#LuaTechnology.enabled) to `true` .",
          "type": "uint",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "research_unit_count_formula": {
          "name": "research_unit_count_formula",
          "shortDesc": "The count formula used for this infinite research or nil if this isn't an infinite research.",
          "desc": "The count formula used for this infinite research or nil if this isn't an infinite research. See also * [LuaGameScript::evaluate_expression](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.evaluate_expression)",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaTechnologyPrototype": {
      "name": "LuaTechnologyPrototype",
      "desc": "A Technology prototype.",
      "url": "LuaTechnologyPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this technology.",
          "desc": "Name of this technology.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "Localised name of this technology.",
          "desc": "Localised name of this technology.",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "enabled": {
          "name": "enabled",
          "shortDesc": "If this technology prototype is enabled by default (enabled at the beginning of a game).",
          "desc": "If this technology prototype is enabled by default (enabled at the beginning of a game).",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "hidden": {
          "name": "hidden",
          "shortDesc": "If this technology prototype is hidden.",
          "desc": "If this technology prototype is hidden.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "visible_when_disabled": {
          "name": "visible_when_disabled",
          "shortDesc": "If this technology will be visible in the research GUI even though it is disabled.",
          "desc": "If this technology will be visible in the research GUI even though it is disabled.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "ignore_tech_cost_multiplier": {
          "name": "ignore_tech_cost_multiplier",
          "shortDesc": "If this technology ignores the technology cost multiplier setting.",
          "desc": "If this technology ignores the technology cost multiplier setting. **Note:** [LuaTechnologyPrototype::research_unit_count](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.research_unit_count) will already take this setting into account.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "upgrade": {
          "name": "upgrade",
          "shortDesc": "If the is technology prototype is an upgrade to some other technology.",
          "desc": "If the is technology prototype is an upgrade to some other technology.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "prerequisites": {
          "name": "prerequisites",
          "shortDesc": "Prerequisites of this technology.",
          "desc": "Prerequisites of this technology. The result maps technology name to the [LuaTechnologyPrototype](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html) object.",
          "type": {
            "value": [
              "string",
              "LuaTechnologyPrototype"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "research_unit_ingredients": {
          "name": "research_unit_ingredients",
          "shortDesc": "Ingredients labs will require to research this technology.",
          "desc": "Ingredients labs will require to research this technology. See also * [LuaTechnologyPrototype::research_unit_count](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.research_unit_count)",
          "type": {
            "value": [
              "Ingredient"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "effects": {
          "name": "effects",
          "shortDesc": "Effects applied when this technology is researched.",
          "desc": "Effects applied when this technology is researched.",
          "type": {
            "value": [
              "Modifier"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "research_unit_count": {
          "name": "research_unit_count",
          "shortDesc": "Number of research units required for this technology.",
          "desc": "Number of research units required for this technology. **Note:** This is multiplied by the current research cost multiplier, unless [LuaTechnologyPrototype::ignore_tech_cost_multiplier](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.ignore_tech_cost_multiplier) is `true` . See also * [LuaTechnologyPrototype::research_unit_ingredients](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.research_unit_ingredients)",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "research_unit_energy": {
          "name": "research_unit_energy",
          "shortDesc": "Amount of energy required to finish a unit of research.",
          "desc": "Amount of energy required to finish a unit of research.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string for this prototype.",
          "desc": "Order string for this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "level": {
          "name": "level",
          "shortDesc": "The level of this research.",
          "desc": "The level of this research.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_level": {
          "name": "max_level",
          "shortDesc": "The max level of this research.",
          "desc": "The max level of this research.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "research_unit_count_formula": {
          "name": "research_unit_count_formula",
          "shortDesc": "The count formula used for this infinite research or nil if this isn't an infinite research.",
          "desc": "The count formula used for this infinite research or nil if this isn't an infinite research. See also * [LuaGameScript::evaluate_expression](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.evaluate_expression)",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaTile": {
      "name": "LuaTile",
      "desc": "A single \"square\" on the map.",
      "url": "LuaTile.html",
      "attributes": {
        "collides_with": {
          "name": "collides_with",
          "shortDesc": "What type of things can collide with this tile?",
          "desc": "What type of things can collide with this tile?",
          "parameters": {
            "layer": {
              "name": "layer",
              "type": "CollisionMaskLayer",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "to_be_deconstructed": {
          "name": "to_be_deconstructed",
          "shortDesc": "Is this tile marked for deconstruction?",
          "desc": "Is this tile marked for deconstruction?",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "order_deconstruction": {
          "name": "order_deconstruction",
          "shortDesc": "Orders deconstruction of this tile by the given force.",
          "desc": "Orders deconstruction of this tile by the given force.",
          "parameters": {
            "force": {
              "name": "force",
              "desc": "The force whose robots are supposed to do the deconstruction.",
              "type": "ForceSpecification",
              "optional": false
            },
            "player": {
              "name": "player",
              "desc": "The player to set the last_user to if any.",
              "type": "PlayerSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The deconstructible tile proxy created if any or `nil` .",
            "type": "LuaEntity",
            "optional": false
          },
          "attribute_type": "function"
        },
        "cancel_deconstruction": {
          "name": "cancel_deconstruction",
          "shortDesc": "Cancels deconstruction if it is scheduled, does nothing otherwise.",
          "desc": "Cancels deconstruction if it is scheduled, does nothing otherwise.",
          "parameters": {
            "force": {
              "name": "force",
              "desc": "The force who did the deconstruction order.",
              "type": "ForceSpecification",
              "optional": false
            },
            "player": {
              "name": "player",
              "desc": "The player to set the last_user to if any.",
              "type": "PlayerSpecification",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "name": {
          "name": "name",
          "shortDesc": "Prototype name of this tile.",
          "desc": "Prototype name of this tile. E.g. `\"sand-3\"` or `\"grass-2\"` .",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "prototype": {
          "name": "prototype",
          "shortDesc": "",
          "type": "LuaTilePrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "position": {
          "name": "position",
          "shortDesc": "The position this tile references.",
          "desc": "The position this tile references.",
          "type": "Position",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "hidden_tile": {
          "name": "hidden_tile",
          "shortDesc": "",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "surface": {
          "name": "surface",
          "shortDesc": "The surface this tile is on.",
          "desc": "The surface this tile is on.",
          "type": "LuaSurface",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaTilePrototype": {
      "name": "LuaTilePrototype",
      "desc": "Prototype of a tile.",
      "url": "LuaTilePrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "collision_mask": {
          "name": "collision_mask",
          "shortDesc": "The collision mask this tile uses",
          "desc": "The collision mask this tile uses",
          "type": "CollisionMask",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "collision_mask_with_flags": {
          "name": "collision_mask_with_flags",
          "shortDesc": "",
          "type": "CollisionMaskWithFlags",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "layer": {
          "name": "layer",
          "shortDesc": "",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "autoplace_specification": {
          "name": "autoplace_specification",
          "shortDesc": "Autoplace specification for this prototype.",
          "desc": "Autoplace specification for this prototype. `nil` if none.",
          "type": "AutoplaceSpecification",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "walking_speed_modifier": {
          "name": "walking_speed_modifier",
          "shortDesc": "",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "vehicle_friction_modifier": {
          "name": "vehicle_friction_modifier",
          "shortDesc": "",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "map_color": {
          "name": "map_color",
          "shortDesc": "",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "decorative_removal_probability": {
          "name": "decorative_removal_probability",
          "shortDesc": "The probability that decorative entities will be removed from on top of this tile when this tile is generated.",
          "desc": "The probability that decorative entities will be removed from on top of this tile when this tile is generated.",
          "type": "float",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "automatic_neighbors": {
          "name": "automatic_neighbors",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "allowed_neighbors": {
          "name": "allowed_neighbors",
          "shortDesc": "",
          "type": {
            "value": [
              "string",
              "LuaTilePrototype"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "needs_correction": {
          "name": "needs_correction",
          "shortDesc": "If this tile needs correction logic applied when it's generated in the world.",
          "desc": "If this tile needs correction logic applied when it's generated in the world..",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "mineable_properties": {
          "name": "mineable_properties",
          "shortDesc": "It is a table:",
          "desc": "It is a table: * minable :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  Is this tile mineable at all?\n  * miningtime :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Energy required to mine a tile.\n  * miningparticle :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the particle produced when mining this tile.\n     Will only be present if this tile produces any particle during mining.\n  * products :: array of [Product](https://lua-api.factorio.com/latest/Concepts.html#Product) :  Products obtained by mining this tile.",
          "type": "table",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "next_direction": {
          "name": "next_direction",
          "shortDesc": "The next direction of this tile or `nil` - used when a tile has multiple directions (such as hazard concrete)",
          "desc": "The next direction of this tile or `nil` - used when a tile has multiple directions (such as hazard concrete)",
          "type": "LuaTilePrototype",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "items_to_place_this": {
          "name": "items_to_place_this",
          "shortDesc": "Items that when placed will produce this tile.",
          "desc": "Items that when placed will produce this tile. It is a dictionary indexed by the item prototype name.",
          "type": {
            "value": [
              "SimpleItemStack"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "can_be_part_of_blueprint": {
          "name": "can_be_part_of_blueprint",
          "shortDesc": "False if this tile is not allowed in blueprints regardless of the ability to build it.",
          "desc": "False if this tile is not allowed in blueprints regardless of the ability to build it.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "emissions_per_second": {
          "name": "emissions_per_second",
          "shortDesc": "Amount of pollution emissions per second this tile will absorb.",
          "desc": "Amount of pollution emissions per second this tile will absorb.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaTrain": {
      "name": "LuaTrain",
      "desc": "A train. Trains are a sequence of connected rolling stocks -- locomotives and wagons.",
      "url": "LuaTrain.html",
      "attributes": {
        "get_item_count": {
          "name": "get_item_count",
          "shortDesc": "Get the amount of a particular item stored in the train.",
          "desc": "Get the amount of a particular item stored in the train.",
          "parameters": {
            "item": {
              "name": "item",
              "desc": "Item name to count. If not given, counts all items.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_contents": {
          "name": "get_contents",
          "shortDesc": "Get a mapping of the train's inventory.",
          "desc": "Get a mapping of the train's inventory.",
          "returnObject": {
            "desc": "The counts, indexed by item names.",
            "type": {
              "value": [
                "string",
                "uint"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "remove_item": {
          "name": "remove_item",
          "shortDesc": "Remove some items from the train.",
          "desc": "Remove some items from the train.",
          "parameters": {
            "stack": {
              "name": "stack",
              "desc": "The amount and type of items to remove",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Number of items actually removed.",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "insert": {
          "name": "insert",
          "shortDesc": "Insert a stack into the train.",
          "desc": "Insert a stack into the train.",
          "parameters": {
            "stack": {
              "name": "stack",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "clear_items_inside": {
          "name": "clear_items_inside",
          "shortDesc": "Clear all items in this train.",
          "desc": "Clear all items in this train.",
          "attribute_type": "function"
        },
        "recalculate_path": {
          "name": "recalculate_path",
          "shortDesc": "Checks if the path is invalid and tries to re-path if it isn't.",
          "desc": "Checks if the path is invalid and tries to re-path if it isn't.",
          "parameters": {
            "force": {
              "name": "force",
              "desc": "Forces the train to re-path regardless of the current path being valid or not.",
              "type": "boolean",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "If the train has a path after the repath attempt.",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_fluid_count": {
          "name": "get_fluid_count",
          "shortDesc": "Get the amount of a particular fluid stored in the train.",
          "desc": "Get the amount of a particular fluid stored in the train.",
          "parameters": {
            "fluid": {
              "name": "fluid",
              "desc": "Fluid name to count. If not given, counts all fluids.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_fluid_contents": {
          "name": "get_fluid_contents",
          "shortDesc": "Gets a mapping of the train's fluid inventory.",
          "desc": "Gets a mapping of the train's fluid inventory.",
          "returnObject": {
            "desc": "The counts, indexed by fluid names.",
            "type": {
              "value": [
                "string",
                "double"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "remove_fluid": {
          "name": "remove_fluid",
          "shortDesc": "Remove some fluid from the train.",
          "desc": "Remove some fluid from the train.",
          "parameters": {
            "fluid": {
              "name": "fluid",
              "type": "Fluid",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The amount of fluid actually removed.",
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "insert_fluid": {
          "name": "insert_fluid",
          "shortDesc": "Inserts the given fluid into the first available location in this train.",
          "desc": "Inserts the given fluid into the first available location in this train.",
          "parameters": {
            "fluid": {
              "name": "fluid",
              "type": "Fluid",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "The amount inserted.",
            "type": "double",
            "optional": false
          },
          "attribute_type": "function"
        },
        "clear_fluids_inside": {
          "name": "clear_fluids_inside",
          "shortDesc": "Clears all fluids in this train.",
          "desc": "Clears all fluids in this train.",
          "attribute_type": "function"
        },
        "go_to_station": {
          "name": "go_to_station",
          "shortDesc": "Go to the station specified by the index in the train's schedule.",
          "desc": "Go to the station specified by the index in the train's schedule.",
          "parameters": {
            "index": {
              "name": "index",
              "type": "uint",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "get_rails": {
          "name": "get_rails",
          "shortDesc": "Gets all rails under the train.",
          "desc": "Gets all rails under the train.",
          "returnObject": {
            "type": {
              "value": [
                "LuaEntity"
              ],
              "type": "Array"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "manual_mode": {
          "name": "manual_mode",
          "shortDesc": "When `true` , the train is explicitly controlled by the player or script.",
          "desc": "When `true` , the train is explicitly controlled by the player or script. When `false` , the\n train moves autonomously according to its schedule.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "speed": {
          "name": "speed",
          "shortDesc": "Current speed.",
          "desc": "Current speed. **Note:** Changing the speed of the train is potentially an unsafe operation because train\n       uses the speed for its internal calculations of break distances, etc.",
          "type": "double",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "max_forward_speed": {
          "name": "max_forward_speed",
          "shortDesc": "Current max speed when moving forward, depends on locomotive prototype and fuel.",
          "desc": "Current max speed when moving forward, depends on locomotive prototype and fuel.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "max_backward_speed": {
          "name": "max_backward_speed",
          "shortDesc": "Current max speed when moving backwards, depends on locomotive prototype and fuel.",
          "desc": "Current max speed when moving backwards, depends on locomotive prototype and fuel.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "weight": {
          "name": "weight",
          "shortDesc": "The weight of this train.",
          "desc": "The weight of this train.",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "carriages": {
          "name": "carriages",
          "shortDesc": "Rolling stocks the train is composed of.",
          "desc": "Rolling stocks the train is composed of.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "locomotives": {
          "name": "locomotives",
          "shortDesc": "Arrays of locomotives.",
          "desc": "Arrays of locomotives. The result is two arrays, indexed by `\"front_movers\"` and `\"back_movers\"` containing the locomotives. E.g. `{front_movers={loco1, loco2}, back_movers={loco3}}` .",
          "type": {
            "value": [
              "string",
              {
                "value": [
                  "LuaEntity"
                ],
                "type": "Array"
              }
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "cargo_wagons": {
          "name": "cargo_wagons",
          "shortDesc": "The cargo carriages the train contains.",
          "desc": "The cargo carriages the train contains.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fluid_wagons": {
          "name": "fluid_wagons",
          "shortDesc": "The fluid carriages the train contains.",
          "desc": "The fluid carriages the train contains.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "schedule": {
          "name": "schedule",
          "shortDesc": "The trains current schedule or `nil` if empty.",
          "desc": "The trains current schedule or `nil` if empty. Set to `nil` to clear. **Note:** The schedule can't be changed by modifying the returned table. Instead, changes must\n       be made by assigning a new table to this attribute.",
          "type": "TrainSchedule",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "state": {
          "name": "state",
          "shortDesc": "This train's current state.",
          "desc": "This train's current state.",
          "type": "defines.train_state",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "front_rail": {
          "name": "front_rail",
          "shortDesc": "The rail at the front end of the train, possibly `nil` .",
          "desc": "The rail at the front end of the train, possibly `nil` .",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "back_rail": {
          "name": "back_rail",
          "shortDesc": "The rail at the back end of the train, possibly `nil` .",
          "desc": "The rail at the back end of the train, possibly `nil` .",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "rail_direction_from_front_rail": {
          "name": "rail_direction_from_front_rail",
          "shortDesc": "",
          "type": "defines.rail_direction",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "rail_direction_from_back_rail": {
          "name": "rail_direction_from_back_rail",
          "shortDesc": "",
          "type": "defines.rail_direction",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "front_stock": {
          "name": "front_stock",
          "shortDesc": "The front stock of this train or `nil` .",
          "desc": "The front stock of this train or `nil` .",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "back_stock": {
          "name": "back_stock",
          "shortDesc": "The back stock of this train or `nil` .",
          "desc": "The back stock of this train or `nil` .",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "station": {
          "name": "station",
          "shortDesc": "The train stop this train is stopped at or `nil` .",
          "desc": "The train stop this train is stopped at or `nil` .",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "has_path": {
          "name": "has_path",
          "shortDesc": "If this train has a path.",
          "desc": "If this train has a path.",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "path_end_rail": {
          "name": "path_end_rail",
          "shortDesc": "The destination rail this train is currently pathing to or `nil` .",
          "desc": "The destination rail this train is currently pathing to or `nil` .",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "path_end_stop": {
          "name": "path_end_stop",
          "shortDesc": "The destination train stop this train is currently pathing to or `nil` .",
          "desc": "The destination train stop this train is currently pathing to or `nil` .",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "id": {
          "name": "id",
          "shortDesc": "The unique train ID.",
          "desc": "The unique train ID.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "passengers": {
          "name": "passengers",
          "shortDesc": "The player passengers on the train",
          "desc": "The player passengers on the train **Note:** This does *not* index using player index. See [LuaPlayer::index](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.index) on each player instance for the player index.",
          "type": {
            "value": [
              "LuaPlayer"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "riding_state": {
          "name": "riding_state",
          "shortDesc": "The riding state of this train.",
          "desc": "The riding state of this train.",
          "type": "RidingState",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "killed_players": {
          "name": "killed_players",
          "shortDesc": "The players killed by this train.",
          "desc": "The players killed by this train. The keys are the player indexes, the values are how often this train killed that player.",
          "type": {
            "value": [
              "uint",
              "uint"
            ],
            "type": "Table"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "kill_count": {
          "name": "kill_count",
          "shortDesc": "The total number of kills by this train.",
          "desc": "The total number of kills by this train.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "path": {
          "name": "path",
          "shortDesc": "The path this train is using or `nil` if none.",
          "desc": "The path this train is using or `nil` if none.",
          "type": "LuaRailPath",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "signal": {
          "name": "signal",
          "shortDesc": "The signal this train is arriving or waiting at or `nil` if none.",
          "desc": "The signal this train is arriving or waiting at or `nil` if none.",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaTrainStopControlBehavior": {
      "name": "LuaTrainStopControlBehavior",
      "desc": "Control behavior for train stops.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "url": "LuaControlBehavior.html#LuaTrainStopControlBehavior.brief",
      "attributes": {
        "send_to_train": {
          "name": "send_to_train",
          "shortDesc": "`true` if the train stop should send the circuit network contents to the train to use.",
          "desc": "`true` if the train stop should send the circuit network contents to the train to use.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "read_from_train": {
          "name": "read_from_train",
          "shortDesc": "`true` if the train stop should send the train contents to the circuit network.",
          "desc": "`true` if the train stop should send the train contents to the circuit network.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "read_stopped_train": {
          "name": "read_stopped_train",
          "shortDesc": "`true` if the train stop should send the stopped train id to the circuit network.",
          "desc": "`true` if the train stop should send the stopped train id to the circuit network.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "set_trains_limit": {
          "name": "set_trains_limit",
          "shortDesc": "`true` if the trains_limit_signal is used to set a limit of trains incoming for train stop.",
          "desc": "`true` if the trains_limit_signal is used to set a limit of trains incoming for train stop.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "read_trains_count": {
          "name": "read_trains_count",
          "shortDesc": "`true` if the train stop should send amount of incoming trains to the circuit network.",
          "desc": "`true` if the train stop should send amount of incoming trains to the circuit network.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "enable_disable": {
          "name": "enable_disable",
          "shortDesc": "`true` if the train stop is enabled/disabled through the circuit network.",
          "desc": "`true` if the train stop is enabled/disabled through the circuit network.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "stopped_train_signal": {
          "name": "stopped_train_signal",
          "shortDesc": "The signal that will be sent when using the send-train-id option.",
          "desc": "The signal that will be sent when using the send-train-id option.",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "trains_count_signal": {
          "name": "trains_count_signal",
          "shortDesc": "The signal that will be sent when using the read-trains-count option.",
          "desc": "The signal that will be sent when using the read-trains-count option.",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "trains_limit_signal": {
          "name": "trains_limit_signal",
          "shortDesc": "The signal to be used by set-trains-limit to limit amount of incoming trains",
          "desc": "The signal to be used by set-trains-limit to limit amount of incoming trains",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaGenericOnOffControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaTransportBeltControlBehavior": {
      "name": "LuaTransportBeltControlBehavior",
      "desc": "Control behavior for transport belts.\n\n\n\n",
      "url": "LuaControlBehavior.html#LuaTransportBeltControlBehavior.brief",
      "attributes": {
        "enable_disable": {
          "name": "enable_disable",
          "shortDesc": "If the belt will be enabled/disabled based off the circuit network.",
          "desc": "If the belt will be enabled/disabled based off the circuit network.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "read_contents": {
          "name": "read_contents",
          "shortDesc": "If the belt will read the contents and send them to the circuit network.",
          "desc": "If the belt will read the contents and send them to the circuit network.",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "read_contents_mode": {
          "name": "read_contents_mode",
          "shortDesc": "The read mode for the belt.",
          "desc": "The read mode for the belt.",
          "type": "defines.control_behavior.transport_belt.content_read_mode",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaGenericOnOffControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaTransportLine": {
      "name": "LuaTransportLine",
      "desc": "One line on a transport belt.",
      "url": "LuaTransportLine.html",
      "attributes": {
        "clear": {
          "name": "clear",
          "shortDesc": "Remove all items from this transport line.",
          "desc": "Remove all items from this transport line.",
          "attribute_type": "function"
        },
        "get_item_count": {
          "name": "get_item_count",
          "shortDesc": "Count some or all items on this line.",
          "desc": "Count some or all items on this line. **See also** See also * [LuaInventory::get_item_count](https://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.get_item_count)",
          "parameters": {
            "item": {
              "name": "item",
              "desc": "Prototype name of the item to count. If not specified, count all items.",
              "type": "string",
              "optional": false
            }
          },
          "returnObject": {
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "remove_item": {
          "name": "remove_item",
          "shortDesc": "Remove some items from this line.",
          "desc": "Remove some items from this line.",
          "parameters": {
            "items": {
              "name": "items",
              "desc": "Items to remove.",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Number of items actually removed.",
            "type": "uint",
            "optional": false
          },
          "attribute_type": "function"
        },
        "can_insert_at": {
          "name": "can_insert_at",
          "shortDesc": "Can an item be inserted at a given position?",
          "desc": "Can an item be inserted at a given position?",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "Where to insert an item.",
              "type": "float",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "can_insert_at_back": {
          "name": "can_insert_at_back",
          "shortDesc": "Can an item be inserted at the back of this line?",
          "desc": "Can an item be inserted at the back of this line?",
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "insert_at": {
          "name": "insert_at",
          "shortDesc": "Insert items at a given position.",
          "desc": "Insert items at a given position.",
          "parameters": {
            "position": {
              "name": "position",
              "desc": "Where on the line to insert the items.",
              "type": "float",
              "optional": false
            },
            "items": {
              "name": "items",
              "desc": "Items to insert.",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Were the items inserted successfully?",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "insert_at_back": {
          "name": "insert_at_back",
          "shortDesc": "Insert items at the back of this line.",
          "desc": "Insert items at the back of this line.",
          "parameters": {
            "items": {
              "name": "items",
              "type": "ItemStackSpecification",
              "optional": false
            }
          },
          "returnObject": {
            "desc": "Were the items inserted successfully?",
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "get_contents": {
          "name": "get_contents",
          "shortDesc": "Get counts of all items on this line.",
          "desc": "Get counts of all items on this line. **See also** See also * [LuaInventory::get_contents](https://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.get_contents)",
          "returnObject": {
            "desc": "The counts, indexed by item names.",
            "type": {
              "value": [
                "string",
                "uint"
              ],
              "type": "Table"
            },
            "optional": false
          },
          "attribute_type": "function"
        },
        "line_equals": {
          "name": "line_equals",
          "shortDesc": "Returns whether the associated internal transport line of this line is the same as the others associated internal transport line.",
          "desc": "Returns whether the associated internal transport line of this line is the same as the others associated internal transport line.",
          "parameters": {
            "other": {
              "name": "other",
              "type": "LuaTransportLine",
              "optional": false
            }
          },
          "returnObject": {
            "type": "boolean",
            "optional": false
          },
          "attribute_type": "function"
        },
        "operator #": {
          "name": "operator #",
          "shortDesc": "Get the number of items on this transport line.",
          "desc": "Get the number of items on this transport line.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "owner": {
          "name": "owner",
          "shortDesc": "The entity this transport line belongs to.",
          "desc": "The entity this transport line belongs to.",
          "type": "LuaEntity",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "output_lines": {
          "name": "output_lines",
          "shortDesc": "The transport lines that this transport line outputs items to or an empty table if none.",
          "desc": "The transport lines that this transport line outputs items to or an empty table if none.",
          "type": {
            "value": [
              "LuaTransportLine"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "input_lines": {
          "name": "input_lines",
          "shortDesc": "The transport lines that this transport line is fed by or an empty table if none.",
          "desc": "The transport lines that this transport line is fed by or an empty table if none.",
          "type": {
            "value": [
              "LuaTransportLine"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "operator []": {
          "name": "operator []",
          "shortDesc": "The indexing operator.",
          "desc": "The indexing operator.",
          "type": "LuaItemStack",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaTrivialSmokePrototype": {
      "name": "LuaTrivialSmokePrototype",
      "desc": "Prototype of a trivial smoke.",
      "url": "LuaTrivialSmokePrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "color": {
          "name": "color",
          "shortDesc": "",
          "type": "Color",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "start_scale": {
          "name": "start_scale",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "end_scale": {
          "name": "end_scale",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "movement_slow_down_factor": {
          "name": "movement_slow_down_factor",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "duration": {
          "name": "duration",
          "shortDesc": "",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "spread_duration": {
          "name": "spread_duration",
          "shortDesc": "",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fade_away_duration": {
          "name": "fade_away_duration",
          "shortDesc": "",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "fade_in_duration": {
          "name": "fade_in_duration",
          "shortDesc": "",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "glow_fade_away_duration": {
          "name": "glow_fade_away_duration",
          "shortDesc": "",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "cyclic": {
          "name": "cyclic",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "affected_by_wind": {
          "name": "affected_by_wind",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "show_when_smoke_off": {
          "name": "show_when_smoke_off",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "glow_animation": {
          "name": "glow_animation",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_layer": {
          "name": "render_layer",
          "shortDesc": "",
          "type": "RenderLayer",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaUnitGroup": {
      "name": "LuaUnitGroup",
      "desc": "A collection of units moving and attacking together. The engine creates autonomous unit groups to attack\n polluted areas. The script can create and control such groups as well. Groups can accept commands in the\n same manner as regular units.",
      "url": "LuaUnitGroup.html",
      "attributes": {
        "add_member": {
          "name": "add_member",
          "shortDesc": "Make a unit a member of this group.",
          "desc": "Make a unit a member of this group. Has the same effect as giving a `group_command` with this\n group to the unit.",
          "parameters": {
            "unit": {
              "name": "unit",
              "type": "LuaEntity",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "set_command": {
          "name": "set_command",
          "shortDesc": "Give this group a command.",
          "desc": "Give this group a command. **See also** See also * [LuaEntity::set_command](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.set_command)",
          "parameters": {
            "command": {
              "name": "command",
              "type": "Command",
              "optional": false
            }
          },
          "attribute_type": "function"
        },
        "set_autonomous": {
          "name": "set_autonomous",
          "shortDesc": "Make this group autonomous.",
          "desc": "Make this group autonomous. Autonomous groups will automatically attack polluted areas. Autonomous groups\n aren't considered to be script driven **See also** See also * [LuaUnitGroup::is_script_driven](https://lua-api.factorio.com/latest/LuaUnitGroup.html#LuaUnitGroup.is_script_driven)",
          "attribute_type": "function"
        },
        "start_moving": {
          "name": "start_moving",
          "shortDesc": "Make the group start moving even if some of its members haven't yet arrived.",
          "desc": "Make the group start moving even if some of its members haven't yet arrived.",
          "attribute_type": "function"
        },
        "destroy": {
          "name": "destroy",
          "shortDesc": "Dissolve this group.",
          "desc": "Dissolve this group. Its members won't be destroyed, they will be merely unlinked from\n this group.",
          "attribute_type": "function"
        },
        "members": {
          "name": "members",
          "shortDesc": "Members of this group.",
          "desc": "Members of this group.",
          "type": {
            "value": [
              "LuaEntity"
            ],
            "type": "Array"
          },
          "mode": "[R]",
          "attribute_type": "field"
        },
        "position": {
          "name": "position",
          "shortDesc": "Group position.",
          "desc": "Group position. This can have different meanings depending on the group state. When the group\n is gathering, the position is the place of gathering. When the group is moving, the position is\n the expected position of its members along the path. When the group is attacking, it is the\n average position of its members.",
          "type": "Position",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "state": {
          "name": "state",
          "shortDesc": "Whether this group is gathering, moving or attacking.",
          "desc": "Whether this group is gathering, moving or attacking.",
          "type": "defines.group_state",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "force": {
          "name": "force",
          "shortDesc": "The force of this unit group.",
          "desc": "The force of this unit group.",
          "type": "LuaForce",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "surface": {
          "name": "surface",
          "shortDesc": "The surface of this unit group.",
          "desc": "The surface of this unit group.",
          "type": "LuaSurface",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "group_number": {
          "name": "group_number",
          "shortDesc": "The group number for this unit group.",
          "desc": "The group number for this unit group.",
          "type": "uint",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "is_script_driven": {
          "name": "is_script_driven",
          "shortDesc": "Whether this unit group is controlled by a script or by the game engine.",
          "desc": "Whether this unit group is controlled by a script or by the game engine. See also * [LuaUnitGroup::set_autonomous](https://lua-api.factorio.com/latest/LuaUnitGroup.html#LuaUnitGroup.set_autonomous)",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "command": {
          "name": "command",
          "shortDesc": "The command given to this group or `nil` is the group has no command.",
          "desc": "The command given to this group or `nil` is the group has no command.",
          "type": "Command",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "distraction_command": {
          "name": "distraction_command",
          "shortDesc": "The distraction command given to this group or `nil` is the group currently isn't distracted.",
          "desc": "The distraction command given to this group or `nil` is the group currently isn't distracted.",
          "type": "Command",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaVirtualSignalPrototype": {
      "name": "LuaVirtualSignalPrototype",
      "desc": "Prototype of a virtual signal.",
      "url": "LuaVirtualSignalPrototype.html",
      "attributes": {
        "name": {
          "name": "name",
          "shortDesc": "Name of this prototype.",
          "desc": "Name of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "order": {
          "name": "order",
          "shortDesc": "Order string of this prototype.",
          "desc": "Order string of this prototype.",
          "type": "string",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_name": {
          "name": "localised_name",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "localised_description": {
          "name": "localised_description",
          "shortDesc": "",
          "type": "LocalisedString",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "special": {
          "name": "special",
          "shortDesc": "If this is a special signal",
          "desc": "If this is a special signal",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "subgroup": {
          "name": "subgroup",
          "shortDesc": "",
          "type": "LuaGroup",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaVoidEnergySourcePrototype": {
      "name": "LuaVoidEnergySourcePrototype",
      "desc": "Prototype of a void energy source.",
      "url": "LuaVoidEnergySourcePrototype.html",
      "attributes": {
        "emissions": {
          "name": "emissions",
          "shortDesc": "",
          "type": "double",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_no_network_icon": {
          "name": "render_no_network_icon",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        },
        "render_no_power_icon": {
          "name": "render_no_power_icon",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[R]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    },
    "LuaWallControlBehavior": {
      "name": "LuaWallControlBehavior",
      "desc": "Control behavior for walls.\n\n\n\n\n\n",
      "url": "LuaControlBehavior.html#LuaWallControlBehavior.brief",
      "attributes": {
        "circuit_condition": {
          "name": "circuit_condition",
          "shortDesc": "The circuit condition.",
          "desc": "The circuit condition.",
          "type": "CircuitConditionSpecification",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "open_gate": {
          "name": "open_gate",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "read_sensor": {
          "name": "read_sensor",
          "shortDesc": "",
          "type": "boolean",
          "mode": "[RW]",
          "attribute_type": "field"
        },
        "output_signal": {
          "name": "output_signal",
          "shortDesc": "",
          "type": "SignalID",
          "mode": "[RW]",
          "attribute_type": "field"
        }
      },
      "parents": [
        "LuaControlBehavior",
        "LuaObjectHelp",
        "LuaObjectValid"
      ]
    }
  },
  "defines": {
    "name": "defines",
    "defines": {
      "alert_type": {
        "name": "alert_type",
        "defines": {
          "entity_destroyed": {
            "name": "entity_destroyed"
          },
          "entity_under_attack": {
            "name": "entity_under_attack"
          },
          "not_enough_construction_robots": {
            "name": "not_enough_construction_robots"
          },
          "no_material_for_construction": {
            "name": "no_material_for_construction"
          },
          "not_enough_repair_packs": {
            "name": "not_enough_repair_packs"
          },
          "turret_fire": {
            "name": "turret_fire"
          },
          "custom": {
            "name": "custom"
          },
          "no_storage": {
            "name": "no_storage"
          },
          "train_out_of_fuel": {
            "name": "train_out_of_fuel"
          }
        }
      },
      "behavior_result": {
        "name": "behavior_result",
        "desc": "AI command exit status. See [LuaEntity::set_command](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.set_command)",
        "defines": {
          "in_progress": {
            "name": "in_progress"
          },
          "fail": {
            "name": "fail"
          },
          "success": {
            "name": "success"
          },
          "deleted": {
            "name": "deleted"
          }
        }
      },
      "build_check_type": {
        "name": "build_check_type",
        "defines": {
          "script": {
            "name": "script"
          },
          "manual": {
            "name": "manual"
          },
          "manual_ghost": {
            "name": "manual_ghost"
          },
          "script_ghost": {
            "name": "script_ghost"
          },
          "blueprint_ghost": {
            "name": "blueprint_ghost"
          },
          "ghost_revive": {
            "name": "ghost_revive"
          }
        }
      },
      "chain_signal_state": {
        "name": "chain_signal_state",
        "desc": "State of a chain signal.",
        "defines": {
          "none": {
            "name": "none"
          },
          "all_open": {
            "name": "all_open"
          },
          "partially_open": {
            "name": "partially_open"
          },
          "none_open": {
            "name": "none_open"
          }
        }
      },
      "chunk_generated_status": {
        "name": "chunk_generated_status",
        "defines": {
          "nothing": {
            "name": "nothing"
          },
          "custom_tiles": {
            "name": "custom_tiles"
          },
          "basic_tiles": {
            "name": "basic_tiles"
          },
          "corrected_tiles": {
            "name": "corrected_tiles"
          },
          "tiles": {
            "name": "tiles"
          },
          "entities": {
            "name": "entities"
          }
        }
      },
      "circuit_condition_index": {
        "name": "circuit_condition_index",
        "defines": {
          "inserter_circuit": {
            "name": "inserter_circuit"
          },
          "inserter_logistic": {
            "name": "inserter_logistic"
          },
          "lamp": {
            "name": "lamp"
          },
          "arithmetic_combinator": {
            "name": "arithmetic_combinator"
          },
          "decider_combinator": {
            "name": "decider_combinator"
          },
          "constant_combinator": {
            "name": "constant_combinator"
          },
          "offshore_pump": {
            "name": "offshore_pump"
          },
          "pump": {
            "name": "pump"
          }
        }
      },
      "circuit_connector_id": {
        "name": "circuit_connector_id",
        "defines": {
          "accumulator": {
            "name": "accumulator"
          },
          "constant_combinator": {
            "name": "constant_combinator"
          },
          "container": {
            "name": "container"
          },
          "programmable_speaker": {
            "name": "programmable_speaker"
          },
          "rail_signal": {
            "name": "rail_signal"
          },
          "rail_chain_signal": {
            "name": "rail_chain_signal"
          },
          "roboport": {
            "name": "roboport"
          },
          "storage_tank": {
            "name": "storage_tank"
          },
          "wall": {
            "name": "wall"
          },
          "electric_pole": {
            "name": "electric_pole"
          },
          "inserter": {
            "name": "inserter"
          },
          "lamp": {
            "name": "lamp"
          },
          "combinator_input": {
            "name": "combinator_input"
          },
          "combinator_output": {
            "name": "combinator_output"
          },
          "offshore_pump": {
            "name": "offshore_pump"
          },
          "pump": {
            "name": "pump"
          }
        }
      },
      "command": {
        "name": "command",
        "desc": "Command given to units describing what they should do.",
        "defines": {
          "attack": {
            "name": "attack",
            "shortDesc": "Attack another entity."
          },
          "go_to_location": {
            "name": "go_to_location",
            "shortDesc": "Go to a specific position."
          },
          "compound": {
            "name": "compound",
            "shortDesc": "Chain commands together, see [defines.compound_command](https://lua-api.factorio.com/latest/defines.html#defines.compound_command) ."
          },
          "group": {
            "name": "group",
            "shortDesc": "Do what your group wants you to do."
          },
          "attack_area": {
            "name": "attack_area",
            "shortDesc": "Go to a place and attack what you see."
          },
          "wander": {
            "name": "wander",
            "shortDesc": "Chill."
          },
          "flee": {
            "name": "flee",
            "shortDesc": "Flee from another entity."
          },
          "stop": {
            "name": "stop",
            "shortDesc": "Stop moving and stay where you are."
          },
          "build_base": {
            "name": "build_base",
            "shortDesc": "Go to a position and build a base there."
          }
        }
      },
      "compound_command": {
        "name": "compound_command",
        "desc": "How commands are joined together in a compound command (see [defines.command.compound](https://lua-api.factorio.com/latest/defines.html#defines.command.compound) ).",
        "defines": {
          "logical_and": {
            "name": "logical_and",
            "shortDesc": "Fail on first failure. Only succeeds if all commands (executed one after another) succeed."
          },
          "logical_or": {
            "name": "logical_or",
            "shortDesc": "Succeed on first success. Only fails if all commands (executed one after another) fail."
          },
          "return_last": {
            "name": "return_last",
            "shortDesc": "Execute all commands in sequence and fail or succeed depending on the return status of the last command."
          }
        }
      },
      "control_behavior": {
        "name": "control_behavior",
        "defines": {
          "inserter": {
            "name": "inserter",
            "defines": {
              "circuit_mode_of_operation": {
                "name": "circuit_mode_of_operation",
                "defines": {
                  "none": {
                    "name": "none"
                  },
                  "enable_disable": {
                    "name": "enable_disable"
                  },
                  "set_filters": {
                    "name": "set_filters"
                  },
                  "read_hand_contents": {
                    "name": "read_hand_contents"
                  },
                  "set_stack_size": {
                    "name": "set_stack_size"
                  }
                }
              },
              "hand_read_mode": {
                "name": "hand_read_mode",
                "defines": {
                  "hold": {
                    "name": "hold"
                  },
                  "pulse": {
                    "name": "pulse"
                  }
                }
              }
            }
          },
          "logistic_container": {
            "name": "logistic_container",
            "defines": {
              "circuit_mode_of_operation": {
                "name": "circuit_mode_of_operation",
                "defines": {
                  "send_contents": {
                    "name": "send_contents"
                  },
                  "set_requests": {
                    "name": "set_requests"
                  }
                }
              }
            }
          },
          "lamp": {
            "name": "lamp",
            "defines": {
              "circuit_mode_of_operation": {
                "name": "circuit_mode_of_operation",
                "defines": {
                  "use_colors": {
                    "name": "use_colors"
                  }
                }
              }
            }
          },
          "mining_drill": {
            "name": "mining_drill",
            "defines": {
              "resource_read_mode": {
                "name": "resource_read_mode",
                "defines": {
                  "this_miner": {
                    "name": "this_miner"
                  },
                  "entire_patch": {
                    "name": "entire_patch"
                  }
                }
              }
            }
          },
          "transport_belt": {
            "name": "transport_belt",
            "defines": {
              "content_read_mode": {
                "name": "content_read_mode",
                "defines": {
                  "pulse": {
                    "name": "pulse"
                  },
                  "hold": {
                    "name": "hold"
                  }
                }
              }
            }
          },
          "type": {
            "name": "type",
            "defines": {
              "container": {
                "name": "container",
                "shortDesc": "[LuaContainerControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaContainerControlBehavior.brief)"
              },
              "generic_on_off": {
                "name": "generic_on_off",
                "shortDesc": "[LuaGenericOnOffControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaGenericOnOffControlBehavior.brief)"
              },
              "inserter": {
                "name": "inserter",
                "shortDesc": "[LuaInserterControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaInserterControlBehavior.brief)"
              },
              "lamp": {
                "name": "lamp",
                "shortDesc": "[LuaLampControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaLampControlBehavior.brief)"
              },
              "logistic_container": {
                "name": "logistic_container",
                "shortDesc": "[LuaLogisticContainerControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaLogisticContainerControlBehavior.brief)"
              },
              "roboport": {
                "name": "roboport",
                "shortDesc": "[LuaRoboportControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaRoboportControlBehavior.brief)"
              },
              "storage_tank": {
                "name": "storage_tank",
                "shortDesc": "[LuaStorageTankControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaStorageTankControlBehavior.brief)"
              },
              "train_stop": {
                "name": "train_stop",
                "shortDesc": "[LuaTrainStopControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaTrainStopControlBehavior.brief)"
              },
              "decider_combinator": {
                "name": "decider_combinator",
                "shortDesc": "[LuaDeciderCombinatorControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaDeciderCombinatorControlBehavior.brief)"
              },
              "arithmetic_combinator": {
                "name": "arithmetic_combinator",
                "shortDesc": "[LuaArithmeticCombinatorControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaArithmeticCombinatorControlBehavior.brief)"
              },
              "constant_combinator": {
                "name": "constant_combinator",
                "shortDesc": "[LuaConstantCombinatorControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaConstantCombinatorControlBehavior.brief)"
              },
              "transport_belt": {
                "name": "transport_belt",
                "shortDesc": "[LuaTransportBeltControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaTransportBeltControlBehavior.brief)"
              },
              "accumulator": {
                "name": "accumulator",
                "shortDesc": "[LuaAccumulatorControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaAccumulatorControlBehavior.brief)"
              },
              "rail_signal": {
                "name": "rail_signal",
                "shortDesc": "[LuaRailSignalControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaRailSignalControlBehavior.brief)"
              },
              "rail_chain_signal": {
                "name": "rail_chain_signal",
                "shortDesc": "[LuaRailChainSignalControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaRailChainSignalControlBehavior.brief)"
              },
              "wall": {
                "name": "wall",
                "shortDesc": "[LuaWallControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaWallControlBehavior.brief)"
              },
              "mining_drill": {
                "name": "mining_drill",
                "shortDesc": "[LuaMiningDrillControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaMiningDrillControlBehavior.brief)"
              },
              "programmable_speaker": {
                "name": "programmable_speaker",
                "shortDesc": "[LuaProgrammableSpeakerControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaProgrammableSpeakerControlBehavior.brief)"
              }
            }
          }
        }
      },
      "controllers": {
        "name": "controllers",
        "defines": {
          "ghost": {
            "name": "ghost",
            "shortDesc": "Can't interact with the world, can only observe. Used in the multiplayer waiting-to-respawn screen."
          },
          "character": {
            "name": "character",
            "shortDesc": "The controller controls a character. This is the default controller in freeplay."
          },
          "god": {
            "name": "god",
            "shortDesc": "The controller isn't tied to a character. This is the default controller in sandbox."
          },
          "editor": {
            "name": "editor",
            "shortDesc": "The Editor Controller near ultimate power to do almost anything in the game."
          },
          "cutscene": {
            "name": "cutscene",
            "shortDesc": "The player can't interact with the world, and the camera pans around in a predefined manner."
          },
          "spectator": {
            "name": "spectator",
            "shortDesc": "Can't change anything in the world but can view anything."
          }
        }
      },
      "deconstruction_item": {
        "name": "deconstruction_item",
        "defines": {
          "entity_filter_mode": {
            "name": "entity_filter_mode",
            "defines": {
              "whitelist": {
                "name": "whitelist"
              },
              "blacklist": {
                "name": "blacklist"
              }
            }
          },
          "tile_filter_mode": {
            "name": "tile_filter_mode",
            "defines": {
              "whitelist": {
                "name": "whitelist"
              },
              "blacklist": {
                "name": "blacklist"
              }
            }
          },
          "tile_selection_mode": {
            "name": "tile_selection_mode",
            "defines": {
              "normal": {
                "name": "normal"
              },
              "always": {
                "name": "always"
              },
              "never": {
                "name": "never"
              },
              "only": {
                "name": "only"
              }
            }
          }
        }
      },
      "difficulty": {
        "name": "difficulty",
        "defines": {
          "easy": {
            "name": "easy"
          },
          "normal": {
            "name": "normal"
          },
          "hard": {
            "name": "hard"
          }
        }
      },
      "difficulty_settings": {
        "name": "difficulty_settings",
        "defines": {
          "recipe_difficulty": {
            "name": "recipe_difficulty",
            "defines": {
              "normal": {
                "name": "normal"
              },
              "expensive": {
                "name": "expensive"
              }
            }
          },
          "technology_difficulty": {
            "name": "technology_difficulty",
            "defines": {
              "normal": {
                "name": "normal"
              },
              "expensive": {
                "name": "expensive"
              }
            }
          }
        }
      },
      "direction": {
        "name": "direction",
        "defines": {
          "north": {
            "name": "north"
          },
          "northeast": {
            "name": "northeast"
          },
          "east": {
            "name": "east"
          },
          "southeast": {
            "name": "southeast"
          },
          "south": {
            "name": "south"
          },
          "southwest": {
            "name": "southwest"
          },
          "west": {
            "name": "west"
          },
          "northwest": {
            "name": "northwest"
          }
        }
      },
      "disconnect_reason": {
        "name": "disconnect_reason",
        "defines": {
          "quit": {
            "name": "quit"
          },
          "dropped": {
            "name": "dropped"
          },
          "reconnect": {
            "name": "reconnect"
          },
          "wrong_input": {
            "name": "wrong_input"
          },
          "desync_limit_reached": {
            "name": "desync_limit_reached"
          },
          "cannot_keep_up": {
            "name": "cannot_keep_up"
          },
          "afk": {
            "name": "afk"
          },
          "kicked": {
            "name": "kicked"
          },
          "kicked_and_deleted": {
            "name": "kicked_and_deleted"
          },
          "banned": {
            "name": "banned"
          },
          "switching_servers": {
            "name": "switching_servers"
          }
        }
      },
      "distraction": {
        "name": "distraction",
        "defines": {
          "none": {
            "name": "none",
            "shortDesc": "Perform command even if someone attacks the unit."
          },
          "by_enemy": {
            "name": "by_enemy",
            "shortDesc": "Attack closer enemy entities with force."
          },
          "by_anything": {
            "name": "by_anything",
            "shortDesc": "Attack closer enemy entities, including entities \"built\" by player (belts, inserters, chests)."
          },
          "by_damage": {
            "name": "by_damage",
            "shortDesc": "Attack when attacked."
          }
        }
      },
      "entity_status": {
        "name": "entity_status",
        "defines": {
          "working": {
            "name": "working"
          },
          "normal": {
            "name": "normal"
          },
          "no_power": {
            "name": "no_power"
          },
          "low_power": {
            "name": "low_power"
          },
          "no_fuel": {
            "name": "no_fuel"
          },
          "disabled_by_control_behavior": {
            "name": "disabled_by_control_behavior"
          },
          "opened_by_circuit_network": {
            "name": "opened_by_circuit_network"
          },
          "closed_by_circuit_network": {
            "name": "closed_by_circuit_network"
          },
          "disabled_by_script": {
            "name": "disabled_by_script"
          },
          "marked_for_deconstruction": {
            "name": "marked_for_deconstruction"
          },
          "not_plugged_in_electric_network": {
            "name": "not_plugged_in_electric_network",
            "shortDesc": "Used by generators and solar panels."
          },
          "networks_connected": {
            "name": "networks_connected",
            "shortDesc": "Used by power switches."
          },
          "networks_disconnected": {
            "name": "networks_disconnected",
            "shortDesc": "Used by power switches."
          },
          "charging": {
            "name": "charging",
            "shortDesc": "Used by accumulators."
          },
          "discharging": {
            "name": "discharging",
            "shortDesc": "Used by accumulators."
          },
          "fully_charged": {
            "name": "fully_charged",
            "shortDesc": "Used by accumulators."
          },
          "out_of_logistic_network": {
            "name": "out_of_logistic_network",
            "shortDesc": "Used by logistic containers."
          },
          "no_recipe": {
            "name": "no_recipe",
            "shortDesc": "Used by assembling machines."
          },
          "no_ingredients": {
            "name": "no_ingredients",
            "shortDesc": "Used by furnaces."
          },
          "no_input_fluid": {
            "name": "no_input_fluid",
            "shortDesc": "Used by boilers, fluid turrets and fluid energy sources: Boiler has no fluid to work with."
          },
          "no_research_in_progress": {
            "name": "no_research_in_progress",
            "shortDesc": "Used by labs."
          },
          "no_minable_resources": {
            "name": "no_minable_resources",
            "shortDesc": "Used by mining drills."
          },
          "low_input_fluid": {
            "name": "low_input_fluid",
            "shortDesc": "Used by boilers and fluid turrets: Boiler still has some fluid but is about to run out."
          },
          "fluid_ingredient_shortage": {
            "name": "fluid_ingredient_shortage",
            "shortDesc": "Used by crafting machines."
          },
          "full_output": {
            "name": "full_output",
            "shortDesc": "Used by crafting machines, boilers, burner energy sources and reactors: Reactor/burner has full burnt result inventory, boiler has full output fluidbox."
          },
          "item_ingredient_shortage": {
            "name": "item_ingredient_shortage",
            "shortDesc": "Used by crafting machines."
          },
          "missing_required_fluid": {
            "name": "missing_required_fluid",
            "shortDesc": "Used by mining drills when the mining fluid is missing."
          },
          "missing_science_packs": {
            "name": "missing_science_packs",
            "shortDesc": "Used by labs."
          },
          "waiting_for_source_items": {
            "name": "waiting_for_source_items",
            "shortDesc": "Used by inserters."
          },
          "waiting_for_space_in_destination": {
            "name": "waiting_for_space_in_destination",
            "shortDesc": "Used by inserters and mining drills."
          },
          "preparing_rocket_for_launch": {
            "name": "preparing_rocket_for_launch",
            "shortDesc": "Used by the rocket silo."
          },
          "waiting_to_launch_rocket": {
            "name": "waiting_to_launch_rocket",
            "shortDesc": "Used by the rocket silo."
          },
          "launching_rocket": {
            "name": "launching_rocket",
            "shortDesc": "Used by the rocket silo."
          },
          "no_modules_to_transmit": {
            "name": "no_modules_to_transmit",
            "shortDesc": "Used by beacons."
          },
          "recharging_after_power_outage": {
            "name": "recharging_after_power_outage",
            "shortDesc": "Used by roboports."
          },
          "waiting_for_target_to_be_built": {
            "name": "waiting_for_target_to_be_built",
            "shortDesc": "Used by inserters targeting entity ghosts."
          },
          "waiting_for_train": {
            "name": "waiting_for_train",
            "shortDesc": "Used by inserters targeting rails."
          },
          "no_ammo": {
            "name": "no_ammo",
            "shortDesc": "Used by ammo turrets."
          },
          "low_temperature": {
            "name": "low_temperature",
            "shortDesc": "Used by heat energy sources."
          },
          "disabled": {
            "name": "disabled",
            "shortDesc": "Used by constant combinators: Combinator is turned off via switch in GUI."
          },
          "turned_off_during_daytime": {
            "name": "turned_off_during_daytime",
            "shortDesc": "Used by lamps."
          },
          "not_connected_to_rail": {
            "name": "not_connected_to_rail",
            "shortDesc": "Used by rail signals."
          },
          "cant_divide_segments": {
            "name": "cant_divide_segments",
            "shortDesc": "Used by rail signals."
          }
        }
      },
      "events": {
        "name": "events",
        "shortDesc": "Every event contains at least the `name` and `tick` attributes.",
        "desc": "See the [events page](https://lua-api.factorio.com/latest/events.html) for more info on what events contain and when they get raised.",
        "defines": {
          "Custom Input Events": {
            "name": "Custom Input Events",
            "shortDesc": "Called when a custom-input is activated",
            "contains": [
              {
                "name": "Custom Input Events_selected_prototype",
                "attributes": {
                  "base_type": {
                    "name": "base_type",
                    "desc": "E.g. \"entity\" .",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "derived_type": {
                    "name": "derived_type",
                    "desc": "E.g. \"tree\" .",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "name": {
                    "name": "name",
                    "desc": "E.g. \"tree-05\" .",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  }
                },
                "flags": "Dummy"
              },
              {
                "name": "Custom Input Events",
                "desc": "Called when a custom-input is activated",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "input_name": {
                    "name": "input_name",
                    "desc": "The prototype name of the custom input that was activated.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "cursor_position": {
                    "name": "cursor_position",
                    "desc": "The mouse cursor position when the input was activated.",
                    "type": {
                      "value": "Position"
                    },
                    "optional": false
                  },
                  "selected_prototype": {
                    "name": "selected_prototype",
                    "desc": "PrototypeData is a table base_type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) : E.g. `\"entity\"` . derived_type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) : E.g. `\"tree\"` . name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) : E.g. `\"tree-05\"` .",
                    "type": {
                      "value": "Custom Input Events_selected_prototype"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_tick": {
            "name": "on_tick",
            "shortDesc": "It is fired once every tick.",
            "contains": [
              {
                "name": "on_tick",
                "desc": "It is fired once every tick. Since this event is fired every tick, its handler shouldn't\n include performance heavy code.",
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_gui_click": {
            "name": "on_gui_click",
            "shortDesc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) is clicked.",
            "contains": [
              {
                "name": "on_gui_click",
                "desc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) is clicked.",
                "attributes": {
                  "element": {
                    "name": "element",
                    "desc": "The clicked element.",
                    "type": {
                      "value": "LuaGuiElement"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who did the clicking.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "button": {
                    "name": "button",
                    "desc": "The mouse button used if any.",
                    "type": {
                      "value": "defines.mouse_button_type"
                    },
                    "optional": false
                  },
                  "alt": {
                    "name": "alt",
                    "desc": "If alt was pressed.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "control": {
                    "name": "control",
                    "desc": "If control was pressed.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "shift": {
                    "name": "shift",
                    "desc": "If shift was pressed.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_gui_confirmed": {
            "name": "on_gui_confirmed",
            "shortDesc": "Called when a [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) is confirmed, for example by pressing Enter in a textfield.",
            "contains": [
              {
                "name": "on_gui_confirmed",
                "desc": "Called when a [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) is confirmed, for example by pressing Enter in a textfield.",
                "attributes": {
                  "element": {
                    "name": "element",
                    "desc": "The confirmed element.",
                    "type": {
                      "value": "LuaGuiElement"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who did the confirming.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "alt": {
                    "name": "alt",
                    "desc": "If alt was pressed.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "control": {
                    "name": "control",
                    "desc": "If control was pressed.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "shift": {
                    "name": "shift",
                    "desc": "If shift was pressed.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_gui_text_changed": {
            "name": "on_gui_text_changed",
            "shortDesc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) text is changed by the player.",
            "contains": [
              {
                "name": "on_gui_text_changed",
                "desc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) text is changed by the player.",
                "attributes": {
                  "element": {
                    "name": "element",
                    "desc": "The edited element.",
                    "type": {
                      "value": "LuaGuiElement"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who did the edit.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "text": {
                    "name": "text",
                    "desc": "The new text in the element.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_gui_checked_state_changed": {
            "name": "on_gui_checked_state_changed",
            "shortDesc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) checked state is changed (related to checkboxes and radio buttons).",
            "contains": [
              {
                "name": "on_gui_checked_state_changed",
                "desc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) checked state is changed (related to checkboxes and radio buttons).",
                "attributes": {
                  "element": {
                    "name": "element",
                    "desc": "The element whose checked state changed.",
                    "type": {
                      "value": "LuaGuiElement"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who did the change.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_entity_died": {
            "name": "on_entity_died",
            "shortDesc": "Called when an entity dies.",
            "contains": [
              {
                "name": "on_entity_died",
                "desc": "Called when an entity dies.\n Can be filtered using [LuaEntityDiedEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaEntityDiedEventFilters)",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "cause": {
                    "name": "cause",
                    "desc": "The entity that did the killing if available.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  },
                  "loot": {
                    "name": "loot",
                    "desc": "The loot generated by this entity if any.",
                    "type": {
                      "value": "LuaInventory"
                    },
                    "optional": false
                  },
                  "force": {
                    "name": "force",
                    "desc": "The force that did the killing if any.",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": true
                  },
                  "damage_type": {
                    "name": "damage_type",
                    "desc": "The damage type if any.",
                    "type": {
                      "value": "LuaDamagePrototype"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_post_entity_died": {
            "name": "on_post_entity_died",
            "shortDesc": "Called after an entity dies.",
            "contains": [
              {
                "name": "on_post_entity_died",
                "desc": "Called after an entity dies.\n Can be filtered using [LuaPostEntityDiedEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPostEntityDiedEventFilters)",
                "attributes": {
                  "ghost": {
                    "name": "ghost",
                    "desc": "The ghost created by the entity dying if any.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  },
                  "force": {
                    "name": "force",
                    "desc": "The force that did the killing if any.",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": true
                  },
                  "position": {
                    "name": "position",
                    "desc": "Position where the entity died.",
                    "type": {
                      "value": "Position"
                    },
                    "optional": false
                  },
                  "prototype": {
                    "name": "prototype",
                    "desc": "The entity prototype of the entity that died.",
                    "type": {
                      "value": "LuaEntityPrototype"
                    },
                    "optional": false
                  },
                  "damage_type": {
                    "name": "damage_type",
                    "desc": "The damage type if any.",
                    "type": {
                      "value": "LuaDamagePrototype"
                    },
                    "optional": true
                  },
                  "corpses": {
                    "name": "corpses",
                    "desc": "The corpses created by the entity dying if any.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "surface_index": {
                    "name": "surface_index",
                    "desc": "The surface the entity was on.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "unit_number": {
                    "name": "unit_number",
                    "desc": "The unit number the entity had if any.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_entity_damaged": {
            "name": "on_entity_damaged",
            "shortDesc": "Called when an entity is damaged.",
            "contains": [
              {
                "name": "on_entity_damaged",
                "desc": "Called when an entity is damaged.\n Can be filtered using [LuaEntityDamagedEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaEntityDamagedEventFilters)",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "damage_type": {
                    "name": "damage_type",
                    "type": {
                      "value": "LuaDamagePrototype"
                    },
                    "optional": false
                  },
                  "original_damage_amount": {
                    "name": "original_damage_amount",
                    "desc": "The damage amount before resistances.",
                    "type": {
                      "value": "float"
                    },
                    "optional": false
                  },
                  "final_damage_amount": {
                    "name": "final_damage_amount",
                    "desc": "The damage amount after resistances.",
                    "type": {
                      "value": "float"
                    },
                    "optional": false
                  },
                  "final_health": {
                    "name": "final_health",
                    "desc": "The health of the entity after the damage was applied.",
                    "type": {
                      "value": "float"
                    },
                    "optional": false
                  },
                  "cause": {
                    "name": "cause",
                    "desc": "The entity that did the attacking if available.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  },
                  "force": {
                    "name": "force",
                    "desc": "The force that did the attacking if any.",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_picked_up_item": {
            "name": "on_picked_up_item",
            "shortDesc": "Called when a player picks up an item.",
            "contains": [
              {
                "name": "on_picked_up_item",
                "desc": "Called when a player picks up an item.",
                "attributes": {
                  "item_stack": {
                    "name": "item_stack",
                    "type": {
                      "value": "SimpleItemStack"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_built_entity": {
            "name": "on_built_entity",
            "shortDesc": "Called when player builds something.",
            "contains": [
              {
                "name": "on_built_entity",
                "desc": "Called when player builds something.\n Can be filtered using [LuaPlayerBuiltEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPlayerBuiltEntityEventFilters)",
                "attributes": {
                  "created_entity": {
                    "name": "created_entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "stack": {
                    "name": "stack",
                    "type": {
                      "value": "LuaItemStack"
                    },
                    "optional": false
                  },
                  "item": {
                    "name": "item",
                    "desc": "The item prototype used to build the entity. Note this won't exist in some situations (built from blueprint, undo, etc).",
                    "type": {
                      "value": "LuaItemPrototype"
                    },
                    "optional": true
                  },
                  "tags": {
                    "name": "tags",
                    "desc": "The tags associated with this entity if any.",
                    "type": {
                      "value": "Tags"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_sector_scanned": {
            "name": "on_sector_scanned",
            "shortDesc": "Called when the radar finishes scanning a sector.",
            "contains": [
              {
                "name": "on_sector_scanned",
                "desc": "Called when the radar finishes scanning a sector.\n Can be filtered for the radar using [LuaSectorScannedEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaSectorScannedEventFilters)",
                "attributes": {
                  "radar": {
                    "name": "radar",
                    "desc": "The radar that did the scanning.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "chunk_position": {
                    "name": "chunk_position",
                    "desc": "The chunk scanned.",
                    "type": {
                      "value": "ChunkPosition"
                    },
                    "optional": false
                  },
                  "area": {
                    "name": "area",
                    "desc": "Area of the scanned chunk.",
                    "type": {
                      "value": "BoundingBox"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_mined_item": {
            "name": "on_player_mined_item",
            "shortDesc": "Called when the player mines something.",
            "contains": [
              {
                "name": "on_player_mined_item",
                "desc": "Called when the player mines something.",
                "attributes": {
                  "item_stack": {
                    "name": "item_stack",
                    "desc": "The item given to the player",
                    "type": {
                      "value": "SimpleItemStack"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_build": {
            "name": "on_pre_build",
            "shortDesc": "Called when players uses an item to build something.",
            "contains": [
              {
                "name": "on_pre_build",
                "desc": "Called when players uses an item to build something. Called before [on_built_entity](https://lua-api.factorio.com/latest/events.html#on_built_entity) .",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who did the placing.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "position": {
                    "name": "position",
                    "desc": "Where the item was placed.",
                    "type": {
                      "value": "Position"
                    },
                    "optional": false
                  },
                  "shift_build": {
                    "name": "shift_build",
                    "desc": "Item was placed using shift building.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "direction": {
                    "name": "direction",
                    "desc": "The direction the item was facing when placed.",
                    "type": {
                      "value": "defines.direction"
                    },
                    "optional": false
                  },
                  "flip_horizontal": {
                    "name": "flip_horizontal",
                    "desc": "If building this blueprint was flipped horizontally.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "flip_vertical": {
                    "name": "flip_vertical",
                    "desc": "If building this blueprint was flipped vertically.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "created_by_moving": {
                    "name": "created_by_moving",
                    "desc": "Item was placed while moving.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_rocket_launched": {
            "name": "on_rocket_launched",
            "shortDesc": "Called when the rocket is launched.",
            "contains": [
              {
                "name": "on_rocket_launched",
                "desc": "Called when the rocket is launched.",
                "attributes": {
                  "rocket": {
                    "name": "rocket",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "rocket_silo": {
                    "name": "rocket_silo",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player that is riding the rocket, if any.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_player_mined_item": {
            "name": "on_pre_player_mined_item",
            "shortDesc": "Called when the player finishes mining an entity, before the entity is removed from map.",
            "contains": [
              {
                "name": "on_pre_player_mined_item",
                "desc": "Called when the player finishes mining an entity, before the entity is removed from map.\n Can be filtered using [LuaPrePlayerMinedEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPrePlayerMinedEntityEventFilters)",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "desc": "The entity being mined",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_chunk_generated": {
            "name": "on_chunk_generated",
            "shortDesc": "Called when a chunk is generated.",
            "contains": [
              {
                "name": "on_chunk_generated",
                "desc": "Called when a chunk is generated.",
                "attributes": {
                  "area": {
                    "name": "area",
                    "desc": "Area of the chunk.",
                    "type": {
                      "value": "BoundingBox"
                    },
                    "optional": false
                  },
                  "position": {
                    "name": "position",
                    "desc": "Position of the chunk.",
                    "type": {
                      "value": "ChunkPosition"
                    },
                    "optional": false
                  },
                  "surface": {
                    "name": "surface",
                    "desc": "The surface the chunk is on.",
                    "type": {
                      "value": "LuaSurface"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_crafted_item": {
            "name": "on_player_crafted_item",
            "shortDesc": "Called when the player crafts an item (just before inserting into player's inventory, not clicking\n the button to craft).",
            "contains": [
              {
                "name": "on_player_crafted_item",
                "desc": "Called when the player crafts an item (just before inserting into player's inventory, not clicking\n the button to craft). It is called for each item crafted as well as what was clicked.",
                "attributes": {
                  "item_stack": {
                    "name": "item_stack",
                    "desc": "The crafted item",
                    "type": {
                      "value": "LuaItemStack"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who did the crafting",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "recipe": {
                    "name": "recipe",
                    "desc": "The recipe that resulted in this item being crafted",
                    "type": {
                      "value": "LuaRecipe"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_robot_built_entity": {
            "name": "on_robot_built_entity",
            "shortDesc": "Called when a construction robot builds an entity.",
            "contains": [
              {
                "name": "on_robot_built_entity",
                "desc": "Called when a construction robot builds an entity.\n Can be filtered using [LuaRobotBuiltEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaRobotBuiltEntityEventFilters)",
                "attributes": {
                  "robot": {
                    "name": "robot",
                    "desc": "The robot that did the building.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "created_entity": {
                    "name": "created_entity",
                    "desc": "The entity built.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "stack": {
                    "name": "stack",
                    "desc": "The item used to do the building.",
                    "type": {
                      "value": "LuaItemStack"
                    },
                    "optional": false
                  },
                  "tags": {
                    "name": "tags",
                    "desc": "The tags associated with this entity if any.",
                    "type": {
                      "value": "Tags"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_robot_pre_mined": {
            "name": "on_robot_pre_mined",
            "shortDesc": "Called before a robot mines an entity.",
            "contains": [
              {
                "name": "on_robot_pre_mined",
                "desc": "Called before a robot mines an entity.\n Can be filtered using [LuaPreRobotMinedEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPreRobotMinedEntityEventFilters)",
                "attributes": {
                  "robot": {
                    "name": "robot",
                    "desc": "The robot that's about to do the mining.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "entity": {
                    "name": "entity",
                    "desc": "The entity which is about to be mined.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_robot_mined": {
            "name": "on_robot_mined",
            "shortDesc": "Called when a robot mines an entity.",
            "contains": [
              {
                "name": "on_robot_mined",
                "desc": "Called when a robot mines an entity.",
                "attributes": {
                  "robot": {
                    "name": "robot",
                    "desc": "The robot that did the mining.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "item_stack": {
                    "name": "item_stack",
                    "desc": "The entity the robot just picked up.",
                    "type": {
                      "value": "SimpleItemStack"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_research_started": {
            "name": "on_research_started",
            "shortDesc": "Called when a technology research starts.",
            "contains": [
              {
                "name": "on_research_started",
                "desc": "Called when a technology research starts.",
                "attributes": {
                  "research": {
                    "name": "research",
                    "desc": "The technology being researched",
                    "type": {
                      "value": "LuaTechnology"
                    },
                    "optional": false
                  },
                  "last_research": {
                    "name": "last_research",
                    "type": {
                      "value": "LuaTechnology"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_research_finished": {
            "name": "on_research_finished",
            "shortDesc": "Called when a research finishes.",
            "contains": [
              {
                "name": "on_research_finished",
                "desc": "Called when a research finishes.",
                "attributes": {
                  "research": {
                    "name": "research",
                    "desc": "The researched technology",
                    "type": {
                      "value": "LuaTechnology"
                    },
                    "optional": false
                  },
                  "by_script": {
                    "name": "by_script",
                    "desc": "If the technology was researched by script.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_research_reversed": {
            "name": "on_research_reversed",
            "shortDesc": "Called when a research is reversed (unresearched).",
            "contains": [
              {
                "name": "on_research_reversed",
                "desc": "Called when a research is reversed (unresearched).",
                "attributes": {
                  "research": {
                    "name": "research",
                    "desc": "The technology un-researched",
                    "type": {
                      "value": "LuaTechnology"
                    },
                    "optional": false
                  },
                  "by_script": {
                    "name": "by_script",
                    "desc": "If the technology was un-researched by script.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_rotated_entity": {
            "name": "on_player_rotated_entity",
            "shortDesc": "Called when the player rotates an entity.",
            "contains": [
              {
                "name": "on_player_rotated_entity",
                "desc": "Called when the player rotates an entity. This event is only fired when the entity actually changes its\n orientation -- pressing the rotate key on an entity that can't be rotated won't fire this event.",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "desc": "The rotated entity.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "previous_direction": {
                    "name": "previous_direction",
                    "desc": "The previous direction",
                    "type": {
                      "value": "defines.direction"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_marked_for_deconstruction": {
            "name": "on_marked_for_deconstruction",
            "shortDesc": "Called when an entity is marked for deconstruction with the Deconstruction planner or via script.",
            "contains": [
              {
                "name": "on_marked_for_deconstruction",
                "desc": "Called when an entity is marked for deconstruction with the Deconstruction planner or via script.\n Can be filtered using [LuaEntityMarkedForDeconstructionEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaEntityMarkedForDeconstructionEventFilters)",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_cancelled_deconstruction": {
            "name": "on_cancelled_deconstruction",
            "shortDesc": "Called when the deconstruction of an entity is canceled.",
            "contains": [
              {
                "name": "on_cancelled_deconstruction",
                "desc": "Called when the deconstruction of an entity is canceled.\n Can be filtered using [LuaEntityDeconstructionCancelledEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaEntityDeconstructionCancelledEventFilters)",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_trigger_created_entity": {
            "name": "on_trigger_created_entity",
            "shortDesc": "Called when an entity with a trigger prototype (such as capsules) create an entity AND that\n trigger prototype defined `trigger_created_entity=\"true\"` .",
            "contains": [
              {
                "name": "on_trigger_created_entity",
                "desc": "Called when an entity with a trigger prototype (such as capsules) create an entity AND that\n trigger prototype defined `trigger_created_entity=\"true\"` .",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "source": {
                    "name": "source",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_trigger_fired_artillery": {
            "name": "on_trigger_fired_artillery",
            "shortDesc": "Called when an entity with a trigger prototype (such as capsules) fire an artillery projectile AND that\n trigger prototype defined `trigger_fired_artillery=\"true\"` .",
            "contains": [
              {
                "name": "on_trigger_fired_artillery",
                "desc": "Called when an entity with a trigger prototype (such as capsules) fire an artillery projectile AND that\n trigger prototype defined `trigger_fired_artillery=\"true\"` .",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "source": {
                    "name": "source",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_train_changed_state": {
            "name": "on_train_changed_state",
            "shortDesc": "Called when a train changes state (started to stopped and vice versa)",
            "contains": [
              {
                "name": "on_train_changed_state",
                "desc": "Called when a train changes state (started to stopped and vice versa)",
                "attributes": {
                  "train": {
                    "name": "train",
                    "type": {
                      "value": "LuaTrain"
                    },
                    "optional": false
                  },
                  "old_state": {
                    "name": "old_state",
                    "type": {
                      "value": "defines.train_state"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_created": {
            "name": "on_player_created",
            "shortDesc": "Called after the player was created.",
            "contains": [
              {
                "name": "on_player_created",
                "desc": "Called after the player was created.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_resource_depleted": {
            "name": "on_resource_depleted",
            "shortDesc": "Called when a resource entity reaches 0 or its minimum yield for infinite resources.",
            "contains": [
              {
                "name": "on_resource_depleted",
                "desc": "Called when a resource entity reaches 0 or its minimum yield for infinite resources.",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_driving_changed_state": {
            "name": "on_player_driving_changed_state",
            "shortDesc": "Called when the player's driving state has changed, this means a player has either\n entered or left a vehicle.",
            "contains": [
              {
                "name": "on_player_driving_changed_state",
                "desc": "Called when the player's driving state has changed, this means a player has either\n entered or left a vehicle.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "entity": {
                    "name": "entity",
                    "desc": "The vehicle if any.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_force_created": {
            "name": "on_force_created",
            "shortDesc": "Called when a new force is created using `game.create_force()`",
            "contains": [
              {
                "name": "on_force_created",
                "desc": "Called when a new force is created using `game.create_force()`",
                "attributes": {
                  "force": {
                    "name": "force",
                    "desc": "The newly created force.",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_forces_merging": {
            "name": "on_forces_merging",
            "shortDesc": "Called when two forces are about to be merged using `game.merge_forces()` .",
            "contains": [
              {
                "name": "on_forces_merging",
                "desc": "Called when two forces are about to be merged using `game.merge_forces()` .",
                "attributes": {
                  "source": {
                    "name": "source",
                    "desc": "The force to be destroyed",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  },
                  "destination": {
                    "name": "destination",
                    "desc": "The force to reassign entities to.",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_cursor_stack_changed": {
            "name": "on_player_cursor_stack_changed",
            "shortDesc": "Called after a players cursorstack changed in some way.",
            "contains": [
              {
                "name": "on_player_cursor_stack_changed",
                "desc": "Called after a players cursorstack changed in some way.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_entity_settings_pasted": {
            "name": "on_pre_entity_settings_pasted",
            "shortDesc": "Called before entity copy-paste is done.",
            "contains": [
              {
                "name": "on_pre_entity_settings_pasted",
                "desc": "Called before entity copy-paste is done.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "source": {
                    "name": "source",
                    "desc": "The source entity settings will be copied from.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "destination": {
                    "name": "destination",
                    "desc": "The destination entity settings will be copied to.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_entity_settings_pasted": {
            "name": "on_entity_settings_pasted",
            "shortDesc": "Called after entity copy-paste is done.",
            "contains": [
              {
                "name": "on_entity_settings_pasted",
                "desc": "Called after entity copy-paste is done.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "source": {
                    "name": "source",
                    "desc": "The source entity settings have been copied from.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "destination": {
                    "name": "destination",
                    "desc": "The destination entity settings have been copied to.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_main_inventory_changed": {
            "name": "on_player_main_inventory_changed",
            "shortDesc": "Called after a players main inventory changed in some way.",
            "contains": [
              {
                "name": "on_player_main_inventory_changed",
                "desc": "Called after a players main inventory changed in some way.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_armor_inventory_changed": {
            "name": "on_player_armor_inventory_changed",
            "shortDesc": "Called after a players armor inventory changed in some way.",
            "contains": [
              {
                "name": "on_player_armor_inventory_changed",
                "desc": "Called after a players armor inventory changed in some way.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_ammo_inventory_changed": {
            "name": "on_player_ammo_inventory_changed",
            "shortDesc": "Called after a players ammo inventory changed in some way.",
            "contains": [
              {
                "name": "on_player_ammo_inventory_changed",
                "desc": "Called after a players ammo inventory changed in some way.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_gun_inventory_changed": {
            "name": "on_player_gun_inventory_changed",
            "shortDesc": "Called after a players gun inventory changed in some way.",
            "contains": [
              {
                "name": "on_player_gun_inventory_changed",
                "desc": "Called after a players gun inventory changed in some way.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_placed_equipment": {
            "name": "on_player_placed_equipment",
            "shortDesc": "Called after the player puts equipment in an equipment grid",
            "contains": [
              {
                "name": "on_player_placed_equipment",
                "desc": "Called after the player puts equipment in an equipment grid",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "equipment": {
                    "name": "equipment",
                    "desc": "The equipment put in the equipment grid.",
                    "type": {
                      "value": "LuaEquipment"
                    },
                    "optional": false
                  },
                  "grid": {
                    "name": "grid",
                    "desc": "The equipment grid the equipment was put in.",
                    "type": {
                      "value": "LuaEquipmentGrid"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_removed_equipment": {
            "name": "on_player_removed_equipment",
            "shortDesc": "Called after the player removes equipment from an equipment grid",
            "contains": [
              {
                "name": "on_player_removed_equipment",
                "desc": "Called after the player removes equipment from an equipment grid",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "grid": {
                    "name": "grid",
                    "desc": "The equipment grid removed from.",
                    "type": {
                      "value": "LuaEquipmentGrid"
                    },
                    "optional": false
                  },
                  "equipment": {
                    "name": "equipment",
                    "desc": "The equipment removed.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "count": {
                    "name": "count",
                    "desc": "The count of equipment removed.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_player_died": {
            "name": "on_pre_player_died",
            "shortDesc": "Called before a players dies.",
            "contains": [
              {
                "name": "on_pre_player_died",
                "desc": "Called before a players dies.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "cause": {
                    "name": "cause",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_died": {
            "name": "on_player_died",
            "shortDesc": "Called after a player dies.",
            "contains": [
              {
                "name": "on_player_died",
                "desc": "Called after a player dies.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "cause": {
                    "name": "cause",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_respawned": {
            "name": "on_player_respawned",
            "shortDesc": "Called after a player respawns.",
            "contains": [
              {
                "name": "on_player_respawned",
                "desc": "Called after a player respawns.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "player_port": {
                    "name": "player_port",
                    "desc": "The player port used to respawn if one was used.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_joined_game": {
            "name": "on_player_joined_game",
            "shortDesc": "Called after a player joins the game.",
            "contains": [
              {
                "name": "on_player_joined_game",
                "desc": "Called after a player joins the game.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_left_game": {
            "name": "on_player_left_game",
            "shortDesc": "Called after a player leaves the game.",
            "contains": [
              {
                "name": "on_player_left_game",
                "desc": "Called after a player leaves the game.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "reason": {
                    "name": "reason",
                    "type": {
                      "value": "defines.disconnect_reason"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_built_tile": {
            "name": "on_player_built_tile",
            "shortDesc": "Called after a player builds tiles.",
            "contains": [
              {
                "name": "on_player_built_tile",
                "desc": "Called after a player builds tiles.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "surface_index": {
                    "name": "surface_index",
                    "desc": "The surface the tile(s) were built on.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "tiles": {
                    "name": "tiles",
                    "desc": "The position data.",
                    "type": {
                      "value": "OldTileAndPosition"
                    },
                    "optional": false
                  },
                  "tile": {
                    "name": "tile",
                    "desc": "The tile prototype that was placed.",
                    "type": {
                      "value": "LuaTilePrototype"
                    },
                    "optional": false
                  },
                  "item": {
                    "name": "item",
                    "desc": "The item type used to build the tiles",
                    "type": {
                      "value": "LuaItemPrototype"
                    },
                    "optional": true
                  },
                  "stack": {
                    "name": "stack",
                    "desc": "The stack used to build the tiles (may be empty if all of the items where used to build the tiles).",
                    "type": {
                      "value": "LuaItemStack"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_mined_tile": {
            "name": "on_player_mined_tile",
            "shortDesc": "Called after a player mines tiles.",
            "contains": [
              {
                "name": "on_player_mined_tile",
                "desc": "Called after a player mines tiles.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "surface_index": {
                    "name": "surface_index",
                    "desc": "The surface the tile(s) were mined from.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "tiles": {
                    "name": "tiles",
                    "desc": "The position data.",
                    "type": {
                      "value": "OldTileAndPosition"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_robot_built_tile": {
            "name": "on_robot_built_tile",
            "shortDesc": "Called after a robot builds tiles.",
            "contains": [
              {
                "name": "on_robot_built_tile",
                "desc": "Called after a robot builds tiles.",
                "attributes": {
                  "robot": {
                    "name": "robot",
                    "desc": "The robot.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "tiles": {
                    "name": "tiles",
                    "desc": "The position data.",
                    "type": {
                      "value": "OldTileAndPosition"
                    },
                    "optional": false
                  },
                  "tile": {
                    "name": "tile",
                    "desc": "The tile prototype that was placed.",
                    "type": {
                      "value": "LuaTilePrototype"
                    },
                    "optional": false
                  },
                  "item": {
                    "name": "item",
                    "desc": "The item type used to build the tiles.",
                    "type": {
                      "value": "LuaItemPrototype"
                    },
                    "optional": false
                  },
                  "stack": {
                    "name": "stack",
                    "desc": "The stack used to build the tiles (may be empty if all of the items where used to build the tiles).",
                    "type": {
                      "value": "LuaItemStack"
                    },
                    "optional": false
                  },
                  "surface_index": {
                    "name": "surface_index",
                    "desc": "The surface the tile(s) are build on.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_robot_mined_tile": {
            "name": "on_robot_mined_tile",
            "shortDesc": "Called after a robot mines tiles.",
            "contains": [
              {
                "name": "on_robot_mined_tile",
                "desc": "Called after a robot mines tiles.",
                "attributes": {
                  "robot": {
                    "name": "robot",
                    "desc": "The robot.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "tiles": {
                    "name": "tiles",
                    "desc": "The position data.",
                    "type": {
                      "value": "OldTileAndPosition"
                    },
                    "optional": false
                  },
                  "surface_index": {
                    "name": "surface_index",
                    "desc": "The surface the tile(s) were mined on.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_selected_area": {
            "name": "on_player_selected_area",
            "shortDesc": "Called after a player selects an area with a selection-tool item.",
            "contains": [
              {
                "name": "on_player_selected_area",
                "desc": "Called after a player selects an area with a selection-tool item.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player doing the selection.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "surface": {
                    "name": "surface",
                    "desc": "The surface selected.",
                    "type": {
                      "value": "LuaSurface"
                    },
                    "optional": false
                  },
                  "area": {
                    "name": "area",
                    "desc": "The area selected.",
                    "type": {
                      "value": "BoundingBox"
                    },
                    "optional": false
                  },
                  "item": {
                    "name": "item",
                    "desc": "The item used to select the area.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "entities": {
                    "name": "entities",
                    "desc": "The entities selected.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "tiles": {
                    "name": "tiles",
                    "desc": "The tiles selected.",
                    "type": {
                      "value": "LuaTile"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_alt_selected_area": {
            "name": "on_player_alt_selected_area",
            "shortDesc": "Called after a player alt-selects an area with a selection-tool item.",
            "contains": [
              {
                "name": "on_player_alt_selected_area",
                "desc": "Called after a player alt-selects an area with a selection-tool item.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player doing the selection.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "surface": {
                    "name": "surface",
                    "desc": "The surface selected.",
                    "type": {
                      "value": "LuaSurface"
                    },
                    "optional": false
                  },
                  "area": {
                    "name": "area",
                    "desc": "The area selected.",
                    "type": {
                      "value": "BoundingBox"
                    },
                    "optional": false
                  },
                  "item": {
                    "name": "item",
                    "desc": "The item used to select the area.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "entities": {
                    "name": "entities",
                    "desc": "The entities selected.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "tiles": {
                    "name": "tiles",
                    "desc": "The tiles selected.",
                    "type": {
                      "value": "LuaTile"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_changed_surface": {
            "name": "on_player_changed_surface",
            "shortDesc": "Called after a player changes surfaces.",
            "contains": [
              {
                "name": "on_player_changed_surface",
                "desc": "Called after a player changes surfaces.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who changed surfaces.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "surface_index": {
                    "name": "surface_index",
                    "desc": "The surface index the player was on.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_selected_entity_changed": {
            "name": "on_selected_entity_changed",
            "shortDesc": "Called after the selected entity changes for a given player.",
            "contains": [
              {
                "name": "on_selected_entity_changed",
                "desc": "Called after the selected entity changes for a given player.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player whose selected entity changed.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "last_entity": {
                    "name": "last_entity",
                    "desc": "The last selected entity if it still exists and there was one.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_market_item_purchased": {
            "name": "on_market_item_purchased",
            "shortDesc": "Called after a player purchases some offer from a Market entity.",
            "contains": [
              {
                "name": "on_market_item_purchased",
                "desc": "Called after a player purchases some offer from a Market entity.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who did the purchasing.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "market": {
                    "name": "market",
                    "desc": "The market entity.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "offer_index": {
                    "name": "offer_index",
                    "desc": "The index of the offer purchased.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "count": {
                    "name": "count",
                    "desc": "The count of offers purchased.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_dropped_item": {
            "name": "on_player_dropped_item",
            "shortDesc": "Called when a player drops an item on the ground.",
            "contains": [
              {
                "name": "on_player_dropped_item",
                "desc": "Called when a player drops an item on the ground.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "entity": {
                    "name": "entity",
                    "desc": "The item-on-ground entity.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_biter_base_built": {
            "name": "on_biter_base_built",
            "shortDesc": "Called when a biter migration builds a base.",
            "contains": [
              {
                "name": "on_biter_base_built",
                "desc": "Called when a biter migration builds a base.",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "desc": "The built entity.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_changed_force": {
            "name": "on_player_changed_force",
            "shortDesc": "Called after a player changes forces.",
            "contains": [
              {
                "name": "on_player_changed_force",
                "desc": "Called after a player changes forces.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who changed forces.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "force": {
                    "name": "force",
                    "desc": "The old force.",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_entity_renamed": {
            "name": "on_entity_renamed",
            "shortDesc": "Called after an entity has been renamed either by the player or through script.",
            "contains": [
              {
                "name": "on_entity_renamed",
                "desc": "Called after an entity has been renamed either by the player or through script.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "If by_script is true this will not be included.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "by_script": {
                    "name": "by_script",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "old_name": {
                    "name": "old_name",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_gui_selection_state_changed": {
            "name": "on_gui_selection_state_changed",
            "shortDesc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) selection state is changed (related to drop-downs and listboxes).",
            "contains": [
              {
                "name": "on_gui_selection_state_changed",
                "desc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) selection state is changed (related to drop-downs and listboxes).",
                "attributes": {
                  "element": {
                    "name": "element",
                    "desc": "The element whose selection state changed.",
                    "type": {
                      "value": "LuaGuiElement"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who did the change.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_runtime_mod_setting_changed": {
            "name": "on_runtime_mod_setting_changed",
            "shortDesc": "Called when a runtime mod setting is changed by a player.",
            "contains": [
              {
                "name": "on_runtime_mod_setting_changed",
                "desc": "Called when a runtime mod setting is changed by a player.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who changed the setting or nil if changed by script.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "setting": {
                    "name": "setting",
                    "desc": "The setting name that changed.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "setting_type": {
                    "name": "setting_type",
                    "desc": "The setting type: \"runtime-per-user\", or \"runtime-global\".",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_difficulty_settings_changed": {
            "name": "on_difficulty_settings_changed",
            "shortDesc": "Called when the map difficulty settings are changed.",
            "contains": [
              {
                "name": "on_difficulty_settings_changed",
                "desc": "Called when the map difficulty settings are changed.",
                "attributes": {
                  "old_recipe_difficulty": {
                    "name": "old_recipe_difficulty",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "old_technology_difficulty": {
                    "name": "old_technology_difficulty",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_surface_created": {
            "name": "on_surface_created",
            "shortDesc": "Called when a surface is created.",
            "contains": [
              {
                "name": "on_surface_created",
                "desc": "Called when a surface is created.",
                "attributes": {
                  "surface_index": {
                    "name": "surface_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_surface_deleted": {
            "name": "on_surface_deleted",
            "shortDesc": "Called after a surface is deleted.",
            "contains": [
              {
                "name": "on_surface_deleted",
                "desc": "Called after a surface is deleted.",
                "attributes": {
                  "surface_index": {
                    "name": "surface_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_surface_deleted": {
            "name": "on_pre_surface_deleted",
            "shortDesc": "Called just before a surface is deleted.",
            "contains": [
              {
                "name": "on_pre_surface_deleted",
                "desc": "Called just before a surface is deleted.",
                "attributes": {
                  "surface_index": {
                    "name": "surface_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_mined_entity": {
            "name": "on_player_mined_entity",
            "shortDesc": "Called after the results of an entity being mined are collected just before the entity is destroyed.",
            "contains": [
              {
                "name": "on_player_mined_entity",
                "desc": "Called after the results of an entity being mined are collected just before the entity is destroyed.\n After this event any items in the buffer will be transferred into the player as if they came from mining the entity.\n Can be filtered using [LuaPlayerMinedEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPlayerMinedEntityEventFilters)",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The index of the player doing the mining.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "entity": {
                    "name": "entity",
                    "desc": "The entity that has been mined.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "buffer": {
                    "name": "buffer",
                    "desc": "The temporary inventory that holds the result of mining the entity.",
                    "type": {
                      "value": "LuaInventory"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_robot_mined_entity": {
            "name": "on_robot_mined_entity",
            "shortDesc": "Called after the results of an entity being mined are collected just before the entity is destroyed.",
            "contains": [
              {
                "name": "on_robot_mined_entity",
                "desc": "Called after the results of an entity being mined are collected just before the entity is destroyed.\n After this event any items in the buffer will be transferred into the robot as if they came from mining the entity.\n Can be filtered using [LuaRobotMinedEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaRobotMinedEntityEventFilters)",
                "attributes": {
                  "robot": {
                    "name": "robot",
                    "desc": "The robot doing the mining.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "entity": {
                    "name": "entity",
                    "desc": "The entity that has been mined.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "buffer": {
                    "name": "buffer",
                    "desc": "The temporary inventory that holds the result of mining the entity.",
                    "type": {
                      "value": "LuaInventory"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_train_created": {
            "name": "on_train_created",
            "shortDesc": "Called when a new train is created either through disconnecting/connecting an existing one or building a new one.",
            "contains": [
              {
                "name": "on_train_created",
                "desc": "Called when a new train is created either through disconnecting/connecting an existing one or building a new one.",
                "attributes": {
                  "train": {
                    "name": "train",
                    "type": {
                      "value": "LuaTrain"
                    },
                    "optional": false
                  },
                  "old_train_id_1": {
                    "name": "old_train_id_1",
                    "desc": "The first old train id when splitting/merging trains.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "old_train_id_2": {
                    "name": "old_train_id_2",
                    "desc": "The second old train id when splitting/merging trains.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_gui_elem_changed": {
            "name": "on_gui_elem_changed",
            "shortDesc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) element value is changed (related to choose element buttons).",
            "contains": [
              {
                "name": "on_gui_elem_changed",
                "desc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) element value is changed (related to choose element buttons).",
                "attributes": {
                  "element": {
                    "name": "element",
                    "desc": "The element whose element value changed.",
                    "type": {
                      "value": "LuaGuiElement"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who did the change.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_setup_blueprint": {
            "name": "on_player_setup_blueprint",
            "shortDesc": "Called when a player selects an area with a blueprint.",
            "contains": [
              {
                "name": "on_player_setup_blueprint",
                "desc": "Called when a player selects an area with a blueprint.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player doing the selection.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "surface": {
                    "name": "surface",
                    "desc": "The surface selected.",
                    "type": {
                      "value": "LuaSurface"
                    },
                    "optional": false
                  },
                  "area": {
                    "name": "area",
                    "desc": "The area selected.",
                    "type": {
                      "value": "BoundingBox"
                    },
                    "optional": false
                  },
                  "item": {
                    "name": "item",
                    "desc": "The item used to select the area.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "alt": {
                    "name": "alt",
                    "desc": "If normal selection or alt selection was used.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "mapping": {
                    "name": "mapping",
                    "desc": "The blueprint entity index to source entity mapping. Note: if any mod changes the blueprint this will be incorrect.",
                    "type": {
                      "value": "LazyLoadedValue"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_deconstructed_area": {
            "name": "on_player_deconstructed_area",
            "shortDesc": "Called when a player selects an area with a deconstruction planner.",
            "contains": [
              {
                "name": "on_player_deconstructed_area",
                "desc": "Called when a player selects an area with a deconstruction planner.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player doing the selection.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "surface": {
                    "name": "surface",
                    "desc": "The surface selected.",
                    "type": {
                      "value": "LuaSurface"
                    },
                    "optional": false
                  },
                  "area": {
                    "name": "area",
                    "desc": "The area selected.",
                    "type": {
                      "value": "BoundingBox"
                    },
                    "optional": false
                  },
                  "item": {
                    "name": "item",
                    "desc": "The item used to select the area.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "alt": {
                    "name": "alt",
                    "desc": "If normal selection or alt selection was used.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_configured_blueprint": {
            "name": "on_player_configured_blueprint",
            "shortDesc": "Called when a player clicks the \"confirm\" button in the configure Blueprint GUI.",
            "contains": [
              {
                "name": "on_player_configured_blueprint",
                "desc": "Called when a player clicks the \"confirm\" button in the configure Blueprint GUI.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_console_chat": {
            "name": "on_console_chat",
            "shortDesc": "Called when someone talks in-game either a player or through the server interface.",
            "contains": [
              {
                "name": "on_console_chat",
                "desc": "Called when someone talks in-game either a player or through the server interface.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player if any.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "message": {
                    "name": "message",
                    "desc": "The chat message.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_console_command": {
            "name": "on_console_command",
            "shortDesc": "Called when someone enters a command-like message regardless of it being a valid command.",
            "contains": [
              {
                "name": "on_console_command",
                "desc": "Called when someone enters a command-like message regardless of it being a valid command.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player if any.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "command": {
                    "name": "command",
                    "desc": "The command as typed without the preceding forward slash ('/').",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "parameters": {
                    "name": "parameters",
                    "desc": "The parameters provided if any.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_removed": {
            "name": "on_player_removed",
            "shortDesc": "Called when a player is removed (deleted) from the game.",
            "contains": [
              {
                "name": "on_player_removed",
                "desc": "Called when a player is removed (deleted) from the game.\n Not to be confused with the player logging of this is different in that the player is deleted as if he never existed in the save file.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player index that was removed",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_player_removed": {
            "name": "on_pre_player_removed",
            "shortDesc": "Called before a player is removed (deleted) from the game.",
            "contains": [
              {
                "name": "on_pre_player_removed",
                "desc": "Called before a player is removed (deleted) from the game.\n Not to be confused with the player logging of this is different in that the player is deleted as if he never existed in the save file.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player index that will be removed",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_used_capsule": {
            "name": "on_player_used_capsule",
            "shortDesc": "Called when a player uses a capsule that results in some game action.",
            "contains": [
              {
                "name": "on_player_used_capsule",
                "desc": "Called when a player uses a capsule that results in some game action.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "item": {
                    "name": "item",
                    "desc": "The capsule item used.",
                    "type": {
                      "value": "LuaItemPrototype"
                    },
                    "optional": false
                  },
                  "position": {
                    "name": "position",
                    "desc": "The position the capsule was used.",
                    "type": {
                      "value": "Position"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "script_raised_built": {
            "name": "script_raised_built",
            "shortDesc": "A static event mods can use to tell other mods they built something with a script.",
            "contains": [
              {
                "name": "script_raised_built",
                "desc": "A static event mods can use to tell other mods they built something with a script.\n This event is only raised if a mod uses it with script.raise_event() or when 'raise_built' is passed to [LuaSurface::create_entity](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.create_entity) .\n Can be filtered using [LuaScriptRaisedBuiltEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaScriptRaisedBuiltEventFilters)",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "script_raised_destroy": {
            "name": "script_raised_destroy",
            "shortDesc": "A static event mods can use to tell other mods they destroyed something with a script.",
            "contains": [
              {
                "name": "script_raised_destroy",
                "desc": "A static event mods can use to tell other mods they destroyed something with a script.\n This event is only raised if a mod uses it with script.raise_event() or when 'raise_destroy' is passed to [LuaEntity::destroy](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.destroy) .\n Can be filtered using [LuaScriptRaisedDestroyEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaScriptRaisedDestroyEventFilters)",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "script_raised_revive": {
            "name": "script_raised_revive",
            "shortDesc": "A static event mods can use to tell other mods they revived something with a script.",
            "contains": [
              {
                "name": "script_raised_revive",
                "desc": "A static event mods can use to tell other mods they revived something with a script.\n This event is only raised if a mod uses it with script.raise_event() or when 'raise_revive' is passed to [LuaEntity::revive](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.revive) .\n Can be filtered using [LuaScriptRaisedReviveEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaScriptRaisedReviveEventFilters)",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "tags": {
                    "name": "tags",
                    "desc": "The tags associated with this entity if any.",
                    "type": {
                      "value": "Tags"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "script_raised_set_tiles": {
            "name": "script_raised_set_tiles",
            "shortDesc": "A static event mods can use to tell other mods they changed tiles on a surface with a script.",
            "contains": [
              {
                "name": "script_raised_set_tiles",
                "desc": "A static event mods can use to tell other mods they changed tiles on a surface with a script.\n This event is only raised if a mod uses it with script.raise_event() or when `raise_event` is passed to [LuaSurface::set_tiles](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.set_tiles) .",
                "attributes": {
                  "surface_index": {
                    "name": "surface_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "tiles": {
                    "name": "tiles",
                    "desc": "Each Tile is a table name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)",
                    "type": {
                      "value": "Tile"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_promoted": {
            "name": "on_player_promoted",
            "shortDesc": "Called when a player is promoted.",
            "contains": [
              {
                "name": "on_player_promoted",
                "desc": "Called when a player is promoted.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_demoted": {
            "name": "on_player_demoted",
            "shortDesc": "Called when a player is demoted.",
            "contains": [
              {
                "name": "on_player_demoted",
                "desc": "Called when a player is demoted.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_combat_robot_expired": {
            "name": "on_combat_robot_expired",
            "shortDesc": "Called when a combat robot expires through a lack of energy, or timeout.",
            "contains": [
              {
                "name": "on_combat_robot_expired",
                "desc": "Called when a combat robot expires through a lack of energy, or timeout.",
                "attributes": {
                  "robot": {
                    "name": "robot",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "owner": {
                    "name": "owner",
                    "desc": "The entity that owns the robot if any.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_changed_position": {
            "name": "on_player_changed_position",
            "shortDesc": "Called when the tile position a player is located at changes.",
            "contains": [
              {
                "name": "on_player_changed_position",
                "desc": "Called when the tile position a player is located at changes.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_mod_item_opened": {
            "name": "on_mod_item_opened",
            "shortDesc": "Called when the player uses the 'Open item GUI' control on an item defined with the 'mod-openable' flag",
            "contains": [
              {
                "name": "on_mod_item_opened",
                "desc": "Called when the player uses the 'Open item GUI' control on an item defined with the 'mod-openable' flag",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "item": {
                    "name": "item",
                    "desc": "The item clicked on.",
                    "type": {
                      "value": "LuaItemPrototype"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_gui_opened": {
            "name": "on_gui_opened",
            "shortDesc": "Called when the player opens a GUI.",
            "contains": [
              {
                "name": "on_gui_opened",
                "desc": "Called when the player opens a GUI.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "gui_type": {
                    "name": "gui_type",
                    "desc": "The GUI type that was opened.",
                    "type": {
                      "value": "defines.gui_type"
                    },
                    "optional": false
                  },
                  "entity": {
                    "name": "entity",
                    "desc": "The entity that was opened",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  },
                  "item": {
                    "name": "item",
                    "desc": "The item that was opened",
                    "type": {
                      "value": "LuaItemStack"
                    },
                    "optional": true
                  },
                  "equipment": {
                    "name": "equipment",
                    "desc": "The equipment that was opened",
                    "type": {
                      "value": "LuaEquipment"
                    },
                    "optional": true
                  },
                  "other_player": {
                    "name": "other_player",
                    "desc": "The other player that was opened",
                    "type": {
                      "value": "LuaPlayer"
                    },
                    "optional": true
                  },
                  "element": {
                    "name": "element",
                    "desc": "The custom GUI element that was opened",
                    "type": {
                      "value": "LuaGuiElement"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_gui_closed": {
            "name": "on_gui_closed",
            "shortDesc": "Called when the player closes the GUI they have open.",
            "contains": [
              {
                "name": "on_gui_closed",
                "desc": "Called when the player closes the GUI they have open.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "gui_type": {
                    "name": "gui_type",
                    "desc": "The GUI type that was open.",
                    "type": {
                      "value": "defines.gui_type"
                    },
                    "optional": false
                  },
                  "entity": {
                    "name": "entity",
                    "desc": "The entity that was open",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  },
                  "item": {
                    "name": "item",
                    "desc": "The item that was open",
                    "type": {
                      "value": "LuaItemStack"
                    },
                    "optional": true
                  },
                  "equipment": {
                    "name": "equipment",
                    "desc": "The equipment that was open",
                    "type": {
                      "value": "LuaEquipment"
                    },
                    "optional": true
                  },
                  "other_player": {
                    "name": "other_player",
                    "desc": "The other player that was open",
                    "type": {
                      "value": "LuaPlayer"
                    },
                    "optional": true
                  },
                  "element": {
                    "name": "element",
                    "desc": "The custom GUI element that was open",
                    "type": {
                      "value": "LuaGuiElement"
                    },
                    "optional": true
                  },
                  "technology": {
                    "name": "technology",
                    "desc": "The technology that was automatically selected when opening the research GUI",
                    "type": {
                      "value": "LuaTechnology"
                    },
                    "optional": true
                  },
                  "tile_position": {
                    "name": "tile_position",
                    "desc": "The tile position that was open",
                    "type": {
                      "value": "TilePosition"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_gui_value_changed": {
            "name": "on_gui_value_changed",
            "shortDesc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) slider value is changed (related to the slider element).",
            "contains": [
              {
                "name": "on_gui_value_changed",
                "desc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) slider value is changed (related to the slider element).",
                "attributes": {
                  "element": {
                    "name": "element",
                    "desc": "The element whose value changed.",
                    "type": {
                      "value": "LuaGuiElement"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who did the change.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_muted": {
            "name": "on_player_muted",
            "shortDesc": "Called when a player is muted.",
            "contains": [
              {
                "name": "on_player_muted",
                "desc": "Called when a player is muted.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_unmuted": {
            "name": "on_player_unmuted",
            "shortDesc": "Called when a player is unmuted.",
            "contains": [
              {
                "name": "on_player_unmuted",
                "desc": "Called when a player is unmuted.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_cheat_mode_enabled": {
            "name": "on_player_cheat_mode_enabled",
            "shortDesc": "Called when cheat mode is enabled on a player.",
            "contains": [
              {
                "name": "on_player_cheat_mode_enabled",
                "desc": "Called when cheat mode is enabled on a player.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_cheat_mode_disabled": {
            "name": "on_player_cheat_mode_disabled",
            "shortDesc": "Called when cheat mode is disabled on a player.",
            "contains": [
              {
                "name": "on_player_cheat_mode_disabled",
                "desc": "Called when cheat mode is disabled on a player.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_character_corpse_expired": {
            "name": "on_character_corpse_expired",
            "shortDesc": "Called when a character corpse expires due to timeout or all of the items being removed from it.",
            "contains": [
              {
                "name": "on_character_corpse_expired",
                "desc": "Called when a character corpse expires due to timeout or all of the items being removed from it.",
                "attributes": {
                  "corpse": {
                    "name": "corpse",
                    "desc": "The corpse.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_ghost_deconstructed": {
            "name": "on_pre_ghost_deconstructed",
            "shortDesc": "Called before a ghost entity is destroyed as a result of being marked for deconstruction.",
            "contains": [
              {
                "name": "on_pre_ghost_deconstructed",
                "desc": "Called before a ghost entity is destroyed as a result of being marked for deconstruction.\n Can be filtered using [LuaPreGhostDeconstructedEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPreGhostDeconstructedEventFilters)",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player that did the deconstruction if any.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "ghost": {
                    "name": "ghost",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_pipette": {
            "name": "on_player_pipette",
            "shortDesc": "Called when a player invokes the \"smart pipette\" over an entity.",
            "contains": [
              {
                "name": "on_player_pipette",
                "desc": "Called when a player invokes the \"smart pipette\" over an entity.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "item": {
                    "name": "item",
                    "desc": "The item put in the cursor",
                    "type": {
                      "value": "LuaItemPrototype"
                    },
                    "optional": false
                  },
                  "used_cheat_mode": {
                    "name": "used_cheat_mode",
                    "desc": "If cheat mode was used to give a free stack of the item.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_display_resolution_changed": {
            "name": "on_player_display_resolution_changed",
            "shortDesc": "Called when the display resolution changes for a given player.",
            "contains": [
              {
                "name": "on_player_display_resolution_changed",
                "desc": "Called when the display resolution changes for a given player.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "old_resolution": {
                    "name": "old_resolution",
                    "desc": "The old display resolution",
                    "type": {
                      "value": "DisplayResolution"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_display_scale_changed": {
            "name": "on_player_display_scale_changed",
            "shortDesc": "Called when the display scale changes for a given player.",
            "contains": [
              {
                "name": "on_player_display_scale_changed",
                "desc": "Called when the display scale changes for a given player.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "old_scale": {
                    "name": "old_scale",
                    "desc": "The old display scale",
                    "type": {
                      "value": "double"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_player_crafted_item": {
            "name": "on_pre_player_crafted_item",
            "shortDesc": "Called when a player queues something to be crafted.",
            "contains": [
              {
                "name": "on_pre_player_crafted_item",
                "desc": "Called when a player queues something to be crafted.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "recipe": {
                    "name": "recipe",
                    "desc": "The recipe.",
                    "type": {
                      "value": "LuaRecipe"
                    },
                    "optional": false
                  },
                  "items": {
                    "name": "items",
                    "desc": "The items removed from the players inventory to do the crafting.",
                    "type": {
                      "value": "LuaInventory"
                    },
                    "optional": false
                  },
                  "queued_count": {
                    "name": "queued_count",
                    "desc": "The number of recipes queued.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_cancelled_crafting": {
            "name": "on_player_cancelled_crafting",
            "shortDesc": "Called when a player cancels crafting.",
            "contains": [
              {
                "name": "on_player_cancelled_crafting",
                "desc": "Called when a player cancels crafting.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "items": {
                    "name": "items",
                    "type": {
                      "value": "LuaInventory"
                    },
                    "optional": false
                  },
                  "recipe": {
                    "name": "recipe",
                    "type": {
                      "value": "LuaRecipe"
                    },
                    "optional": false
                  },
                  "cancel_count": {
                    "name": "cancel_count",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_chunk_charted": {
            "name": "on_chunk_charted",
            "shortDesc": "Called when a chunk is charted or re-charted.",
            "contains": [
              {
                "name": "on_chunk_charted",
                "desc": "Called when a chunk is charted or re-charted.",
                "attributes": {
                  "surface_index": {
                    "name": "surface_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "position": {
                    "name": "position",
                    "type": {
                      "value": "ChunkPosition"
                    },
                    "optional": false
                  },
                  "area": {
                    "name": "area",
                    "desc": "Area of the chunk.",
                    "type": {
                      "value": "BoundingBox"
                    },
                    "optional": false
                  },
                  "force": {
                    "name": "force",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_technology_effects_reset": {
            "name": "on_technology_effects_reset",
            "shortDesc": "Called when [LuaForce::reset_technology_effects](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.reset_technology_effects) is finished.",
            "contains": [
              {
                "name": "on_technology_effects_reset",
                "desc": "Called when [LuaForce::reset_technology_effects](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.reset_technology_effects) is finished.",
                "attributes": {
                  "force": {
                    "name": "force",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_force_reset": {
            "name": "on_force_reset",
            "shortDesc": "Called when [LuaForce::reset](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.reset) is finished.",
            "contains": [
              {
                "name": "on_force_reset",
                "desc": "Called when [LuaForce::reset](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.reset) is finished.",
                "attributes": {
                  "force": {
                    "name": "force",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_land_mine_armed": {
            "name": "on_land_mine_armed",
            "shortDesc": "Called when a land mine is armed.",
            "contains": [
              {
                "name": "on_land_mine_armed",
                "desc": "Called when a land mine is armed.",
                "attributes": {
                  "mine": {
                    "name": "mine",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_forces_merged": {
            "name": "on_forces_merged",
            "shortDesc": "Called after two forces have been merged using `game.merge_forces()` .",
            "contains": [
              {
                "name": "on_forces_merged",
                "desc": "Called after two forces have been merged using `game.merge_forces()` .",
                "attributes": {
                  "source_name": {
                    "name": "source_name",
                    "desc": "The force destroyed.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "source_index": {
                    "name": "source_index",
                    "desc": "The index of the destroyed force.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "destination": {
                    "name": "destination",
                    "desc": "The force entities where reassigned to.",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_trash_inventory_changed": {
            "name": "on_player_trash_inventory_changed",
            "shortDesc": "Called after a players trash inventory changed in some way.",
            "contains": [
              {
                "name": "on_player_trash_inventory_changed",
                "desc": "Called after a players trash inventory changed in some way.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_player_left_game": {
            "name": "on_pre_player_left_game",
            "shortDesc": "Called before a player leaves the game.",
            "contains": [
              {
                "name": "on_pre_player_left_game",
                "desc": "Called before a player leaves the game.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "reason": {
                    "name": "reason",
                    "type": {
                      "value": "defines.disconnect_reason"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_surface_cleared": {
            "name": "on_pre_surface_cleared",
            "shortDesc": "Called just before a surface is cleared (all entities removed and all chunks deleted).",
            "contains": [
              {
                "name": "on_pre_surface_cleared",
                "desc": "Called just before a surface is cleared (all entities removed and all chunks deleted).",
                "attributes": {
                  "surface_index": {
                    "name": "surface_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_surface_cleared": {
            "name": "on_surface_cleared",
            "shortDesc": "Called just after a surface is cleared (all entities removed and all chunks deleted).",
            "contains": [
              {
                "name": "on_surface_cleared",
                "desc": "Called just after a surface is cleared (all entities removed and all chunks deleted).",
                "attributes": {
                  "surface_index": {
                    "name": "surface_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_chunk_deleted": {
            "name": "on_chunk_deleted",
            "shortDesc": "Called when one or more chunks are deleted using [LuaSurface::delete_chunk](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.delete_chunk) .",
            "contains": [
              {
                "name": "on_chunk_deleted",
                "desc": "Called when one or more chunks are deleted using [LuaSurface::delete_chunk](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.delete_chunk) .",
                "attributes": {
                  "surface_index": {
                    "name": "surface_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "positions": {
                    "name": "positions",
                    "desc": "The chunks deleted.",
                    "type": {
                      "value": "ChunkPosition"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_chunk_deleted": {
            "name": "on_pre_chunk_deleted",
            "shortDesc": "Called before one or more chunks are deleted using [LuaSurface::delete_chunk](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.delete_chunk) .",
            "contains": [
              {
                "name": "on_pre_chunk_deleted",
                "desc": "Called before one or more chunks are deleted using [LuaSurface::delete_chunk](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.delete_chunk) .",
                "attributes": {
                  "surface_index": {
                    "name": "surface_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "positions": {
                    "name": "positions",
                    "desc": "The chunks to be deleted.",
                    "type": {
                      "value": "ChunkPosition"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_train_schedule_changed": {
            "name": "on_train_schedule_changed",
            "shortDesc": "Called when a trains schedule is changed either by the player or through script.",
            "contains": [
              {
                "name": "on_train_schedule_changed",
                "desc": "Called when a trains schedule is changed either by the player or through script.",
                "attributes": {
                  "train": {
                    "name": "train",
                    "type": {
                      "value": "LuaTrain"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who made the change if any.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_banned": {
            "name": "on_player_banned",
            "shortDesc": "Called when a player is banned.",
            "contains": [
              {
                "name": "on_player_banned",
                "desc": "Called when a player is banned.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player banned.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "player_name": {
                    "name": "player_name",
                    "desc": "The banned player name.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "by_player": {
                    "name": "by_player",
                    "desc": "The player that did the banning if any.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "reason": {
                    "name": "reason",
                    "desc": "The reason given if any.",
                    "type": {
                      "value": "string"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_kicked": {
            "name": "on_player_kicked",
            "shortDesc": "Called when a player is kicked.",
            "contains": [
              {
                "name": "on_player_kicked",
                "desc": "Called when a player is kicked.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player kicked.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "by_player": {
                    "name": "by_player",
                    "desc": "The player that did the kicking if any.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "reason": {
                    "name": "reason",
                    "desc": "The reason given if any.",
                    "type": {
                      "value": "string"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_unbanned": {
            "name": "on_player_unbanned",
            "shortDesc": "Called when a player is un-banned.",
            "contains": [
              {
                "name": "on_player_unbanned",
                "desc": "Called when a player is un-banned.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player un-banned.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "player_name": {
                    "name": "player_name",
                    "desc": "The player name un-banned.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "by_player": {
                    "name": "by_player",
                    "desc": "The player that did the un-banning if any.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "reason": {
                    "name": "reason",
                    "desc": "The reason the player was banned if any.",
                    "type": {
                      "value": "string"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_rocket_launch_ordered": {
            "name": "on_rocket_launch_ordered",
            "shortDesc": "Called when a rocket silo is ordered to be launched.",
            "contains": [
              {
                "name": "on_rocket_launch_ordered",
                "desc": "Called when a rocket silo is ordered to be launched.",
                "attributes": {
                  "rocket": {
                    "name": "rocket",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "rocket_silo": {
                    "name": "rocket_silo",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player that is riding the rocket, if any.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_script_path_request_finished": {
            "name": "on_script_path_request_finished",
            "shortDesc": "Called when a script path request completes.",
            "contains": [
              {
                "name": "on_script_path_request_finished",
                "desc": "Called when a script path request completes. [LuaSurface::request_path](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.request_path)\nEach Waypoint is a table:\npath will be nil if pathfinding failed.",
                "attributes": {
                  "path": {
                    "name": "path",
                    "type": {
                      "value": "Waypoint"
                    },
                    "optional": true
                  },
                  "id": {
                    "name": "id",
                    "desc": "Handle to associate the callback with a particular call to LuaSurface::request_path .",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "try_again_later": {
                    "name": "try_again_later",
                    "desc": "Indicates that the pathfinder failed because it is too busy, and you can retry later.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_ai_command_completed": {
            "name": "on_ai_command_completed",
            "shortDesc": "Called when a unit/group completes a command.",
            "contains": [
              {
                "name": "on_ai_command_completed",
                "desc": "Called when a unit/group completes a command.",
                "attributes": {
                  "unit_number": {
                    "name": "unit_number",
                    "desc": "unit_number/group_number of the unit/group which just completed a command.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "result": {
                    "name": "result",
                    "type": {
                      "value": "defines.behavior_result"
                    },
                    "optional": false
                  },
                  "was_distracted": {
                    "name": "was_distracted",
                    "desc": "Was this command generated by a distraction.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_marked_for_upgrade": {
            "name": "on_marked_for_upgrade",
            "shortDesc": "Called when an entity is marked for upgrade with the Upgrade planner or via script.",
            "contains": [
              {
                "name": "on_marked_for_upgrade",
                "desc": "Called when an entity is marked for upgrade with the Upgrade planner or via script.\n Can be filtered using [LuaEntityMarkedForUpgradeEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaEntityMarkedForUpgradeEventFilters)",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "target": {
                    "name": "target",
                    "type": {
                      "value": "LuaEntityPrototype"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "direction": {
                    "name": "direction",
                    "desc": "The new direction (if any)",
                    "type": {
                      "value": "defines.direction"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_cancelled_upgrade": {
            "name": "on_cancelled_upgrade",
            "shortDesc": "Called when the upgrade of an entity is canceled.",
            "contains": [
              {
                "name": "on_cancelled_upgrade",
                "desc": "Called when the upgrade of an entity is canceled.\n Can be filtered using [LuaUpgradeCancelledEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaUpgradeCancelledEventFilters)",
                "attributes": {
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_toggled_map_editor": {
            "name": "on_player_toggled_map_editor",
            "shortDesc": "Called when a player toggles the map editor on or off.",
            "contains": [
              {
                "name": "on_player_toggled_map_editor",
                "desc": "Called when a player toggles the map editor on or off.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_entity_cloned": {
            "name": "on_entity_cloned",
            "shortDesc": "Called when an entity is cloned.",
            "contains": [
              {
                "name": "on_entity_cloned",
                "desc": "Called when an entity is cloned. Can be filtered for the source entity using [LuaEntityClonedEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaEntityClonedEventFilters)",
                "attributes": {
                  "source": {
                    "name": "source",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "destination": {
                    "name": "destination",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_area_cloned": {
            "name": "on_area_cloned",
            "shortDesc": "Called when an area of the map is cloned.",
            "contains": [
              {
                "name": "on_area_cloned",
                "desc": "Called when an area of the map is cloned.",
                "attributes": {
                  "source_surface": {
                    "name": "source_surface",
                    "type": {
                      "value": "LuaSurface"
                    },
                    "optional": false
                  },
                  "source_area": {
                    "name": "source_area",
                    "type": {
                      "value": "BoundingBox"
                    },
                    "optional": false
                  },
                  "destination_surface": {
                    "name": "destination_surface",
                    "type": {
                      "value": "LuaSurface"
                    },
                    "optional": false
                  },
                  "destination_area": {
                    "name": "destination_area",
                    "type": {
                      "value": "BoundingBox"
                    },
                    "optional": false
                  },
                  "destination_force": {
                    "name": "destination_force",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": true
                  },
                  "clone_tiles": {
                    "name": "clone_tiles",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "clone_entities": {
                    "name": "clone_entities",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "clone_decoratives": {
                    "name": "clone_decoratives",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "clear_destination_entities": {
                    "name": "clear_destination_entities",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "clear_destination_decoratives": {
                    "name": "clear_destination_decoratives",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_brush_cloned": {
            "name": "on_brush_cloned",
            "shortDesc": "Called when a set of positions on the map is cloned.",
            "contains": [
              {
                "name": "on_brush_cloned",
                "desc": "Called when a set of positions on the map is cloned.",
                "attributes": {
                  "source_offset": {
                    "name": "source_offset",
                    "type": {
                      "value": "TilePosition"
                    },
                    "optional": false
                  },
                  "destination_offset": {
                    "name": "destination_offset",
                    "type": {
                      "value": "TilePosition"
                    },
                    "optional": false
                  },
                  "source_surface": {
                    "name": "source_surface",
                    "type": {
                      "value": "LuaSurface"
                    },
                    "optional": false
                  },
                  "source_positions": {
                    "name": "source_positions",
                    "type": {
                      "value": "TilePosition"
                    },
                    "optional": false
                  },
                  "destination_surface": {
                    "name": "destination_surface",
                    "type": {
                      "value": "LuaSurface"
                    },
                    "optional": false
                  },
                  "destination_force": {
                    "name": "destination_force",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": true
                  },
                  "clone_tiles": {
                    "name": "clone_tiles",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "clone_entities": {
                    "name": "clone_entities",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "clone_decoratives": {
                    "name": "clone_decoratives",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "clear_destination_entities": {
                    "name": "clear_destination_entities",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  },
                  "clear_destination_decoratives": {
                    "name": "clear_destination_decoratives",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_game_created_from_scenario": {
            "name": "on_game_created_from_scenario",
            "shortDesc": "Called when a game is created from a scenario.",
            "contains": [
              {
                "name": "on_game_created_from_scenario",
                "desc": "Called when a game is created from a scenario.",
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_surface_imported": {
            "name": "on_surface_imported",
            "shortDesc": "Called after a surface is imported.",
            "contains": [
              {
                "name": "on_surface_imported",
                "desc": "Called after a surface is imported.",
                "attributes": {
                  "surface_index": {
                    "name": "surface_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "original_name": {
                    "name": "original_name",
                    "desc": "The original surface name.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_surface_renamed": {
            "name": "on_surface_renamed",
            "shortDesc": "Called when a surface is renamed.",
            "contains": [
              {
                "name": "on_surface_renamed",
                "desc": "Called when a surface is renamed.",
                "attributes": {
                  "surface_index": {
                    "name": "surface_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "old_name": {
                    "name": "old_name",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "new_name": {
                    "name": "new_name",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_toggled_alt_mode": {
            "name": "on_player_toggled_alt_mode",
            "shortDesc": "Called when a player toggles alt mode, also known as \"show entity info\".",
            "contains": [
              {
                "name": "on_player_toggled_alt_mode",
                "desc": "Called when a player toggles alt mode, also known as \"show entity info\".",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "alt_mode": {
                    "name": "alt_mode",
                    "desc": "The new alt mode value. This value is a shortcut for accessing GameViewSettings::show_entity_info on the player.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_repaired_entity": {
            "name": "on_player_repaired_entity",
            "shortDesc": "Called when a player repairs an entity.",
            "contains": [
              {
                "name": "on_player_repaired_entity",
                "desc": "Called when a player repairs an entity.\n Can be filtered using [LuaPlayerRepairedEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPlayerRepairedEntityEventFilters)",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_fast_transferred": {
            "name": "on_player_fast_transferred",
            "shortDesc": "Called when a player fast-transfers something to or from an entity.",
            "contains": [
              {
                "name": "on_player_fast_transferred",
                "desc": "Called when a player fast-transfers something to or from an entity.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "from_player": {
                    "name": "from_player",
                    "desc": "If the transfer was from player to entity or entity to player.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_robot_exploded_cliff": {
            "name": "on_pre_robot_exploded_cliff",
            "shortDesc": "Called directly before a robot explodes cliffs.",
            "contains": [
              {
                "name": "on_pre_robot_exploded_cliff",
                "desc": "Called directly before a robot explodes cliffs.",
                "attributes": {
                  "robot": {
                    "name": "robot",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "cliff": {
                    "name": "cliff",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "item": {
                    "name": "item",
                    "desc": "The cliff explosive used.",
                    "type": {
                      "value": "LuaItemPrototype"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_robot_exploded_cliff": {
            "name": "on_robot_exploded_cliff",
            "shortDesc": "Called directly after a robot explodes cliffs.",
            "contains": [
              {
                "name": "on_robot_exploded_cliff",
                "desc": "Called directly after a robot explodes cliffs.",
                "attributes": {
                  "robot": {
                    "name": "robot",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "item": {
                    "name": "item",
                    "desc": "The cliff explosive used.",
                    "type": {
                      "value": "LuaItemPrototype"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_entity_spawned": {
            "name": "on_entity_spawned",
            "shortDesc": "Called when an entity is spawned by a EnemySpawner",
            "contains": [
              {
                "name": "on_entity_spawned",
                "desc": "Called when an entity is spawned by a EnemySpawner",
                "attributes": {
                  "spawner": {
                    "name": "spawner",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "entity": {
                    "name": "entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_cutscene_waypoint_reached": {
            "name": "on_cutscene_waypoint_reached",
            "shortDesc": "Called when a cutscene is playing, each time it reaches a waypoint in that cutscene.",
            "contains": [
              {
                "name": "on_cutscene_waypoint_reached",
                "desc": "Called when a cutscene is playing, each time it reaches a waypoint in that cutscene.\nThis refers to an index in the table previously passed to set_controller which started the cutscene.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player index of the player viewing the cutscene.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "waypoint_index": {
                    "name": "waypoint_index",
                    "desc": "The index of the waypoint we just completed.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_unit_group_created": {
            "name": "on_unit_group_created",
            "shortDesc": "Called when a new unit group is created, before any members are added to it.",
            "contains": [
              {
                "name": "on_unit_group_created",
                "desc": "Called when a new unit group is created, before any members are added to it.",
                "attributes": {
                  "group": {
                    "name": "group",
                    "type": {
                      "value": "LuaUnitGroup"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_unit_added_to_group": {
            "name": "on_unit_added_to_group",
            "shortDesc": "Called when a unit is added to a unit group.",
            "contains": [
              {
                "name": "on_unit_added_to_group",
                "desc": "Called when a unit is added to a unit group.",
                "attributes": {
                  "unit": {
                    "name": "unit",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "group": {
                    "name": "group",
                    "type": {
                      "value": "LuaUnitGroup"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_unit_removed_from_group": {
            "name": "on_unit_removed_from_group",
            "shortDesc": "Called when a unit is removed from a unit group.",
            "contains": [
              {
                "name": "on_unit_removed_from_group",
                "desc": "Called when a unit is removed from a unit group.",
                "attributes": {
                  "unit": {
                    "name": "unit",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "group": {
                    "name": "group",
                    "type": {
                      "value": "LuaUnitGroup"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_unit_group_finished_gathering": {
            "name": "on_unit_group_finished_gathering",
            "shortDesc": "Called when a unit group finishes gathering and starts executing its command.",
            "contains": [
              {
                "name": "on_unit_group_finished_gathering",
                "desc": "Called when a unit group finishes gathering and starts executing its command.",
                "attributes": {
                  "group": {
                    "name": "group",
                    "type": {
                      "value": "LuaUnitGroup"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_build_base_arrived": {
            "name": "on_build_base_arrived",
            "shortDesc": "Called when a [defines.command.build_base](https://lua-api.factorio.com/latest/defines.html#defines.command.build_base) command reaches its destination, and before building starts.",
            "contains": [
              {
                "name": "on_build_base_arrived",
                "desc": "Called when a [defines.command.build_base](https://lua-api.factorio.com/latest/defines.html#defines.command.build_base) command reaches its destination, and before building starts.",
                "attributes": {
                  "unit": {
                    "name": "unit",
                    "desc": "The unit the command was assigned to.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  },
                  "group": {
                    "name": "group",
                    "desc": "The unit group the command was assigned to.",
                    "type": {
                      "value": "LuaUnitGroup"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_chart_tag_added": {
            "name": "on_chart_tag_added",
            "shortDesc": "Called when a chart tag is created.",
            "contains": [
              {
                "name": "on_chart_tag_added",
                "desc": "Called when a chart tag is created.",
                "attributes": {
                  "tag": {
                    "name": "tag",
                    "type": {
                      "value": "LuaCustomChartTag"
                    },
                    "optional": false
                  },
                  "force": {
                    "name": "force",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_chart_tag_modified": {
            "name": "on_chart_tag_modified",
            "shortDesc": "Called when a chart tag is modified by a player.",
            "contains": [
              {
                "name": "on_chart_tag_modified",
                "desc": "Called when a chart tag is modified by a player.",
                "attributes": {
                  "tag": {
                    "name": "tag",
                    "type": {
                      "value": "LuaCustomChartTag"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "force": {
                    "name": "force",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  },
                  "old_text": {
                    "name": "old_text",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "old_icon": {
                    "name": "old_icon",
                    "type": {
                      "value": "SignalID"
                    },
                    "optional": false
                  },
                  "old_player_index": {
                    "name": "old_player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_chart_tag_removed": {
            "name": "on_chart_tag_removed",
            "shortDesc": "Called just before a chart tag is deleted.",
            "contains": [
              {
                "name": "on_chart_tag_removed",
                "desc": "Called just before a chart tag is deleted.",
                "attributes": {
                  "tag": {
                    "name": "tag",
                    "type": {
                      "value": "LuaCustomChartTag"
                    },
                    "optional": false
                  },
                  "force": {
                    "name": "force",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_lua_shortcut": {
            "name": "on_lua_shortcut",
            "shortDesc": "Called when a custom Lua shortcut is pressed.",
            "contains": [
              {
                "name": "on_lua_shortcut",
                "desc": "Called when a custom Lua shortcut is pressed.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "prototype_name": {
                    "name": "prototype_name",
                    "desc": "Shortcut prototype name of the shortcut that was clicked.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_gui_location_changed": {
            "name": "on_gui_location_changed",
            "shortDesc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) element location is changed (related to frames in `player.gui.screen` ).",
            "contains": [
              {
                "name": "on_gui_location_changed",
                "desc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) element location is changed (related to frames in `player.gui.screen` ).",
                "attributes": {
                  "element": {
                    "name": "element",
                    "desc": "The element whose location changed.",
                    "type": {
                      "value": "LuaGuiElement"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who did the change.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_gui_selected_tab_changed": {
            "name": "on_gui_selected_tab_changed",
            "shortDesc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) selected tab is changed (related to tabbed-panes).",
            "contains": [
              {
                "name": "on_gui_selected_tab_changed",
                "desc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) selected tab is changed (related to tabbed-panes).",
                "attributes": {
                  "element": {
                    "name": "element",
                    "desc": "The tabbed pane whose selected tab changed.",
                    "type": {
                      "value": "LuaGuiElement"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who did the change.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_gui_switch_state_changed": {
            "name": "on_gui_switch_state_changed",
            "shortDesc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) switch state is changed (related to switches).",
            "contains": [
              {
                "name": "on_gui_switch_state_changed",
                "desc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) switch state is changed (related to switches).",
                "attributes": {
                  "element": {
                    "name": "element",
                    "desc": "The switch whose switch state changed.",
                    "type": {
                      "value": "LuaGuiElement"
                    },
                    "optional": false
                  },
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who did the change.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_force_cease_fire_changed": {
            "name": "on_force_cease_fire_changed",
            "shortDesc": "Called when the a forces cease fire values change.",
            "contains": [
              {
                "name": "on_force_cease_fire_changed",
                "desc": "Called when the a forces cease fire values change.",
                "attributes": {
                  "force": {
                    "name": "force",
                    "desc": "The force who's cease fire changed.",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  },
                  "other_force": {
                    "name": "other_force",
                    "desc": "Which force was added or removed.",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  },
                  "added": {
                    "name": "added",
                    "desc": "If the other force was added or removed.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_force_friends_changed": {
            "name": "on_force_friends_changed",
            "shortDesc": "Called when the a forces friends change.",
            "contains": [
              {
                "name": "on_force_friends_changed",
                "desc": "Called when the a forces friends change.",
                "attributes": {
                  "force": {
                    "name": "force",
                    "desc": "The force who's friends changed.",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  },
                  "other_force": {
                    "name": "other_force",
                    "desc": "Which force was added or removed.",
                    "type": {
                      "value": "LuaForce"
                    },
                    "optional": false
                  },
                  "added": {
                    "name": "added",
                    "desc": "If the other force was added or removed.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_string_translated": {
            "name": "on_string_translated",
            "shortDesc": "Called when a translation request generated through [LuaPlayer::request_translation](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.request_translation) is translated.",
            "contains": [
              {
                "name": "on_string_translated",
                "desc": "Called when a translation request generated through [LuaPlayer::request_translation](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.request_translation) is translated.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "localised_string": {
                    "name": "localised_string",
                    "type": {
                      "value": "LocalisedString"
                    },
                    "optional": false
                  },
                  "result": {
                    "name": "result",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "translated": {
                    "name": "translated",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_script_trigger_effect": {
            "name": "on_script_trigger_effect",
            "shortDesc": "Called when a script trigger effect is triggered.",
            "contains": [
              {
                "name": "on_script_trigger_effect",
                "desc": "Called when a script trigger effect is triggered.",
                "attributes": {
                  "effect_id": {
                    "name": "effect_id",
                    "desc": "The effect_id specified in the trigger effect.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "surface_index": {
                    "name": "surface_index",
                    "desc": "The surface the effect happened on.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "source_position": {
                    "name": "source_position",
                    "type": {
                      "value": "Position"
                    },
                    "optional": true
                  },
                  "source_entity": {
                    "name": "source_entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  },
                  "target_position": {
                    "name": "target_position",
                    "type": {
                      "value": "Position"
                    },
                    "optional": true
                  },
                  "target_entity": {
                    "name": "target_entity",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_set_quick_bar_slot": {
            "name": "on_player_set_quick_bar_slot",
            "shortDesc": "Called when a player sets a quickbar slot to anything (new value, or set to empty).",
            "contains": [
              {
                "name": "on_player_set_quick_bar_slot",
                "desc": "Called when a player sets a quickbar slot to anything (new value, or set to empty).",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_player_toggled_map_editor": {
            "name": "on_pre_player_toggled_map_editor",
            "shortDesc": "Called before a player toggles the map editor on or off.",
            "contains": [
              {
                "name": "on_pre_player_toggled_map_editor",
                "desc": "Called before a player toggles the map editor on or off.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_script_inventory_resized": {
            "name": "on_pre_script_inventory_resized",
            "shortDesc": "Called just before a script inventory is resized.",
            "contains": [
              {
                "name": "on_pre_script_inventory_resized",
                "desc": "Called just before a script inventory is resized.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "If done by console command; the player who ran the command.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "mod": {
                    "name": "mod",
                    "desc": "The mod that did the resizing. This will be \"core\" if done by console command or scenario script.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "inventory": {
                    "name": "inventory",
                    "type": {
                      "value": "LuaInventory"
                    },
                    "optional": false
                  },
                  "old_size": {
                    "name": "old_size",
                    "desc": "The old inventory size.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "new_size": {
                    "name": "new_size",
                    "desc": "The new inventory size.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_script_inventory_resized": {
            "name": "on_script_inventory_resized",
            "shortDesc": "Called just after a script inventory is resized.",
            "contains": [
              {
                "name": "on_script_inventory_resized",
                "desc": "Called just after a script inventory is resized.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "If done by console command; the player who ran the command.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "mod": {
                    "name": "mod",
                    "desc": "The mod that did the resizing. This will be \"core\" if done by console command or scenario script.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "inventory": {
                    "name": "inventory",
                    "type": {
                      "value": "LuaInventory"
                    },
                    "optional": false
                  },
                  "old_size": {
                    "name": "old_size",
                    "desc": "The old inventory size.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "new_size": {
                    "name": "new_size",
                    "desc": "The new inventory size.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "overflow_inventory": {
                    "name": "overflow_inventory",
                    "desc": "Any items which didn't fit into the new inventory size.",
                    "type": {
                      "value": "LuaInventory"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_entity_destroyed": {
            "name": "on_entity_destroyed",
            "shortDesc": "Called after an entity is destroyed that has been registered with [LuaBootstrap::register_on_entity_destroyed](https://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.register_on_entity_destroyed)",
            "contains": [
              {
                "name": "on_entity_destroyed",
                "desc": "Called after an entity is destroyed that has been registered with [LuaBootstrap::register_on_entity_destroyed](https://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.register_on_entity_destroyed)",
                "attributes": {
                  "registration_number": {
                    "name": "registration_number",
                    "type": {
                      "value": "uint64"
                    },
                    "optional": false
                  },
                  "unit_number": {
                    "name": "unit_number",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_clicked_gps_tag": {
            "name": "on_player_clicked_gps_tag",
            "shortDesc": "Called when a player clicks a gps tag",
            "contains": [
              {
                "name": "on_player_clicked_gps_tag",
                "desc": "Called when a player clicks a gps tag",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "Index of the player",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "position": {
                    "name": "position",
                    "desc": "Map position contained in gps tag",
                    "type": {
                      "value": "Position"
                    },
                    "optional": false
                  },
                  "surface": {
                    "name": "surface",
                    "desc": "Surface name contained in gps tag, even when such surface does not exists",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_flushed_fluid": {
            "name": "on_player_flushed_fluid",
            "shortDesc": "Called after player flushed fluid",
            "contains": [
              {
                "name": "on_player_flushed_fluid",
                "desc": "Called after player flushed fluid",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "Index of the player",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "fluid": {
                    "name": "fluid",
                    "desc": "Name of a fluid that was flushed",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "amount": {
                    "name": "amount",
                    "desc": "Amount of fluid that was removed",
                    "type": {
                      "value": "double"
                    },
                    "optional": false
                  },
                  "entity": {
                    "name": "entity",
                    "desc": "Entity from which flush was performed",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "only_this_entity": {
                    "name": "only_this_entity",
                    "desc": "True if flush was requested only on this entity",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_permission_group_edited": {
            "name": "on_permission_group_edited",
            "shortDesc": "Called directly after a permission group is edited in some way.",
            "contains": [
              {
                "name": "on_permission_group_edited",
                "desc": "Called directly after a permission group is edited in some way.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player that did the editing.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "group": {
                    "name": "group",
                    "desc": "The group being edited.",
                    "type": {
                      "value": "LuaPermissionGroup"
                    },
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "desc": "The edit type: add-permission, remove-permission, enable-all, disable-all, add-player, remove-player, rename.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "action": {
                    "name": "action",
                    "desc": "The defines.input_action when the type is add-permission or remove-permission.",
                    "type": {
                      "value": "defines.input_action"
                    },
                    "optional": false
                  },
                  "other_player_index": {
                    "name": "other_player_index",
                    "desc": "The other player when the type is add-player or remove-player.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "old_name": {
                    "name": "old_name",
                    "desc": "The old group name when the type is rename.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "new_name": {
                    "name": "new_name",
                    "desc": "The new group name when the type is rename.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_permission_string_imported": {
            "name": "on_pre_permission_string_imported",
            "shortDesc": "Called directly before a permission string is imported.",
            "contains": [
              {
                "name": "on_pre_permission_string_imported",
                "desc": "Called directly before a permission string is imported.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player importing the string.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_permission_string_imported": {
            "name": "on_permission_string_imported",
            "shortDesc": "Called directly after a permission string is imported.",
            "contains": [
              {
                "name": "on_permission_string_imported",
                "desc": "Called directly after a permission string is imported.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player that imported the string.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_pre_permission_group_deleted": {
            "name": "on_pre_permission_group_deleted",
            "shortDesc": "Called directly before a permission group is deleted.",
            "contains": [
              {
                "name": "on_pre_permission_group_deleted",
                "desc": "Called directly before a permission group is deleted.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player doing the deletion.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "group": {
                    "name": "group",
                    "desc": "The group to be deleted.",
                    "type": {
                      "value": "LuaPermissionGroup"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_permission_group_deleted": {
            "name": "on_permission_group_deleted",
            "shortDesc": "Called directly after a permission group is deleted.",
            "contains": [
              {
                "name": "on_permission_group_deleted",
                "desc": "Called directly after a permission group is deleted.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player doing the deletion.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "group_name": {
                    "name": "group_name",
                    "desc": "The group that was deleted.",
                    "type": {
                      "value": "string"
                    },
                    "optional": false
                  },
                  "id": {
                    "name": "id",
                    "desc": "The group id that was deleted.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_permission_group_added": {
            "name": "on_permission_group_added",
            "shortDesc": "Called directly after a permission group is added.",
            "contains": [
              {
                "name": "on_permission_group_added",
                "desc": "Called directly after a permission group is added.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player that added the group.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "group": {
                    "name": "group",
                    "desc": "The group added.",
                    "type": {
                      "value": "LuaPermissionGroup"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_cutscene_cancelled": {
            "name": "on_cutscene_cancelled",
            "shortDesc": "Called when a cutscene finishes on its own or is cancelled by the player or by script.",
            "contains": [
              {
                "name": "on_cutscene_cancelled",
                "desc": "Called when a cutscene finishes on its own or is cancelled by the player or by script.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player the cutscene was shown to.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_configured_spider_remote": {
            "name": "on_player_configured_spider_remote",
            "shortDesc": "Called when a player configures spidertron remote to be connected with a given spidertron",
            "contains": [
              {
                "name": "on_player_configured_spider_remote",
                "desc": "Called when a player configures spidertron remote to be connected with a given spidertron",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player that configured the remote.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "vehicle": {
                    "name": "vehicle",
                    "desc": "Spider vehicle to which remote was connected to.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_player_used_spider_remote": {
            "name": "on_player_used_spider_remote",
            "shortDesc": "Called when a player uses spidertron remote to send a spidertron to a given position",
            "contains": [
              {
                "name": "on_player_used_spider_remote",
                "desc": "Called when a player uses spidertron remote to send a spidertron to a given position",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player that used the remote.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  },
                  "vehicle": {
                    "name": "vehicle",
                    "desc": "Spider vehicle which was requested to move.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "position": {
                    "name": "position",
                    "desc": "Goal position to which spidertron was sent to.",
                    "type": {
                      "value": "Position"
                    },
                    "optional": false
                  },
                  "success": {
                    "name": "success",
                    "desc": "If the use was successful. It may fail when spidertron has different driver or when player is on different surface.",
                    "type": {
                      "value": "boolean"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_spider_command_completed": {
            "name": "on_spider_command_completed",
            "shortDesc": "Called when a spider finishes moving to its autopilot position.",
            "contains": [
              {
                "name": "on_spider_command_completed",
                "desc": "Called when a spider finishes moving to its autopilot position.",
                "attributes": {
                  "vehicle": {
                    "name": "vehicle",
                    "desc": "Spider vehicle which was requested to move.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          },
          "on_entity_logistic_slot_changed": {
            "name": "on_entity_logistic_slot_changed",
            "shortDesc": "Called when one of an entity's personal logistic slots changes.",
            "contains": [
              {
                "name": "on_entity_logistic_slot_changed",
                "desc": "Called when one of an entity's personal logistic slots changes.",
                "attributes": {
                  "player_index": {
                    "name": "player_index",
                    "desc": "The player who changed the slot, or nil if changed by script.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": true
                  },
                  "entity": {
                    "name": "entity",
                    "desc": "The entity for whom a logistic slot was changed.",
                    "type": {
                      "value": "LuaEntity"
                    },
                    "optional": false
                  },
                  "slot_index": {
                    "name": "slot_index",
                    "desc": "The slot index that was changed.",
                    "type": {
                      "value": "uint"
                    },
                    "optional": false
                  }
                },
                "parents": [
                  "_All_Event_Parameters"
                ],
                "flags": "Dummy"
              }
            ]
          }
        }
      },
      "flow_precision_index": {
        "name": "flow_precision_index",
        "defines": {
          "five_seconds": {
            "name": "five_seconds"
          },
          "one_minute": {
            "name": "one_minute"
          },
          "ten_minutes": {
            "name": "ten_minutes"
          },
          "one_hour": {
            "name": "one_hour"
          },
          "ten_hours": {
            "name": "ten_hours"
          },
          "fifty_hours": {
            "name": "fifty_hours"
          },
          "two_hundred_fifty_hours": {
            "name": "two_hundred_fifty_hours"
          },
          "one_thousand_hours": {
            "name": "one_thousand_hours"
          }
        }
      },
      "group_state": {
        "name": "group_state",
        "defines": {
          "gathering": {
            "name": "gathering"
          },
          "moving": {
            "name": "moving"
          },
          "attacking_distraction": {
            "name": "attacking_distraction"
          },
          "attacking_target": {
            "name": "attacking_target"
          },
          "finished": {
            "name": "finished"
          },
          "pathfinding": {
            "name": "pathfinding"
          },
          "wander_in_group": {
            "name": "wander_in_group"
          }
        }
      },
      "gui_type": {
        "name": "gui_type",
        "defines": {
          "none": {
            "name": "none"
          },
          "entity": {
            "name": "entity"
          },
          "research": {
            "name": "research"
          },
          "controller": {
            "name": "controller"
          },
          "production": {
            "name": "production"
          },
          "item": {
            "name": "item"
          },
          "bonus": {
            "name": "bonus"
          },
          "trains": {
            "name": "trains"
          },
          "achievement": {
            "name": "achievement"
          },
          "blueprint_library": {
            "name": "blueprint_library"
          },
          "equipment": {
            "name": "equipment"
          },
          "logistic": {
            "name": "logistic"
          },
          "other_player": {
            "name": "other_player"
          },
          "permissions": {
            "name": "permissions"
          },
          "tutorials": {
            "name": "tutorials"
          },
          "custom": {
            "name": "custom"
          },
          "server_management": {
            "name": "server_management"
          },
          "player_management": {
            "name": "player_management"
          },
          "tile": {
            "name": "tile"
          }
        }
      },
      "input_action": {
        "name": "input_action",
        "defines": {
          "activate_copy": {
            "name": "activate_copy"
          },
          "activate_cut": {
            "name": "activate_cut"
          },
          "activate_paste": {
            "name": "activate_paste"
          },
          "add_permission_group": {
            "name": "add_permission_group"
          },
          "add_train_station": {
            "name": "add_train_station"
          },
          "admin_action": {
            "name": "admin_action"
          },
          "alt_select_area": {
            "name": "alt_select_area"
          },
          "alt_select_blueprint_entities": {
            "name": "alt_select_blueprint_entities"
          },
          "alternative_copy": {
            "name": "alternative_copy"
          },
          "begin_mining": {
            "name": "begin_mining"
          },
          "begin_mining_terrain": {
            "name": "begin_mining_terrain"
          },
          "build": {
            "name": "build"
          },
          "build_rail": {
            "name": "build_rail"
          },
          "build_terrain": {
            "name": "build_terrain"
          },
          "cancel_craft": {
            "name": "cancel_craft"
          },
          "cancel_deconstruct": {
            "name": "cancel_deconstruct"
          },
          "cancel_new_blueprint": {
            "name": "cancel_new_blueprint"
          },
          "cancel_research": {
            "name": "cancel_research"
          },
          "cancel_upgrade": {
            "name": "cancel_upgrade"
          },
          "change_active_character_tab": {
            "name": "change_active_character_tab"
          },
          "change_active_item_group_for_crafting": {
            "name": "change_active_item_group_for_crafting"
          },
          "change_active_item_group_for_filters": {
            "name": "change_active_item_group_for_filters"
          },
          "change_active_quick_bar": {
            "name": "change_active_quick_bar"
          },
          "change_arithmetic_combinator_parameters": {
            "name": "change_arithmetic_combinator_parameters"
          },
          "change_decider_combinator_parameters": {
            "name": "change_decider_combinator_parameters"
          },
          "change_entity_label": {
            "name": "change_entity_label"
          },
          "change_item_description": {
            "name": "change_item_description"
          },
          "change_item_label": {
            "name": "change_item_label"
          },
          "change_multiplayer_config": {
            "name": "change_multiplayer_config"
          },
          "change_picking_state": {
            "name": "change_picking_state"
          },
          "change_programmable_speaker_alert_parameters": {
            "name": "change_programmable_speaker_alert_parameters"
          },
          "change_programmable_speaker_circuit_parameters": {
            "name": "change_programmable_speaker_circuit_parameters"
          },
          "change_programmable_speaker_parameters": {
            "name": "change_programmable_speaker_parameters"
          },
          "change_riding_state": {
            "name": "change_riding_state"
          },
          "change_shooting_state": {
            "name": "change_shooting_state"
          },
          "change_train_stop_station": {
            "name": "change_train_stop_station"
          },
          "change_train_wait_condition": {
            "name": "change_train_wait_condition"
          },
          "change_train_wait_condition_data": {
            "name": "change_train_wait_condition_data"
          },
          "clear_cursor": {
            "name": "clear_cursor"
          },
          "connect_rolling_stock": {
            "name": "connect_rolling_stock"
          },
          "copy": {
            "name": "copy"
          },
          "copy_entity_settings": {
            "name": "copy_entity_settings"
          },
          "copy_opened_blueprint": {
            "name": "copy_opened_blueprint"
          },
          "copy_opened_item": {
            "name": "copy_opened_item"
          },
          "craft": {
            "name": "craft"
          },
          "cursor_split": {
            "name": "cursor_split"
          },
          "cursor_transfer": {
            "name": "cursor_transfer"
          },
          "custom_input": {
            "name": "custom_input"
          },
          "cycle_blueprint_book_backwards": {
            "name": "cycle_blueprint_book_backwards"
          },
          "cycle_blueprint_book_forwards": {
            "name": "cycle_blueprint_book_forwards"
          },
          "deconstruct": {
            "name": "deconstruct"
          },
          "delete_blueprint_library": {
            "name": "delete_blueprint_library"
          },
          "delete_blueprint_record": {
            "name": "delete_blueprint_record"
          },
          "delete_custom_tag": {
            "name": "delete_custom_tag"
          },
          "delete_permission_group": {
            "name": "delete_permission_group"
          },
          "destroy_item": {
            "name": "destroy_item"
          },
          "destroy_opened_item": {
            "name": "destroy_opened_item"
          },
          "disconnect_rolling_stock": {
            "name": "disconnect_rolling_stock"
          },
          "drag_train_schedule": {
            "name": "drag_train_schedule"
          },
          "drag_train_wait_condition": {
            "name": "drag_train_wait_condition"
          },
          "drop_blueprint_record": {
            "name": "drop_blueprint_record"
          },
          "drop_item": {
            "name": "drop_item"
          },
          "edit_blueprint_tool_preview": {
            "name": "edit_blueprint_tool_preview"
          },
          "edit_custom_tag": {
            "name": "edit_custom_tag"
          },
          "edit_permission_group": {
            "name": "edit_permission_group"
          },
          "export_blueprint": {
            "name": "export_blueprint"
          },
          "fast_entity_split": {
            "name": "fast_entity_split"
          },
          "fast_entity_transfer": {
            "name": "fast_entity_transfer"
          },
          "flush_opened_entity_fluid": {
            "name": "flush_opened_entity_fluid"
          },
          "flush_opened_entity_specific_fluid": {
            "name": "flush_opened_entity_specific_fluid"
          },
          "go_to_train_station": {
            "name": "go_to_train_station"
          },
          "grab_blueprint_record": {
            "name": "grab_blueprint_record"
          },
          "gui_checked_state_changed": {
            "name": "gui_checked_state_changed"
          },
          "gui_click": {
            "name": "gui_click"
          },
          "gui_confirmed": {
            "name": "gui_confirmed"
          },
          "gui_elem_changed": {
            "name": "gui_elem_changed"
          },
          "gui_location_changed": {
            "name": "gui_location_changed"
          },
          "gui_selected_tab_changed": {
            "name": "gui_selected_tab_changed"
          },
          "gui_selection_state_changed": {
            "name": "gui_selection_state_changed"
          },
          "gui_switch_state_changed": {
            "name": "gui_switch_state_changed"
          },
          "gui_text_changed": {
            "name": "gui_text_changed"
          },
          "gui_value_changed": {
            "name": "gui_value_changed"
          },
          "import_blueprint": {
            "name": "import_blueprint"
          },
          "import_blueprint_string": {
            "name": "import_blueprint_string"
          },
          "import_blueprints_filtered": {
            "name": "import_blueprints_filtered"
          },
          "import_permissions_string": {
            "name": "import_permissions_string"
          },
          "inventory_split": {
            "name": "inventory_split"
          },
          "inventory_transfer": {
            "name": "inventory_transfer"
          },
          "launch_rocket": {
            "name": "launch_rocket"
          },
          "lua_shortcut": {
            "name": "lua_shortcut"
          },
          "map_editor_action": {
            "name": "map_editor_action"
          },
          "market_offer": {
            "name": "market_offer"
          },
          "mod_settings_changed": {
            "name": "mod_settings_changed"
          },
          "open_achievements_gui": {
            "name": "open_achievements_gui"
          },
          "open_blueprint_library_gui": {
            "name": "open_blueprint_library_gui"
          },
          "open_blueprint_record": {
            "name": "open_blueprint_record"
          },
          "open_bonus_gui": {
            "name": "open_bonus_gui"
          },
          "open_character_gui": {
            "name": "open_character_gui"
          },
          "open_current_vehicle_gui": {
            "name": "open_current_vehicle_gui"
          },
          "open_equipment": {
            "name": "open_equipment"
          },
          "open_gui": {
            "name": "open_gui"
          },
          "open_item": {
            "name": "open_item"
          },
          "open_logistic_gui": {
            "name": "open_logistic_gui"
          },
          "open_mod_item": {
            "name": "open_mod_item"
          },
          "open_parent_of_opened_item": {
            "name": "open_parent_of_opened_item"
          },
          "open_production_gui": {
            "name": "open_production_gui"
          },
          "open_technology_gui": {
            "name": "open_technology_gui"
          },
          "open_tips_and_tricks_gui": {
            "name": "open_tips_and_tricks_gui"
          },
          "open_train_gui": {
            "name": "open_train_gui"
          },
          "open_train_station_gui": {
            "name": "open_train_station_gui"
          },
          "open_trains_gui": {
            "name": "open_trains_gui"
          },
          "paste_entity_settings": {
            "name": "paste_entity_settings"
          },
          "place_equipment": {
            "name": "place_equipment"
          },
          "quick_bar_pick_slot": {
            "name": "quick_bar_pick_slot"
          },
          "quick_bar_set_selected_page": {
            "name": "quick_bar_set_selected_page"
          },
          "quick_bar_set_slot": {
            "name": "quick_bar_set_slot"
          },
          "reassign_blueprint": {
            "name": "reassign_blueprint"
          },
          "remove_cables": {
            "name": "remove_cables"
          },
          "remove_train_station": {
            "name": "remove_train_station"
          },
          "reset_assembling_machine": {
            "name": "reset_assembling_machine"
          },
          "reset_item": {
            "name": "reset_item"
          },
          "rotate_entity": {
            "name": "rotate_entity"
          },
          "select_area": {
            "name": "select_area"
          },
          "select_blueprint_entities": {
            "name": "select_blueprint_entities"
          },
          "select_entity_slot": {
            "name": "select_entity_slot"
          },
          "select_item": {
            "name": "select_item"
          },
          "select_mapper_slot": {
            "name": "select_mapper_slot"
          },
          "select_next_valid_gun": {
            "name": "select_next_valid_gun"
          },
          "select_tile_slot": {
            "name": "select_tile_slot"
          },
          "send_spidertron": {
            "name": "send_spidertron"
          },
          "set_auto_launch_rocket": {
            "name": "set_auto_launch_rocket"
          },
          "set_autosort_inventory": {
            "name": "set_autosort_inventory"
          },
          "set_behavior_mode": {
            "name": "set_behavior_mode"
          },
          "set_car_weapons_control": {
            "name": "set_car_weapons_control"
          },
          "set_circuit_condition": {
            "name": "set_circuit_condition"
          },
          "set_circuit_mode_of_operation": {
            "name": "set_circuit_mode_of_operation"
          },
          "set_controller_logistic_trash_filter_item": {
            "name": "set_controller_logistic_trash_filter_item"
          },
          "set_deconstruction_item_tile_selection_mode": {
            "name": "set_deconstruction_item_tile_selection_mode"
          },
          "set_deconstruction_item_trees_and_rocks_only": {
            "name": "set_deconstruction_item_trees_and_rocks_only"
          },
          "set_entity_color": {
            "name": "set_entity_color"
          },
          "set_entity_energy_property": {
            "name": "set_entity_energy_property"
          },
          "set_entity_logistic_trash_filter_item": {
            "name": "set_entity_logistic_trash_filter_item"
          },
          "set_filter": {
            "name": "set_filter"
          },
          "set_flat_controller_gui": {
            "name": "set_flat_controller_gui"
          },
          "set_heat_interface_mode": {
            "name": "set_heat_interface_mode"
          },
          "set_heat_interface_temperature": {
            "name": "set_heat_interface_temperature"
          },
          "set_infinity_container_filter_item": {
            "name": "set_infinity_container_filter_item"
          },
          "set_infinity_container_remove_unfiltered_items": {
            "name": "set_infinity_container_remove_unfiltered_items"
          },
          "set_infinity_pipe_filter": {
            "name": "set_infinity_pipe_filter"
          },
          "set_inserter_max_stack_size": {
            "name": "set_inserter_max_stack_size"
          },
          "set_inventory_bar": {
            "name": "set_inventory_bar"
          },
          "set_linked_container_link_i_d": {
            "name": "set_linked_container_link_i_d"
          },
          "set_logistic_filter_item": {
            "name": "set_logistic_filter_item"
          },
          "set_logistic_filter_signal": {
            "name": "set_logistic_filter_signal"
          },
          "set_player_color": {
            "name": "set_player_color"
          },
          "set_recipe_notifications": {
            "name": "set_recipe_notifications"
          },
          "set_request_from_buffers": {
            "name": "set_request_from_buffers"
          },
          "set_research_finished_stops_game": {
            "name": "set_research_finished_stops_game"
          },
          "set_signal": {
            "name": "set_signal"
          },
          "set_splitter_priority": {
            "name": "set_splitter_priority"
          },
          "set_train_stopped": {
            "name": "set_train_stopped"
          },
          "set_trains_limit": {
            "name": "set_trains_limit"
          },
          "set_vehicle_automatic_targeting_parameters": {
            "name": "set_vehicle_automatic_targeting_parameters"
          },
          "setup_assembling_machine": {
            "name": "setup_assembling_machine"
          },
          "setup_blueprint": {
            "name": "setup_blueprint"
          },
          "setup_single_blueprint_record": {
            "name": "setup_single_blueprint_record"
          },
          "smart_pipette": {
            "name": "smart_pipette"
          },
          "spawn_item": {
            "name": "spawn_item"
          },
          "stack_split": {
            "name": "stack_split"
          },
          "stack_transfer": {
            "name": "stack_transfer"
          },
          "start_repair": {
            "name": "start_repair"
          },
          "start_research": {
            "name": "start_research"
          },
          "start_walking": {
            "name": "start_walking"
          },
          "stop_building_by_moving": {
            "name": "stop_building_by_moving"
          },
          "switch_connect_to_logistic_network": {
            "name": "switch_connect_to_logistic_network"
          },
          "switch_constant_combinator_state": {
            "name": "switch_constant_combinator_state"
          },
          "switch_inserter_filter_mode_state": {
            "name": "switch_inserter_filter_mode_state"
          },
          "switch_power_switch_state": {
            "name": "switch_power_switch_state"
          },
          "switch_to_rename_stop_gui": {
            "name": "switch_to_rename_stop_gui"
          },
          "take_equipment": {
            "name": "take_equipment"
          },
          "toggle_deconstruction_item_entity_filter_mode": {
            "name": "toggle_deconstruction_item_entity_filter_mode"
          },
          "toggle_deconstruction_item_tile_filter_mode": {
            "name": "toggle_deconstruction_item_tile_filter_mode"
          },
          "toggle_driving": {
            "name": "toggle_driving"
          },
          "toggle_enable_vehicle_logistics_while_moving": {
            "name": "toggle_enable_vehicle_logistics_while_moving"
          },
          "toggle_entity_logistic_requests": {
            "name": "toggle_entity_logistic_requests"
          },
          "toggle_equipment_movement_bonus": {
            "name": "toggle_equipment_movement_bonus"
          },
          "toggle_map_editor": {
            "name": "toggle_map_editor"
          },
          "toggle_personal_logistic_requests": {
            "name": "toggle_personal_logistic_requests"
          },
          "toggle_personal_roboport": {
            "name": "toggle_personal_roboport"
          },
          "toggle_show_entity_info": {
            "name": "toggle_show_entity_info"
          },
          "translate_string": {
            "name": "translate_string"
          },
          "undo": {
            "name": "undo"
          },
          "upgrade": {
            "name": "upgrade"
          },
          "upgrade_opened_blueprint_by_item": {
            "name": "upgrade_opened_blueprint_by_item"
          },
          "upgrade_opened_blueprint_by_record": {
            "name": "upgrade_opened_blueprint_by_record"
          },
          "use_artillery_remote": {
            "name": "use_artillery_remote"
          },
          "use_item": {
            "name": "use_item"
          },
          "wire_dragging": {
            "name": "wire_dragging"
          },
          "write_to_console": {
            "name": "write_to_console"
          }
        }
      },
      "inventory": {
        "name": "inventory",
        "defines": {
          "fuel": {
            "name": "fuel"
          },
          "burnt_result": {
            "name": "burnt_result"
          },
          "chest": {
            "name": "chest"
          },
          "furnace_source": {
            "name": "furnace_source"
          },
          "furnace_result": {
            "name": "furnace_result"
          },
          "furnace_modules": {
            "name": "furnace_modules"
          },
          "character_main": {
            "name": "character_main"
          },
          "character_guns": {
            "name": "character_guns"
          },
          "character_ammo": {
            "name": "character_ammo"
          },
          "character_armor": {
            "name": "character_armor"
          },
          "character_vehicle": {
            "name": "character_vehicle"
          },
          "character_trash": {
            "name": "character_trash"
          },
          "god_main": {
            "name": "god_main"
          },
          "editor_main": {
            "name": "editor_main"
          },
          "editor_guns": {
            "name": "editor_guns"
          },
          "editor_ammo": {
            "name": "editor_ammo"
          },
          "editor_armor": {
            "name": "editor_armor"
          },
          "roboport_robot": {
            "name": "roboport_robot"
          },
          "roboport_material": {
            "name": "roboport_material"
          },
          "robot_cargo": {
            "name": "robot_cargo"
          },
          "robot_repair": {
            "name": "robot_repair"
          },
          "assembling_machine_input": {
            "name": "assembling_machine_input"
          },
          "assembling_machine_output": {
            "name": "assembling_machine_output"
          },
          "assembling_machine_modules": {
            "name": "assembling_machine_modules"
          },
          "lab_input": {
            "name": "lab_input"
          },
          "lab_modules": {
            "name": "lab_modules"
          },
          "mining_drill_modules": {
            "name": "mining_drill_modules"
          },
          "item_main": {
            "name": "item_main"
          },
          "rocket_silo_rocket": {
            "name": "rocket_silo_rocket"
          },
          "rocket_silo_result": {
            "name": "rocket_silo_result"
          },
          "rocket": {
            "name": "rocket"
          },
          "car_trunk": {
            "name": "car_trunk"
          },
          "car_ammo": {
            "name": "car_ammo"
          },
          "cargo_wagon": {
            "name": "cargo_wagon"
          },
          "turret_ammo": {
            "name": "turret_ammo"
          },
          "beacon_modules": {
            "name": "beacon_modules"
          },
          "character_corpse": {
            "name": "character_corpse"
          },
          "artillery_turret_ammo": {
            "name": "artillery_turret_ammo"
          },
          "artillery_wagon_ammo": {
            "name": "artillery_wagon_ammo"
          },
          "spider_trunk": {
            "name": "spider_trunk"
          },
          "spider_ammo": {
            "name": "spider_ammo"
          },
          "spider_trash": {
            "name": "spider_trash"
          }
        }
      },
      "logistic_member_index": {
        "name": "logistic_member_index",
        "defines": {
          "logistic_container": {
            "name": "logistic_container"
          },
          "vehicle_storage": {
            "name": "vehicle_storage"
          },
          "character_requester": {
            "name": "character_requester"
          },
          "character_storage": {
            "name": "character_storage"
          },
          "character_provider": {
            "name": "character_provider"
          },
          "generic_on_off_behavior": {
            "name": "generic_on_off_behavior"
          }
        }
      },
      "logistic_mode": {
        "name": "logistic_mode",
        "defines": {
          "none": {
            "name": "none"
          },
          "active_provider": {
            "name": "active_provider"
          },
          "storage": {
            "name": "storage"
          },
          "requester": {
            "name": "requester"
          },
          "passive_provider": {
            "name": "passive_provider"
          },
          "buffer": {
            "name": "buffer"
          }
        }
      },
      "mouse_button_type": {
        "name": "mouse_button_type",
        "defines": {
          "none": {
            "name": "none"
          },
          "left": {
            "name": "left"
          },
          "right": {
            "name": "right"
          },
          "middle": {
            "name": "middle"
          }
        }
      },
      "prototypes": {
        "name": "prototypes",
        "desc": "A dictionary mapping all top-level prototypes to a list of their associated prototypes. For the top-level `entity` prototype for example, it lists `furnace` , `inserter` , `container` , etc.",
        "defines": {}
      },
      "rail_connection_direction": {
        "name": "rail_connection_direction",
        "defines": {
          "left": {
            "name": "left"
          },
          "straight": {
            "name": "straight"
          },
          "right": {
            "name": "right"
          },
          "none": {
            "name": "none"
          }
        }
      },
      "rail_direction": {
        "name": "rail_direction",
        "defines": {
          "front": {
            "name": "front"
          },
          "back": {
            "name": "back"
          }
        }
      },
      "relative_gui_position": {
        "name": "relative_gui_position",
        "defines": {
          "top": {
            "name": "top"
          },
          "bottom": {
            "name": "bottom"
          },
          "left": {
            "name": "left"
          },
          "right": {
            "name": "right"
          }
        }
      },
      "relative_gui_type": {
        "name": "relative_gui_type",
        "defines": {
          "accumulator_gui": {
            "name": "accumulator_gui"
          },
          "achievement_gui": {
            "name": "achievement_gui"
          },
          "additional_entity_info_gui": {
            "name": "additional_entity_info_gui"
          },
          "admin_gui": {
            "name": "admin_gui"
          },
          "arithmetic_combinator_gui": {
            "name": "arithmetic_combinator_gui"
          },
          "armor_gui": {
            "name": "armor_gui"
          },
          "assembling_machine_gui": {
            "name": "assembling_machine_gui"
          },
          "assembling_machine_select_recipe_gui": {
            "name": "assembling_machine_select_recipe_gui"
          },
          "beacon_gui": {
            "name": "beacon_gui"
          },
          "blueprint_book_gui": {
            "name": "blueprint_book_gui"
          },
          "blueprint_library_gui": {
            "name": "blueprint_library_gui"
          },
          "blueprint_setup_gui": {
            "name": "blueprint_setup_gui"
          },
          "bonus_gui": {
            "name": "bonus_gui"
          },
          "burner_equipment_gui": {
            "name": "burner_equipment_gui"
          },
          "car_gui": {
            "name": "car_gui"
          },
          "constant_combinator_gui": {
            "name": "constant_combinator_gui"
          },
          "container_gui": {
            "name": "container_gui"
          },
          "controller_gui": {
            "name": "controller_gui"
          },
          "decider_combinator_gui": {
            "name": "decider_combinator_gui"
          },
          "deconstruction_item_gui": {
            "name": "deconstruction_item_gui"
          },
          "electric_energy_interface_gui": {
            "name": "electric_energy_interface_gui"
          },
          "electric_network_gui": {
            "name": "electric_network_gui"
          },
          "entity_variations_gui": {
            "name": "entity_variations_gui"
          },
          "entity_with_energy_source_gui": {
            "name": "entity_with_energy_source_gui"
          },
          "equipment_grid_gui": {
            "name": "equipment_grid_gui"
          },
          "furnace_gui": {
            "name": "furnace_gui"
          },
          "generic_on_off_entity_gui": {
            "name": "generic_on_off_entity_gui"
          },
          "heat_interface_gui": {
            "name": "heat_interface_gui"
          },
          "infinity_pipe_gui": {
            "name": "infinity_pipe_gui"
          },
          "inserter_gui": {
            "name": "inserter_gui"
          },
          "item_with_inventory_gui": {
            "name": "item_with_inventory_gui"
          },
          "lab_gui": {
            "name": "lab_gui"
          },
          "lamp_gui": {
            "name": "lamp_gui"
          },
          "linked_container_gui": {
            "name": "linked_container_gui"
          },
          "loader_gui": {
            "name": "loader_gui"
          },
          "logistic_gui": {
            "name": "logistic_gui"
          },
          "market_gui": {
            "name": "market_gui"
          },
          "mining_drill_gui": {
            "name": "mining_drill_gui"
          },
          "other_player_gui": {
            "name": "other_player_gui"
          },
          "permissions_gui": {
            "name": "permissions_gui"
          },
          "pipe_gui": {
            "name": "pipe_gui"
          },
          "power_switch_gui": {
            "name": "power_switch_gui"
          },
          "production_gui": {
            "name": "production_gui"
          },
          "programmable_speaker_gui": {
            "name": "programmable_speaker_gui"
          },
          "rail_chain_signal_gui": {
            "name": "rail_chain_signal_gui"
          },
          "rail_signal_gui": {
            "name": "rail_signal_gui"
          },
          "reactor_gui": {
            "name": "reactor_gui"
          },
          "rename_stop_gui": {
            "name": "rename_stop_gui"
          },
          "resource_entity_gui": {
            "name": "resource_entity_gui"
          },
          "roboport_gui": {
            "name": "roboport_gui"
          },
          "rocket_silo_gui": {
            "name": "rocket_silo_gui"
          },
          "server_config_gui": {
            "name": "server_config_gui"
          },
          "spider_vehicle_gui": {
            "name": "spider_vehicle_gui"
          },
          "splitter_gui": {
            "name": "splitter_gui"
          },
          "standalone_character_gui": {
            "name": "standalone_character_gui"
          },
          "storage_tank_gui": {
            "name": "storage_tank_gui"
          },
          "tile_variations_gui": {
            "name": "tile_variations_gui"
          },
          "train_gui": {
            "name": "train_gui"
          },
          "train_stop_gui": {
            "name": "train_stop_gui"
          },
          "trains_gui": {
            "name": "trains_gui"
          },
          "transport_belt_gui": {
            "name": "transport_belt_gui"
          },
          "upgrade_item_gui": {
            "name": "upgrade_item_gui"
          },
          "wall_gui": {
            "name": "wall_gui"
          }
        }
      },
      "render_mode": {
        "name": "render_mode",
        "defines": {
          "game": {
            "name": "game"
          },
          "chart": {
            "name": "chart"
          },
          "chart_zoomed_in": {
            "name": "chart_zoomed_in"
          }
        }
      },
      "rich_text_setting": {
        "name": "rich_text_setting",
        "defines": {
          "enabled": {
            "name": "enabled"
          },
          "disabled": {
            "name": "disabled"
          },
          "highlight": {
            "name": "highlight"
          }
        }
      },
      "riding": {
        "name": "riding",
        "defines": {
          "acceleration": {
            "name": "acceleration",
            "defines": {
              "nothing": {
                "name": "nothing"
              },
              "accelerating": {
                "name": "accelerating"
              },
              "braking": {
                "name": "braking"
              },
              "reversing": {
                "name": "reversing"
              }
            }
          },
          "direction": {
            "name": "direction",
            "defines": {
              "left": {
                "name": "left"
              },
              "straight": {
                "name": "straight"
              },
              "right": {
                "name": "right"
              }
            }
          }
        }
      },
      "shooting": {
        "name": "shooting",
        "defines": {
          "not_shooting": {
            "name": "not_shooting"
          },
          "shooting_enemies": {
            "name": "shooting_enemies"
          },
          "shooting_selected": {
            "name": "shooting_selected"
          }
        }
      },
      "signal_state": {
        "name": "signal_state",
        "desc": "State of an ordinary rail signal.",
        "defines": {
          "open": {
            "name": "open",
            "shortDesc": "Green."
          },
          "closed": {
            "name": "closed",
            "shortDesc": "Red."
          },
          "reserved": {
            "name": "reserved",
            "shortDesc": "Orange."
          },
          "reserved_by_circuit_network": {
            "name": "reserved_by_circuit_network",
            "shortDesc": "Red - From circuit network."
          }
        }
      },
      "train_state": {
        "name": "train_state",
        "defines": {
          "on_the_path": {
            "name": "on_the_path",
            "shortDesc": "Normal state -- following the path."
          },
          "path_lost": {
            "name": "path_lost",
            "shortDesc": "Had path and lost it -- must stop."
          },
          "no_schedule": {
            "name": "no_schedule",
            "shortDesc": "Doesn't have anywhere to go."
          },
          "no_path": {
            "name": "no_path",
            "shortDesc": "Has no path and is stopped."
          },
          "arrive_signal": {
            "name": "arrive_signal",
            "shortDesc": "Braking before a rail signal."
          },
          "wait_signal": {
            "name": "wait_signal",
            "shortDesc": "Waiting at a signal."
          },
          "arrive_station": {
            "name": "arrive_station",
            "shortDesc": "Braking before a station."
          },
          "wait_station": {
            "name": "wait_station",
            "shortDesc": "Waiting at a station."
          },
          "manual_control_stop": {
            "name": "manual_control_stop",
            "shortDesc": "Switched to manual control and has to stop."
          },
          "manual_control": {
            "name": "manual_control",
            "shortDesc": "Can move if user explicitly sits in and rides the train."
          },
          "destination_full": {
            "name": "destination_full",
            "shortDesc": "Same as no_path but all candidate train stops are full"
          }
        }
      },
      "transport_line": {
        "name": "transport_line",
        "defines": {
          "left_line": {
            "name": "left_line"
          },
          "right_line": {
            "name": "right_line"
          },
          "left_underground_line": {
            "name": "left_underground_line"
          },
          "right_underground_line": {
            "name": "right_underground_line"
          },
          "secondary_left_line": {
            "name": "secondary_left_line"
          },
          "secondary_right_line": {
            "name": "secondary_right_line"
          },
          "left_split_line": {
            "name": "left_split_line"
          },
          "right_split_line": {
            "name": "right_split_line"
          },
          "secondary_left_split_line": {
            "name": "secondary_left_split_line"
          },
          "secondary_right_split_line": {
            "name": "secondary_right_split_line"
          }
        }
      },
      "wire_connection_id": {
        "name": "wire_connection_id",
        "defines": {
          "electric_pole": {
            "name": "electric_pole"
          },
          "power_switch_left": {
            "name": "power_switch_left"
          },
          "power_switch_right": {
            "name": "power_switch_right"
          }
        }
      },
      "wire_type": {
        "name": "wire_type",
        "defines": {
          "red": {
            "name": "red"
          },
          "green": {
            "name": "green"
          },
          "copper": {
            "name": "copper"
          }
        }
      }
    }
  },
  "commonClassAttributes": {
    "help": {
      "name": "help",
      "desc": "All methods, and properties that this object supports.",
      "returnObject": "string",
      "attribute_type": "function"
    },
    "valid": {
      "name": "valid",
      "desc": "Is this object valid?",
      "type": "boolean",
      "optional": false
    },
    "object_name": {
      "name": "object_name",
      "desc": "The class name of this object.",
      "type": "string",
      "optional": false
    }
  },
  "commonClasses": {
    "LuaObject": {
      "name": "LuaObject",
      "attributes": {
        "object_name": {
          "name": "object_name",
          "desc": "The class name of this object.",
          "type": "string",
          "optional": false
        }
      }
    },
    "LuaObjectHelp": {
      "name": "LuaObjectHelp",
      "attributes": {
        "help": {
          "name": "help",
          "desc": "All methods, and properties that this object supports.",
          "returnObject": "string",
          "attribute_type": "function"
        }
      },
      "parents": [
        "LuaObject"
      ]
    },
    "LuaObjectValid": {
      "name": "LuaObjectValid",
      "attributes": {
        "valid": {
          "name": "valid",
          "desc": "Is this object valid?",
          "type": "boolean",
          "optional": false
        }
      },
      "parents": [
        "LuaObject"
      ]
    }
  },
  "globalClasses": {
    "game": "LuaGameScript",
    "script": "LuaBootstrap",
    "remote": "LuaRemote",
    "commands": "LuaCommandProcessor",
    "settings": "LuaSettings",
    "rcon": "LuaRCON",
    "rendering": "LuaRendering"
  },
  "commonEventParameters": {
    "name": "_All_Event_Parameters",
    "attributes": {
      "name": {
        "name": "name",
        "desc": "Identifier of the event",
        "type": "defines.events",
        "optional": false
      },
      "tick": {
        "name": "tick",
        "desc": "Tick the event was generated",
        "type": "uint",
        "optional": false
      }
    }
  }
}